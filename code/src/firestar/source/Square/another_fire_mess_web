#!/usr/bin/perl
use FindBin;
my $cwd=$FindBin::Bin;
use Config::IniFiles;
# BEGIN: jmrc
my ($config) = $ARGV[0];
my $variables=Config::IniFiles->new(-file => $config);
# END: jmrc

# Will have a program that aligns template sequence to sequence of linked chad via glopez linked_file by ssearch
# So each residue's matrix scores will come via this alignment. No need for "line up"
#

# This one is for aligning for the purposes of evaluating sites
#
# # recommendation - a final score of "C" approximates to 99% reliable
# 	    - a final score of 5 approximates to 90% reliable
# 	    - a final score of 4 approximates to 85% reliable
# 	    - a final score of 3 approximates to 75% reliable
# 	    - a final score of 2 approximates to 60% reliable
# 	    - a final score of 1 approximates to 45% reliable
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

my $home=$variables->val('PATHS','home');
my $blos_path="$home/database/BLOSUM62";
my $release=$variables->val('DATABASES','release');
my $mtx_path=$variables->val('PATHS','chads')."/chads_$release";

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@maxsequence = ();
@pda_maximum = (); @tempresmax = (); 
@pda_score = (); @tempresscore = (); 
@cores = (); 
@data = ();
$offset = 0; $offsetres = 0;

# These are the three inputs, self explanatory
# BEGIN: jmrc
$target_sequence = $ARGV[1]; 
$template_sequence = $ARGV[2];
$pdb_code = $ARGV[3]; 
if($ARGV[4] =~ /.../){$scoring_type = $ARGV[4];}
else{$scoring_type = "psi";}
# END: jmrc

# These options are optimised for PSI-BLAST alignments
# you can change them if you want by hand!)
if($scoring_type eq "psi"){
	$peak_base = 4;
	$tail = 2; 
	$res_in_peak = 2;
	$score_90 = 4;
	$score_75 = 2;
	$score_60 = 1;
	$score_45 = 0;
	}
#elsif($scoring_type eq "fst"){
#	$peak_base = 4;
#	$tail = 2; 
#	$res_in_peak = 2;
#	$score_90 = 3;
#	$score_75 = 2;
#	$score_60 = 1;
#	$score_45 = 0;
#	}


# Standardise gaps and case (in sequence and in ID) ...
$target_sequence =~ tr/[a-z]/[A-Z]/;
$template_sequence =~ tr/[a-z]/[A-Z]/;
$target_sequence =~ s/\W/-/g;
$template_sequence =~ s/\W/-/g;

$pdb4 = substr($pdb_code, 0, 4);
$pdbchain = substr($pdb_code, 4, 1);
$pdb4 =~ tr/[A-Z]/[a-z]/;
#$pdbchain =~ tr/[a-z]/[A-Z]/;
$pdb_code = join "", $pdb4, $pdbchain; 

# ... and off we go!
@initialtemp = split "", $template_sequence;
@initialtarg = split "", $target_sequence;
@tempsequence = split "", $template_sequence;
@targsequence = split "", $target_sequence;

if (!open (MTXFILE, "$mtx_path/$pdb_code.mtx"))
	{die "$mtx_path/$pdb_code - no mtx file\n"; exit 1}

# Does PDB file exist in this directory 
if (!open (TEMPSEQFILE, "$mtx_path/$pdb_code.chd"))
		{ die "$mtx_path/$pdb_code - no fasta file" }

# Get the stored sequences for comparison
$pdbtempseq = <TEMPSEQFILE>;
$pdbtempseq = <TEMPSEQFILE>;
close TEMPSEQFILE;
$pdbtempseq =~ tr/[a-z]/[A-Z]/;
chomp $pdbtempseq;
@pdbtempseq = split "", $pdbtempseq;


# Check sequences are correct
$seqs_ok = &getseqs($pdbtempseq);
if (!$seqs_ok)
	{print "Bad TempSeq $pdb_code\n"; exit 2}

# Load up pssm, 
&getmtx;

# Do the business
&getscores;
&smooth;
&prep_for_out;



sub getseqs			#pulls out PSIBLAST alignments
{
$found_start7 = 0; 
$pdbtempjoin = $_[0];

while ($tempsequence[0] eq "-" || $targsequence[0] eq "-")
        {
	shift @tempsequence; 
	shift @targsequence;
	$offsetres++;
	}

$temp = $#tempsequence - $#targsequence;
for ($i=0;$i>$temp;$i--)
	{pop @targsequence}
for ($i=0;$i<$temp;$i++)
	{pop @tempsequence}

while ($tempsequence[$#tempsequence] eq "-" || $targsequence[$#targsequence] eq "-") 
        {
	pop @tempsequence; 
	pop @targsequence;
	}

#check sequences here!!

#strip out gaps from template sequence in alignment
$stripped_template = join "", @tempsequence;
$stripped_template =~ s/-//g;

$template_length = length($stripped_template);
if ($template_length < 7)
	{return 0}

#using "line up" type thing to find start and finish of temp sequence

$tempseq7 = substr($stripped_template, 0, 7);
$pdb7 = substr($pdbtempjoin, 0, 7);

if ($template_length > $#pdbtempseq)
	{
	for ($i=0;$i<$template_length;$i++)
		{
		$tempseq7 = substr($stripped_template, $i, 7);
		if ($tempseq7 eq $pdb7)
			{
			$found_start7 = 1; 
			$offset = $offset - $i;
			last
			}
		}
	$tempseq7 = substr($stripped_template, 0, 7);
	if (!$found_start7)
		{
		for ($i=0;$i<$#pdbtempseq;$i++)
			{
			$pdb7 = substr($pdbtempjoin, $i, 7);
			if ($tempseq7 eq $pdb7)
				{
				$found_start7 = 1; 
				$offset = $i;
				last
				}
			}
		}
	}
else
	{
	for ($i=0;$i<$#pdbtempseq;$i++)
		{
		$pdb7 = substr($pdbtempjoin, $i, 7);
		if ($tempseq7 eq $pdb7)
			{
			$found_start7 = 1; 
			$offset = $i;
			last
			}
		}
	$pdb7 = substr($pdbtempjoin, 0, 7);
	if (!$found_start7)
		{
		for ($i=0;$i<$template_length;$i++)
			{
			$tempseq7 = substr($stripped_template, $i, 7);
			if ($tempseq7 eq $pdb7)
				{
				$found_start7 = 1; 
				$offset = $offset - $i;
				last
				}
			}
		}
	}
	
if (!$found_start7)
	{return 0}

#spit out trailing bits from pdbtempseq at both ends and compare

@tempresidues = split "", $stripped_template;

if ($offset >= 0)
	{	
	for ($i=$offset, $k=0;$i<=$#pdbtempseq;$i++, $k++)
		{
		if ($tempresidues[$k] ne $pdbtempseq[$i])
			{
#print "Fails at $k with Res query $tempresidues[$k] and pdb $pdbtempseq[$i]\n"; 
			return 0
			}
		if ($k<=$#tempresidues)
			{last}
		}
	}
else
	{	
	for ($i=$offset;$i<0;$i++)
		{
		shift @tempresidues;
		shift @tempsequence;
		shift @targsequence;
		$offsetres++;
		while ($tempsequence[0] eq "-")
		        {
			shift @tempsequence; 
			shift @targsequence;
			$offsetres++;
			}
		}
	$stripped_template = join "", @tempresidues;
	$template_length = length($stripped_template);

	if ($#pdbtempseq < $#tempresidues)
		{$limit = $#pdbtempseq}
	else
		{$limit = $#tempresidues}
	for ($i=0;$i<=$limit;$i++)
		{
		if ($tempresidues[$i] ne $pdbtempseq[$i])
			{return 0}
		}
	$offset = 0;
	}

return 1;
}







sub prep_for_out
{
#You can change this too, this is so that the score outputs alongside the sequence
for ($i=0;$i<=$#pda_score;$i++)
        {
	if ($pda_score[$i] > 4.5 )
		{$pda_int[$i] = 9}
	elsif ($pda_score[$i] > 4 )
		{$pda_int[$i] = 8}
	elsif ($pda_score[$i] > 3.66 )
		{$pda_int[$i] = 7}
	elsif ($pda_score[$i] > 3.33 )
		{$pda_int[$i] = 6}
	elsif ($pda_score[$i] > 3 )
		{$pda_int[$i] = 5}
	elsif ($pda_score[$i] > 2.66 )
		{$pda_int[$i] = 4}
	elsif ($pda_score[$i] > 2.33 )
		{$pda_int[$i] = 3}
	elsif ($pda_score[$i] > 2 )
		{$pda_int[$i] = 2}
	elsif ($pda_score[$i] > 1.5)
		{$pda_int[$i] = 1}
	else
		{$pda_int[$i] = 0}
	}


&get_reliable_regions;

for ($i=0;$i<=$#pda_maximum;$i++)
        {
	if ($pda_maximum[$i] > 4.5 )
		{$pda_intmax[$i] = 9}
	elsif ($pda_maximum[$i] > 4 )
		{$pda_intmax[$i] = 8}
	elsif ($pda_maximum[$i] > 3.66 )
		{$pda_intmax[$i] = 7}
	elsif ($pda_maximum[$i] > 3.33 )
		{$pda_intmax[$i] = 6}
	elsif ($pda_maximum[$i] > 3 )
		{$pda_intmax[$i] = 5}
	elsif ($pda_maximum[$i] > 2.66 )
		{$pda_intmax[$i] = 4}
	elsif ($pda_maximum[$i] > 2.33 )
		{$pda_intmax[$i] = 3}
	elsif ($pda_maximum[$i] > 2 )
		{$pda_intmax[$i] = 2}
	elsif ($pda_maximum[$i] > 1.5)
		{$pda_intmax[$i] = 1}
	else
		{$pda_intmax[$i] = 0}
	}


for ($i=0;$i<=$#initialtemp;$i++)
	{print "$initialtemp[$i]"}
print "\n";

for ($i=0;$i<=$#initialtarg;$i++)
	{print "$initialtarg[$i]"}
print "\n";


if ($#initialtemp > $#initialtarg)
	{
	$end = $#initialtarg;
	$end2 = $#initialtemp
	}
else
	{
	$end = $#initialtemp;
	$end2 = $#initialtarg
	}

for ($i=$end;$i<$#pda_score;$i--)
	{
	if ($initialtemp[$i] eq "-" || $initialtarg[$i] eq "-")
       		{
		push @pda_score, "-"; 
		push @pda_int, "-"; 
		push @pda_intmax, "-"; 
		push @maxsequence, "-"; 
		}
	else
		{last}
	}



for ($i=0;$i<=$#pda_score;$i++)
	{
	if ($pda_score[$i] ne "@" && $pda_score[$i] >= $score_90)
                {$pda_score[$i] = "5"}
	elsif ($pda_score[$i] ne "@" && $pda_score[$i] >= $score_75)
                {$pda_score[$i] = "4"}
	elsif ($pda_score[$i] ne "@" && $pda_score[$i] >= $score_60)
                {$pda_score[$i] = "3"}
	elsif ($pda_score[$i] ne "@" && $pda_score[$i] > $score_45)
                {$pda_score[$i] = "2"}
	elsif ($pda_score[$i] ne "@")
                {$pda_score[$i] = "-"}
	}

for ($i=0;$i<=$#pda_score;$i++)
        {
	if ($tempsequence[$i] ne $targsequence[$i])
	        { 
		if ($pda_score[$i] eq "@" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] > 0)
		        {
		        $pda_score[$i] = 5;
		        }
		elsif ($pda_score[$i] eq "@" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] == 0)
			{
		        $pda_score[$i] = 4;
		        }
		elsif ($pda_score[$i] eq "@")
			{
		        $pda_score[$i] = 3;
		        }
		elsif ($pda_score[$i] eq "5" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] > 0)
		        {
		        $pda_score[$i] = 4;
		        }
		elsif ($pda_score[$i] eq "5" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] == 0)
		        {
		        $pda_score[$i] = 3;
		        }
		elsif ($pda_score[$i] eq "5")
		        {
		        $pda_score[$i] = 2;
		        }
		elsif ($pda_score[$i] eq "4" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] > 0)
		        {
		        $pda_score[$i] = 3;
		        }
		elsif ($pda_score[$i] eq "4" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] == 0)
		        {
		        $pda_score[$i] = 2;
		        }
		elsif ($pda_score[$i] eq "4")
		        {
		        $pda_score[$i] = 1;
		        }
		elsif ($pda_score[$i] eq "3" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] >= 0)
		        {
		        $pda_score[$i] = 2;
		        }
		elsif ($pda_score[$i] eq "3" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] == 0)
		        {
		        $pda_score[$i] = 1;
		        }
		elsif ($pda_score[$i] eq "3")
		        {
		        $pda_score[$i] = "-";
		        }
		elsif ($pda_score[$i] eq "2" && $blomatrix[$amino{$tempsequence[$i]}][$amino{$targsequence[$i]}] >= 0)
		        {
		        $pda_score[$i] = 1;
		        }
		elsif ($pda_score[$i] eq "2")
		        {
		        $pda_score[$i] = "-";
		        }
		elsif ($pda_score[$i] eq "1")
		        {
		        $pda_score[$i] = "-";
		        }
		}
	}


for ($i=0;$i<$offsetres;$i++)
	{
	unshift @pda_score, "-"; 
	unshift @pda_int, "-"; 
	unshift @pda_intmax, "-"; 
	unshift @maxsequence, "-"; 
	}

for ($i=0;$i<=$end2;$i++)
        {
	if ($pda_score[$i])
		{print "$pda_score[$i]"}
	else
		{print "-"}
	}
print "  \n";

for ($i=0;$i<=$end2;$i++)
        {
	if ($pda_int[$i])
		{print "$pda_int[$i]"}
	else
		{print "-"}
	}
print "  \n";

for ($i=0;$i<=$end2;$i++)
        {
	if ($pda_intmax[$i])
		{print "$pda_intmax[$i]"}
	else
		{print "-"}
	}
print "  \n";

#Note maxsequence does something strange with gap splicing near the Cterminal
for ($i=0;$i<=$end2;$i++)
        {
	if ($maxsequence[$i])
		{print "$maxsequence[$i]"}
	else
		{print "-"}
	}
print "  \n";

}




sub getmtx
{
@temp = ();
while ($string = <MTXFILE>)             #read in dead line
        {if ($string =~ /^-32768/) {last}}
for ($i=0;$i<$offset;$i++)
	{$string = <MTXFILE>}
@temp = split ' ', $string;
push @data, [ @temp ];
while ($string = <MTXFILE>)             #read in dead line
        {
	@temp = split ' ', $string;
        push @data, [ @temp ];
        }
close MTXFILE;
}




sub getscores			#pulls out PSIBLAST alignments
{
for ($i=0, $res=0; $i<=$#tempsequence; $i++)
        {
	if ($tempsequence[$i] eq "-" && $targsequence[$i] eq "-")
                {$tempresscore[$i] += 0}
	elsif ($tempsequence[$i] eq "-" && $targsequence[$i] ne "-")
                {$tempresscore[$i] += -200}
        elsif ($targsequence[$i] eq "-")
                {$tempresscore[$i] += -200; $res++}
        elsif ($targsequence[$i] eq "A")
                {$tempresscore[$i] += "$data[$res][1]"; $res++}
        elsif ($targsequence[$i] eq "C")
                {$tempresscore[$i] += "$data[$res][3]"; $res++}
        elsif ($targsequence[$i] eq "D")
                {$tempresscore[$i] += "$data[$res][4]"; $res++}
        elsif ($targsequence[$i] eq "E")
                {$tempresscore[$i] += "$data[$res][5]"; $res++}
        elsif ($targsequence[$i] eq "F")
                {$tempresscore[$i] += "$data[$res][6]"; $res++}
        elsif ($targsequence[$i] eq "G")
                {$tempresscore[$i] += "$data[$res][7]"; $res++}
        elsif ($targsequence[$i] eq "H")
                {$tempresscore[$i] += "$data[$res][8]"; $res++}
        elsif ($targsequence[$i] eq "I") 
                {$tempresscore[$i] += "$data[$res][9]"; $res++}
        elsif ($targsequence[$i] eq "K")
                {$tempresscore[$i] += "$data[$res][10]"; $res++}
        elsif ($targsequence[$i] eq "L")
                {$tempresscore[$i] += "$data[$res][11]"; $res++}
        elsif ($targsequence[$i] eq "M")
                {$tempresscore[$i] += "$data[$res][12]"; $res++}
        elsif ($targsequence[$i] eq "N")
                {$tempresscore[$i] += "$data[$res][13]"; $res++}
        elsif ($targsequence[$i] eq "P")
                {$tempresscore[$i] += "$data[$res][14]"; $res++}
        elsif ($targsequence[$i] eq "Q")
                {$tempresscore[$i] += "$data[$res][15]"; $res++}
        elsif ($targsequence[$i] eq "R")
                {$tempresscore[$i] += "$data[$res][16]"; $res++}
        elsif ($targsequence[$i] eq "S")
                {$tempresscore[$i] += "$data[$res][17]"; $res++}
        elsif ($targsequence[$i] eq "T")
                {$tempresscore[$i] += "$data[$res][18]"; $res++}
        elsif ($targsequence[$i] eq "V")
                {$tempresscore[$i] += "$data[$res][19]"; $res++}
        elsif ($targsequence[$i] eq "W")
                {$tempresscore[$i] += "$data[$res][20]"; $res++} 
        elsif ($targsequence[$i] eq "X")
                {$tempresscore[$i] += "$data[$res][21]"; $res++}
        elsif ($targsequence[$i] eq "Y")
                {$tempresscore[$i] += "$data[$res][22]"; $res++}
        else 
                {$tempresscore[$i] += -200; $res++}
#print "Temp is $tempsequence[$i], targ is $targsequence[$i] and the score is $tempresscore[$i-1] at residue $i\n";
	}

for ($i=0, $res=0; $i<=$#tempsequence; $i++)
        {
	if ($tempsequence[$i] eq "-" && $targsequence[$i] eq "-")
                {$tempresmax[$i] += 0}
	elsif ($tempsequence[$i] eq "-" && $targsequence[$i] ne "-")
                {$tempresmax[$i] += -200}
	else
		{
		$tempresmax[$i] = -200;
		for ($m=1;$m<=22;$m++)
			{
			next if ($m == 2);
			if ($data[$res][$m] > $tempresmax[$i])
				{
				$maxsequence[$i] = $m;
				$tempresmax[$i] = $data[$res][$m]
				}
			}
		$res++;
		$k++;
		}
        if ($maxsequence[$i] == 1)
                {$maxsequence[$i] = "A"}
        elsif ($maxsequence[$i] == 3)
                {$maxsequence[$i] = "C"}
        elsif ($maxsequence[$i] == 4)
                {$maxsequence[$i] = "D"}
        elsif ($maxsequence[$i] == 5)
                {$maxsequence[$i] = "E"}
        elsif ($maxsequence[$i] == 6)
                {$maxsequence[$i] = "F"}
        elsif ($maxsequence[$i] == 7)
                {$maxsequence[$i] = "G"}
        elsif ($maxsequence[$i] == 8)
                {$maxsequence[$i] = "H"}
        elsif ($maxsequence[$i] == 9) 
                {$maxsequence[$i] = "I"}
        elsif ($maxsequence[$i] == 10)
                {$maxsequence[$i] = "K"}
        elsif ($maxsequence[$i] == 11)
                {$maxsequence[$i] = "L"}
        elsif ($maxsequence[$i] == 12)
                {$maxsequence[$i] = "M"}
        elsif ($maxsequence[$i] == 13)
                {$maxsequence[$i] = "N"}
        elsif ($maxsequence[$i] == 14)
                {$maxsequence[$i] = "P"}
        elsif ($maxsequence[$i] == 15)
                {$maxsequence[$i] = "Q"}
        elsif ($maxsequence[$i] == 16)
                {$maxsequence[$i] = "R"}
        elsif ($maxsequence[$i] == 17)
                {$maxsequence[$i] = "S"}
        elsif ($maxsequence[$i] == 18)
                {$maxsequence[$i] = "T"}
        elsif ($maxsequence[$i] == 19)
                {$maxsequence[$i] = "V"}
        elsif ($maxsequence[$i] == 20)
                {$maxsequence[$i] = "W"}
        elsif ($maxsequence[$i] == 21)
                {$maxsequence[$i] = "X"}
        elsif ($maxsequence[$i] == 22)
                {$maxsequence[$i] = "Y"}
        else 
                {$maxsequence[$i] = "-"}
	}
}




sub smooth
{
$smooth5 = $tempresscore[0]*3+$tempresscore[1]*2+$tempresscore[2];
$pda_score[0] = $smooth5/900;
$smooth5 = $tempresscore[1]*3+$tempresscore[2]*2+$tempresscore[0]*2+$tempresscore[3];
$pda_score[1] = $smooth5/900;
$endloop = $#tempresscore-1;
for ($i=2;$i<$endloop;$i++)
	{
	$smooth5 = $tempresscore[$i]*3+$tempresscore[$i+1]*2+
		$tempresscore[$i-1]*2+$tempresscore[$i-2]+$tempresscore[$i+2];
	$pda_score[$i] = $smooth5/900;
	}
$smooth5 = $tempresscore[$#tempresscore-1]*3+$tempresscore[$#tempresscore-2]*2
	+$tempresscore[$#tempresscore]*2+$tempresscore[$#tempresscore-3];
$pda_score[$#tempresscore-1] = $smooth5/900;
$smooth5 = $tempresscore[$#tempresscore]*3+$tempresscore[$#tempresscore-1]*2
	+$tempresscore[$#tempresscore-2];
$pda_score[$#tempresscore] = $smooth5/900;


$smooth5 = $tempresmax[0]*3+$tempresmax[1]*2+$tempresmax[2];
$pda_maximum[0] = $smooth5/900;
$smooth5 = $tempresmax[1]*3+$tempresmax[2]*2+$tempresmax[0]*2+$tempresmax[3];
$pda_maximum[1] = $smooth5/900;
$endloop = $#tempresmax-1;
for ($i=2;$i<$endloop;$i++)
	{
	$smooth5 = $tempresmax[$i]*3+$tempresmax[$i+1]*2+
		$tempresmax[$i-1]*2+$tempresmax[$i-2]+$tempresmax[$i+2];
	$pda_maximum[$i] = $smooth5/900;
	}
$smooth5 = $tempresmax[$#tempresmax-1]*3+$tempresmax[$#tempresmax-2]*2
	+$tempresmax[$#tempresmax]*2+$tempresmax[$#tempresmax-3];
$pda_maximum[$#tempresmax-1] = $smooth5/900;
$smooth5 = $tempresmax[$#tempresmax]*3+$tempresmax[$#tempresmax-1]*2
	+$tempresmax[$#tempresmax-2];
$pda_maximum[$#tempresmax] = $smooth5/900;
}




sub get_reliable_regions
{
%amino = (
       'A'=>  1,   'R'=> 2,   'N'=> 3,   'D'=> 4,
       'C'=>  5,   'Q'=> 6,   'E'=> 7,   'G'=> 8,
       'H'=>  9,   'I'=> 10,  'L'=> 11,  'K'=> 12,
       'M'=> 13,   'F'=> 14,  'P'=> 15,  'S'=> 16,
       'T'=> 17,   'W'=> 18,  'Y'=> 19,  'V'=> 20, 
       'B'=> 21,   'Z'=> 22,  'X'=> 23,
       );

&get_blosum;

$above4 = 0;
for ($i=0;$i<=$#pda_score;$i++)
	{
        if ($pda_score[$i] > $peak_base)
                {$above4++}
        if ($pda_score[$i] < $tail)
                {$above4 = 0}
        if ($above4 >= $res_in_peak)
                {$pda_score[$i] = "@"}
	}

$above4 = 0;
for ($i=$#pda_score;$i>=0;$i--)
	{
	if ($pda_score[$i] eq "@")
                {$above4++}
        elsif ($pda_score[$i] < $tail)
                {$above4 = 0}
        if ($above4 && $pda_score[$i] >= $tail)
                {$pda_score[$i] = "@"}
	}
}



#note, this doesnt actually do anything any more - you can take it out if you like
sub get_blosum
{
open (BLOSFILE, "<$blos_path")
	or die "nastily!!";
while (<BLOSFILE>)
	{last if !(/^#/)}

for ($j=1;$j<=23;$j++)
	{ $blomatrix[$j] = [split " ", <BLOSFILE>]; }
 
#This works for this BLOSUM62 - if it aint this BLOSUM62 you will need to change things.

#  Matrix made by matblas from blosum45.iij
#  #  * column uses minimum score
#  #  BLOSUM Clustered Scoring Matrix in 1/3 Bit Units
#  #  Blocks Database = /data/blocks_5.0/blocks.dat
#  #  Cluster Percentage: >= 45
#  #  Entropy =   0.3795, Expected =  -0.2789
#     A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
#     A  5 -2 -1 -2 -1 -1 -1  0 -2 -1 -1 -1 -1 -2 -1  1  0 -2 -2  0 -1 -1 -1 -5
#     R -2  7  0 -1 -3  1  0 -2  0 -3 -2  3 -1 -2 -2 -1 -1 -2 -1 -2 -1  0 -1 -5
#     N -1  0  6  2 -2  0  0  0  1 -2 -3  0 -2 -2 -2  1  0 -4 -2 -3  4  0 -1 -5
#     D -2 -1  2  7 -3  0  2 -1  0 -4 -3  0 -3 -4 -1  0 -1 -4 -2 -3  5  1 -1 -5
#     C -1 -3 -2 -3 12 -3 -3 -3 -3 -3 -2 -3 -2 -2 -4 -1 -1 -5 -3 -1 -2 -3 -1 -5
#     Q -1  1  0  0 -3  6  2 -2  1 -2 -2  1  0 -4 -1  0 -1 -2 -1 -3  0  4 -1 -5
#     E -1  0  0  2 -3  2  6 -2  0 -3 -2  1 -2 -3  0  0 -1 -3 -2 -3  1  4 -1 -5
#     G  0 -2  0 -1 -3 -2 -2  7 -2 -4 -3 -2 -2 -3 -2  0 -2 -2 -3 -3 -1 -2 -1 -5
#     H -2  0  1  0 -3  1  0 -2 10 -3 -2 -1  0 -2 -2 -1 -2 -3  2 -3  0  0 -1 -5
#     I -1 -3 -2 -4 -3 -2 -3 -4 -3  5  2 -3  2  0 -2 -2 -1 -2  0  3 -3 -3 -1 -5
#     L -1 -2 -3 -3 -2 -2 -2 -3 -2  2  5 -3  2  1 -3 -3 -1 -2  0  1 -3 -2 -1 -5
#     K -1  3  0  0 -3  1  1 -2 -1 -3 -3  5 -1 -3 -1 -1 -1 -2 -1 -2  0  1 -1 -5
#     M -1 -1 -2 -3 -2  0 -2 -2  0  2  2 -1  6  0 -2 -2 -1 -2  0  1 -2 -1 -1 -5
#     F -2 -2 -2 -4 -2 -4 -3 -3 -2  0  1 -3  0  8 -3 -2 -1  1  3  0 -3 -3 -1 -5
#     P -1 -2 -2 -1 -4 -1  0 -2 -2 -2 -3 -1 -2 -3  9 -1 -1 -3 -3 -3 -2 -1 -1 -5
#     S  1 -1  1  0 -1  0  0  0 -1 -2 -3 -1 -2 -2 -1  4  2 -4 -2 -1  0  0 -1 -5
#     T  0 -1  0 -1 -1 -1 -1 -2 -2 -1 -1 -1 -1 -1 -1  2  5 -3 -1  0  0 -1 -1 -5
#     W -2 -2 -4 -4 -5 -2 -3 -2 -3 -2 -2 -2 -2  1 -3 -4 -3 15  3 -3 -4 -2 -1 -5
#     Y -2 -1 -2 -2 -3 -1 -2 -3  2  0  0 -1  0  3 -3 -2 -1  3  8 -1 -2 -2 -1 -5
#     V  0 -2 -3 -3 -1 -3 -3 -3 -3  3  1 -2  1  0 -3 -1  0 -3 -1  5 -3 -3 -1 -5
#     B -1 -1  4  5 -2  0  1 -1  0 -3 -3  0 -2 -3 -2  0  0 -4 -2 -3  4  2 -1 -5
#     Z -1  0  0  1 -3  4  4 -2  0 -3 -2  1 -1 -3 -1  0 -1 -2 -2 -3  2  4 -1 -5
#     X -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -5
#     * -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5  1
close BLOSFILE;
}
