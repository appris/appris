#!/bin/bash

# -----------------------------------------------------------------------------
# Local variables
VER=0.1b
VERDATE="1-Apr-2013"

FILENAME=`basename $0`
FILENAME="${FILENAME%.*}"
DIRNAME=`dirname $0`

CONF_DB=""
CONF_SPECIES=""
METHODS=""
FORMAT=""
OUTPUT_DIR=""
LOG_LEVEL=""

# -----------------------------------------------------------------------------
# Load external functions
source ${DIRNAME}/appris_env

# -----------------------------------------------------------------------------
# Usage

USAGE="
\n
 APPRIS's binary package.\n
\n
 Name:\n
\t appris_retrieve_annots\n
\n
 Description:\n
\t Retrieves annotations from APPRIS methods.\n
\n Files that they will be downloaded from the website.\n
\n
 Required arguments:\n
\t -d [-dbconf]\n
\t\t INI file for database configuration\n
\n
\t -c [-conf]\n
\t\t Source file with env variables for the input dataset\n
\n
\t -m [-method]\n
\t\t Methods which will execute:\n
\t\t firestar,matador3d,spade,corsair,corsair_alt,thump,crash,proteo,appris\n
\n
\t -f [-format]\n
\t\t gtf\n
\t\t gff3\n
\t\t bed\n
\t\t json\n
\n
\t -o [-out]\n
\t\t Output path\n
\t\t data/g15.v3.15Jul2013/\n
\n
\t -l, -loglevel\n
\t\t info\n
\t\t debug\n
\n
\t -v [-version]\n
\t -h [-help]\n
\n
\n
 Author: Jose Manuel Rodriguez Carrasco -jmrodriguez@cnio.es- (INB-GN2,CNIO)\n
\n
"

# -----------------------------------------------------------------------------
# Get input parameters

while expr "//$1" : //- >/dev/null
do
	case "$1" in
		-d | -dbconf )
			CONF_DB=$2
			shift
			;;
		-c | -conf )
			CONF_SPECIES=$2
			shift
			;;
		-m | -methods )
			METHODS=$2
			shift
			;;
		-f | -format )
			case "$2" in
				gtf | gff3 | bed | bed12 | json )      
					FORMAT=$2
					;;
				* )
					echo Unknown format name: "$2" 
					echo -e $USAGE
					exit 1
					;;
			esac
			shift
			;;
		-o | -out )
        	OUTPUT_DIR=$2
        	shift
			;;
		-l | -loglevel )
			case "$2" in
				info | debug )
		        	LOG_LEVEL=$2
					;;
				* )
					echo Unknown loglevel: "$2" 
					echo -e $USAGE
					exit 1
					;;
			esac
			shift
			;;
		-h | -help )
			echo -e $USAGE		
			exit
			;;
		-v | -version )
			echo "$VER", "$VERDATE"
			exit
			;;
		* )
			echo Unknown option: "$1"
			echo -e $USAGE
			exit 1
			;;
	esac
	shift
done

if [ "${CONF_DB}" == "" ]; then
	echo You must specify the config file INI of database!
	echo -e $USAGE
	exit 1
fi

if [ "${CONF_SPECIES}" == "" ]; then
	echo You must specify at least one config file for SPECIES!
	echo -e $USAGE
	exit 1
fi

if [ "${METHODS}" == "" ]; then
	echo You must specify the methods!
	echo -e $USAGE
	exit 1
fi

if [ "${FORMAT}" == "" ]; then
	echo You must specify at least one format!
	echo -e $USAGE
	exit 1
fi  

if [ "${OUTPUT_DIR}" != "" ]; then
	APPRIS_ANNOT_DIR="${OUTPUT_DIR}"
	APPRIS_DATA_DIR="${OUTPUT_DIR}"
fi

# -----------------------------------------------------------------------------
# Prepare Environment from config file for SPECIES
load_appris_specie_env "${CONF_SPECIES}" "verbose"

prepare_workspace "${APPRIS_DATA_DIR}"

# -----------------------------------------------------------------------------
# Get method script name
METHOD_SCRIPT_2="retrieve_method_data"

# -----------------------------------------------------------------------------
# Required var declarations
if [ "${APPRIS_SPECIES}" != "" ]; then
	SPECIES_ID=$(echo ${APPRIS_SPECIES} | tr "[:upper:]" "[:lower:]" | sed 's/ /_/')
else
	echo Error within env variables: APPRIS_SPECIES!
	exit 1
fi
DB_PARAMETERS=""
if [ "${CONF_DB}" != "" ]; then
	DB_PARAMETERS=" --apprisdb-conf=${CONF_DB}"
fi
OUTPUT_PREFIX="${APPRIS_DATA_DIR}/appris_method"

prepare_workspace "${APPRIS_WORKSPACE_LOG_DIR}"

# -----------------------------------------------------------------------------
# Run method
SCRIPT_2="${APPRIS_SCRIPTS_DIR}/${METHOD_SCRIPT_2}.pl"

# from a given list of genes
if [[ "${GENE_LIST}" != ""  || "${APPRIS_CHR_LIST}" == "" ]] ; then

	# local parameters
	LOG_PARAMETERS=""
	if [ "$LOG_LEVEL" != "" ]; then
		LOG_FILENAME="${APPRIS_WORKSPACE_LOG_DIR}/${FILENAME}.${SPECIES_ID}.log"
		LOG_PARAMETERS="--loglevel=${LOG_LEVEL} --logappend --logfile=${LOG_FILENAME}"
	fi	

	# export the annotations of methods
	echo "================="
	echo "perl ${SCRIPT_2}"
	echo " --species="${APPRIS_SPECIES}""
	echo " --methods=${METHODS}"
	echo " --format=${FORMAT}"
	echo " --output=${OUTPUT_PREFIX}"
	echo " ${DB_PARAMETERS}"
	echo " ${LOG_PARAMETERS}"

	perl ${SCRIPT_2} \
		--species="${APPRIS_SPECIES}" \
		--methods=${METHODS} \
		--format=${FORMAT} \
		--output=${OUTPUT_PREFIX} \
		${DB_PARAMETERS} \
		${LOG_PARAMETERS}
	echo "================="
	
# for the whole genome chromsome by chromosome
else

	CHROMOSOME=(${APPRIS_CHR_LIST//,/ })
	INDEX=${#CHROMOSOME[@]}
	for ((i=0;i<$INDEX;i++)); do
	
		# local vars
		CHR="${CHROMOSOME[${i}]}"
		POSITION="${CHR}"	
		CHR_OUTPUT_PREFIX="${OUTPUT_PREFIX}.${POSITION}"
		
		# local parameters
		LOG_PARAMETERS=""
		if [ "$LOG_LEVEL" != "" ]; then
			LOG_FILENAME="${APPRIS_WORKSPACE_LOG_DIR}/${FILENAME}.${SPECIES_ID}.${POSITION}.log"
			LOG_PARAMETERS="--loglevel=${LOG_LEVEL} --logappend --logfile=${LOG_FILENAME}"
		fi	
	
		# export the annotations of methods
		echo "================="
		echo "perl ${SCRIPT_2}"
		echo " --species="${APPRIS_SPECIES}""
		echo " --chr=${CHR}"
		echo " --methods=${METHODS}"
		echo " --format=${FORMAT}"
		echo " --output=${CHR_OUTPUT_PREFIX}"
		echo " ${DB_PARAMETERS}"
		echo " ${LOG_PARAMETERS}"
	
		perl ${SCRIPT_2} \
			--species="${APPRIS_SPECIES}" \
			--chr=${CHR} \
			--methods=${METHODS} \
			--format=${FORMAT} \
			--output=${CHR_OUTPUT_PREFIX} \
			${DB_PARAMETERS} \
			${LOG_PARAMETERS}
		echo "================="
	
		# concatenate outputs
		echo "================="
		METHODS_ARR=$( echo ${METHODS} | tr "," " ")
		for M in ${METHODS_ARR};do	
			CHR_OUTPUT_METHOD="${CHR_OUTPUT_PREFIX}.${M}.${FORMAT}"
			OUTPUT_METHOD="${OUTPUT_PREFIX}.${M}.${FORMAT}"
			
			echo "cat ${CHR_OUTPUT_METHOD} >> ${OUTPUT_METHOD}"
			cat ${CHR_OUTPUT_METHOD} >> ${OUTPUT_METHOD}
		done	
		echo "================="
		
	done
	
	# delete tmp files
	echo "================="
	CHROMOSOME=(${APPRIS_CHR_LIST//,/ })
	INDEX=${#CHROMOSOME[@]}
	for ((i=0;i<$INDEX;i++)); do
		CHR="${CHROMOSOME[${i}]}"
		POSITION="${CHR}"
		CHR_OUTPUT_PREFIX="${OUTPUT_PREFIX}.${POSITION}.*"
		echo "rm ${CHR_OUTPUT_PREFIX}"
		rm ${CHR_OUTPUT_PREFIX}
	done
	echo "================="
	
fi

# -----------------------------------------------------------------------------
# Prepare output depending on the type of FORMAT
echo "================="	
METHODS_ARR=$( echo ${METHODS} | tr "," "\n" | uniq )
for M in ${METHODS_ARR};do	
	
	OUTPUT_METHOD="${OUTPUT_PREFIX}.${M}.${FORMAT}"
	
	if [ "${FORMAT}" == "bed12" ]; then
		# Sort the the tracks
		echo "sort -k1,1 -k2,2n ${OUTPUT_METHOD} > ${OUTPUT_METHOD}.2 && mv ${OUTPUT_METHOD}.2 ${OUTPUT_METHOD}"
		sort -k1,1 -k2,2n ${OUTPUT_METHOD} > ${OUTPUT_METHOD}.2
		mv ${OUTPUT_METHOD}.2  ${OUTPUT_METHOD}

		M2=$( echo $M | sed 's/\-[^\-]*//g')
		AS_FILE="${UCSC_BED_AS_FILE}.${M2}"
		BED_TYPE="bed12"

		# For selected methods, adjust settings for bedToBigBed depending on file contents.
		if [[ "$M2" == "appris" || "$M2" == "matador3d" || "$M2" == "matador3d2" ]]
		then
			long_strings=$(awk 'BEGIN {lstrings=0}; length($4) > 255 || length($12) > 255 {lstrings=1; exit;}; END {print lstrings}' "${OUTPUT_METHOD}")
			if [[ $long_strings == 1 ]]
			then
				AS_FILE="${UCSC_BED_AS_FILE}.${M2}.bed3plus10"
				BED_TYPE="bed3+10"
			fi
		fi

		# Convert to BigBed
		OUTPUT_BB=$( echo $OUTPUT_METHOD | sed 's/\.bed12//g' | sed 's/\.bed//g' )
		echo "bedToBigBed -as=${AS_FILE} -type=${BED_TYPE} ${OUTPUT_METHOD} ${UCSC_CHROM_SIZE_FILE} ${OUTPUT_BB}.bb"
		bedToBigBed -as=${AS_FILE} -type=${BED_TYPE} ${OUTPUT_METHOD} ${UCSC_CHROM_SIZE_FILE} ${OUTPUT_BB}.bb
	fi	
	# compress outputs for both formats
	echo "gzip -9 ${OUTPUT_METHOD}"
	gzip -9 ${OUTPUT_METHOD}
	
	echo ""
done
echo "================="
	


