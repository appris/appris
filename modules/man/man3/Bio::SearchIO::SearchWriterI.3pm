.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::SearchWriterI 3pm"
.TH Bio::SearchIO::SearchWriterI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SearchIO::SearchWriterI \- Interface for outputting parsed Search results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Bio::SearchIO::SearchWriterI objects cannot be instantiated since this
module defines a pure interface.
.PP
Given an object that implements the Bio::SearchIO::SearchWriterI interface,
you can do the following things with it:
.PP
.Vb 1
\&    print $writer\->to_string( $result_obj, @args );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module defines abstract methods that all subclasses must implement
to be used for outputting results from Bio::Search::Result::ResultI
objects.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Chervitz <sac\-at\-bioperl.org>
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
.SS "to_string"
.IX Subsection "to_string"
.Vb 10
\& Purpose   : Produces data for each Search::Result::ResultI in a string.
\&           : This is an abstract method. For some useful implementations,
\&           : see ResultTableWriter.pm, HitTableWriter.pm, 
\&           : and HSPTableWriter.pm.
\& Usage     : print $writer\->to_string( $result_obj, @args );
\& Argument  : $result_obj = A Bio::Search::Result::ResultI object
\&           : @args = any additional arguments used by your implementation.
\& Returns   : String containing data for each search Result or any of its
\&           : sub\-objects (Hits and HSPs).
\& Throws    : n/a
.Ve
.SS "start_report"
.IX Subsection "start_report"
.Vb 6
\& Title   : start_report
\& Usage   : $self\->start_report()
\& Function: The method to call when starting a report. You can override it
\&           to make a custom header
\& Returns : string
\& Args    : none
.Ve
.SS "end_report"
.IX Subsection "end_report"
.Vb 8
\& Title   : end_report
\& Usage   : $self\->end_report()
\& Function: The method to call when ending a report, this is
\&           mostly for cleanup for formats which require you to 
\&           have something at the end of the document (</BODY></HTML>)
\&           for HTML
\& Returns : string
\& Args    : none
.Ve
.SS "filter"
.IX Subsection "filter"
.Vb 6
\& Title   : filter
\& Usage   : $writer\->filter(\*(Aqhsp\*(Aq, \e&hsp_filter);
\& Function: Filter out either at HSP,Hit,or Result level
\& Returns : none
\& Args    : string => data type,
\&           CODE reference
.Ve
