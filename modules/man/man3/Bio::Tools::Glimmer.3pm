.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Glimmer 3pm"
.TH Bio::Tools::Glimmer 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Glimmer \- parser for Glimmer 2.X/3.X prokaryotic and 
GlimmerM/GlimmerHMM eukaryotic gene predictions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Bio::Tools::Glimmer;
\&
\&   # file
\&   my $parser = Bio::Tools::Glimmer\->new(\-file => $file);
\&   # filehandle:
\&   $parser = Bio::Tools::Glimmer\->new( \-fh  => \e*INPUT );
\&   # provide a sequence identifier (Glimmer 2.X)
\&   my $parser = Bio::Tools::Glimmer\->new(\-file => $file, \-seqname => seqname);
\&   # force format (override automatic detection)
\&   my $parser = Bio::Tools::Glimmer\->new(\-file => $file, \-format => \*(AqGlimmerM\*(Aq);
\&
\&   # parse the results
\&   # note: this class is\-a Bio::Tools::AnalysisResult which implements
\&   # Bio::SeqAnalysisParserI, i.e., $glimmer\->next_feature() is the same
\&
\&   while(my $gene = $parser\->next_prediction()) {
\&       # For eukaryotic input (GlimmerM/GlimmerHMM), $gene will be an instance
\&       # of Bio::Tools::Prediction::Gene, which inherits off
\&       # Bio::SeqFeature::Gene::Transcript, and $gene\->exons() will return an
\&       # array of Bio::Tools::Prediction::Exon objects.
\&       # For prokaryotic input (Glimmer2.X/Glimmer3.X), $gene will be an
\&       # instance of Bio::SeqFeature::Generic
\&
\&       # all exons (eukaryotic only):
\&       @exon_arr = $gene\->exons();
\&       # initial exons only
\&       @init_exons = $gene\->exons(\*(AqInitial\*(Aq);
\&       # internal exons only
\&       @intrl_exons = $gene\->exons(\*(AqInternal\*(Aq);
\&       # terminal exons only
\&       @term_exons = $gene\->exons(\*(AqTerminal\*(Aq);
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a module for parsing Glimmer, GlimmerM and GlimmerHMM predictions.  
It will create gene objects from the prediction report which can 
be attached to a sequence using Bioperl objects, or output as \s-1GFF\s0 
suitable for loading into Bio::DB::GFF for use with Gbrowse.
.PP
Glimmer is open source and available at
<http://www.cbcb.umd.edu/software/glimmer/>.
.PP
GlimmerM is open source and available at 
<http://www.tigr.org/software/glimmerm/>.
.PP
GlimmerHMM is open source and available at
<http://www.cbcb.umd.edu/software/GlimmerHMM/>.
.PP
Note that Glimmer 2.X will only process the first
sequence in a fasta file, and the prediction report does not contain any
sort of sequence identifier
.PP
Note that Glimmer 3.X produces two output files.  This module only parses
the .predict file.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Torsten Seemann
.PP
Mark Johnson
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Glimmer\->new();
\& Function: Builds a new Bio::Tools::Glimmer object 
\& Returns : an instance of Bio::Tools::Glimmer
\& Args    : format (\*(AqGlimmer\*(Aq, \*(AqGlimmerM\*(Aq, \*(AqGlimmerHMM\*(Aq), seqname
.Ve
.SS "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $glimmer\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /glimmer/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 6
\& Title   : next_feature
\& Usage   : while($gene = $glimmer\->next_feature()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the Glimmer result
\&           file. Call this method repeatedly until FALSE is returned.
\&
\&           The returned object is actually a SeqFeatureI implementing object.
\&           This method is required for classes implementing the
\&           SeqAnalysisParserI interface, and is merely an alias for 
\&           next_prediction() at present.
\&
\& Example :
\& Returns : A Bio::Tools::Prediction::Gene object.
\& Args    :
.Ve
.SS "next_prediction"
.IX Subsection "next_prediction"
.Vb 6
\& Title   : next_prediction
\& Usage   : while($gene = $glimmer\->next_prediction()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the Glimmer result
\&           file. Call this method repeatedly until FALSE is returned.
\&
\& Example :
\& Returns : A Bio::Tools::Prediction::Gene object.
\& Args    :
.Ve
.SS "_parse_predictions"
.IX Subsection "_parse_predictions"
.Vb 6
\& Title   : _parse_predictions()
\& Usage   : $obj\->_parse_predictions()
\& Function: Parses the prediction section. Automatically called by
\&           next_prediction() if not yet done.
\& Example :
\& Returns :
.Ve
.SS "_parse_eukaryotic"
.IX Subsection "_parse_eukaryotic"
.Vb 6
\& Title   : _parse_eukaryotic()
\& Usage   : $obj\->_parse_eukaryotic()
\& Function: Parses the prediction section. Automatically called by
\&           next_prediction() if not yet done.
\& Example :
\& Returns :
.Ve
.SS "_parse_prokaryotic"
.IX Subsection "_parse_prokaryotic"
.Vb 6
\& Title   : _parse_prokaryotic()
\& Usage   : $obj\->_parse_prokaryotic()
\& Function: Parses the prediction section. Automatically called by
\&           next_prediction() if not yet done.
\& Example :
\& Returns :
.Ve
.SS "_prediction"
.IX Subsection "_prediction"
.Vb 5
\& Title   : _prediction()
\& Usage   : $gene = $obj\->_prediction()
\& Function: internal
\& Example :
\& Returns :
.Ve
.SS "_add_prediction"
.IX Subsection "_add_prediction"
.Vb 5
\& Title   : _add_prediction()
\& Usage   : $obj\->_add_prediction($gene)
\& Function: internal
\& Example :
\& Returns :
.Ve
.SS "_predictions_parsed"
.IX Subsection "_predictions_parsed"
.Vb 5
\& Title   : _predictions_parsed
\& Usage   : $obj\->_predictions_parsed
\& Function: internal
\& Example :
\& Returns : TRUE or FALSE
.Ve
.SS "_seqname"
.IX Subsection "_seqname"
.Vb 5
\& Title   : _seqname
\& Usage   : $obj\->_seqname($seqname)
\& Function: internal (for Glimmer 2.X)
\& Example :
\& Returns : String
.Ve
.SS "_seqlength"
.IX Subsection "_seqlength"
.Vb 5
\& Title   : _seqlength
\& Usage   : $obj\->_seqlength($seqlength)
\& Function: internal (for Glimmer 2.X)
\& Example :
\& Returns : String
.Ve
.SS "_format"
.IX Subsection "_format"
.Vb 5
\& Title   : _format
\& Usage   : $obj\->_format($format)
\& Function: internal
\& Example :
\& Returns : String
.Ve
.SS "_detail_file"
.IX Subsection "_detail_file"
.Vb 5
\& Title   : _detail_file
\& Usage   : $obj\->_detail_file($filename)
\& Function: internal (for Glimmer 3.X)
\& Example :
\& Returns : String
.Ve
