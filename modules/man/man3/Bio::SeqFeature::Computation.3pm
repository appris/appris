.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Computation 3pm"
.TH Bio::SeqFeature::Computation 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::Computation \- Computation SeqFeature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&   $feat = Bio::SeqFeature::Computation\->new(
\&       \-start => 10,
\&       \-end => 100,
\&       \-strand => \-1,
\&       \-primary => \*(Aqrepeat\*(Aq,
\&       \-program_name => \*(AqGeneMark\*(Aq,
\&       \-program_date => \*(Aq12\-5\-2000\*(Aq,
\&       \-program_version => \*(Aqx.y\*(Aq,
\&       \-database_name => \*(AqArabidopsis\*(Aq,
\&       \-database_date => \*(Aq12\-dec\-2000\*(Aq,
\&       \-computation_id => 2231,
\&       \-score => { no_score => 334 }
\&   );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqFeature::Computation extends the Generic seqfeature object with
a set of computation related fields and a more flexible set of storing
more types of score and subseqfeatures. It is compatible with the Generic
SeqFeature object.
.PP
The new way of storing score values is similar to the tag structure in the 
Generic object. For storing sets of subseqfeatures the array containing the
subseqfeatures is now a hash which contains arrays of seqfeatures
Both the score and subSeqfeature methods can be called in exactly the same
way, the value's will be stored as a 'default' score or subseqfeature.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney, Mark Fiers"
.IX Header "AUTHOR - Ewan Birney, Mark Fiers"
Ewan Birney <birney@sanger.ac.uk>
.PP
Mark Fiers <m.w.e.j.fiers@plant.wag\-ur.nl>
.SH "DEVELOPERS"
.IX Header "DEVELOPERS"
This class has been written with an eye out of inheritance. The fields
the actual object hash are:
.PP
.Vb 2
\&   _gsf_sub_hash  = reference to a hash containing sets of sub arrays
\&   _gsf_score_hash= reference to a hash for the score values
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "has_score"
.IX Subsection "has_score"
.Vb 6
\& Title   : has_score
\& Usage   : $value = $self\->has_score(\*(Aqsome_score\*(Aq)
\& Function: Tests whether a feature contains a score
\& Returns : TRUE if the SeqFeature has the score,
\&           and FALSE otherwise.
\& Args    : The name of a score
.Ve
.SS "add_score_value"
.IX Subsection "add_score_value"
.Vb 4
\& Title   : add_score_value
\& Usage   : $self\->add_score_value(\*(AqP_value\*(Aq,224);
\& Returns : TRUE on success
\& Args    : score (string) and value (any scalar)
.Ve
.SS "score"
.IX Subsection "score"
.Vb 8
\& Title   : score
\& Usage   : $value = $comp_obj\->score()
\&           $comp_obj\->score($value)
\& Function: Returns the \*(Aqdefault\*(Aq score or sets the \*(Aqdefault\*(Aq score
\&           This method exist for compatibility options           
\&           It would equal ($comp_obj\->each_score_value(\*(Aqdefault\*(Aq))[0];
\& Returns : A value
\& Args    : (optional) a new value for the \*(Aqdefault\*(Aq score
.Ve
.SS "each_score_value"
.IX Subsection "each_score_value"
.Vb 6
\& Title   : each_score_value
\& Usage   : @values = $gsf\->each_score_value(\*(Aqnote\*(Aq);
\& Function: Returns a list of all the values stored
\&           under a particular score.
\& Returns : A list of scalars
\& Args    : The name of the score
.Ve
.SS "all_scores"
.IX Subsection "all_scores"
.Vb 5
\& Title   : all_scores
\& Usage   : @scores = $feat\->all_scores()
\& Function: Get a list of all the scores in a feature
\& Returns : An array of score names
\& Args    : none
.Ve
.SS "remove_score"
.IX Subsection "remove_score"
.Vb 5
\& Title   : remove_score
\& Usage   : $feat\->remove_score(\*(Aqsome_score\*(Aq)
\& Function: removes a score from this feature
\& Returns : nothing
\& Args    : score (string)
.Ve
.SS "computation_id"
.IX Subsection "computation_id"
.Vb 6
\& Title   : computation_id
\& Usage   : $computation_id = $feat\->computation_id()
\&           $feat\->computation_id($computation_id)
\& Function: get/set on program name information
\& Returns : string
\& Args    : none if get, the new value if set
.Ve
.SS "program_name"
.IX Subsection "program_name"
.Vb 6
\& Title   : program_name
\& Usage   : $program_name = $feat\->program_name()
\&           $feat\->program_name($program_name)
\& Function: get/set on program name information
\& Returns : string
\& Args    : none if get, the new value if set
.Ve
.SS "program_date"
.IX Subsection "program_date"
.Vb 6
\& Title   : program_date
\& Usage   : $program_date = $feat\->program_date()
\&           $feat\->program_date($program_date)
\& Function: get/set on program date information
\& Returns : date (string)
\& Args    : none if get, the new value if set
.Ve
.SS "program_version"
.IX Subsection "program_version"
.Vb 6
\& Title   : program_version
\& Usage   : $program_version = $feat\->program_version()
\&           $feat\->program_version($program_version)
\& Function: get/set on program version information
\& Returns : date (string)
\& Args    : none if get, the new value if set
.Ve
.SS "database_name"
.IX Subsection "database_name"
.Vb 6
\& Title   : database_name
\& Usage   : $database_name = $feat\->database_name()
\&           $feat\->database_name($database_name)
\& Function: get/set on program name information
\& Returns : string
\& Args    : none if get, the new value if set
.Ve
.SS "database_date"
.IX Subsection "database_date"
.Vb 6
\& Title   : database_date
\& Usage   : $database_date = $feat\->database_date()
\&           $feat\->database_date($database_date)
\& Function: get/set on program date information
\& Returns : date (string)
\& Args    : none if get, the new value if set
.Ve
.SS "database_version"
.IX Subsection "database_version"
.Vb 6
\& Title   : database_version
\& Usage   : $database_version = $feat\->database_version()
\&           $feat\->database_version($database_version)
\& Function: get/set on program version information
\& Returns : date (string)
\& Args    : none if get, the new value if set
.Ve
.SS "get_SeqFeature_type"
.IX Subsection "get_SeqFeature_type"
.Vb 7
\& Title   : get_SeqFeature_type
\& Usage   : $SeqFeature_type = $feat\->get_SeqFeature_type()
\&           $feat\->get_SeqFeature_type($SeqFeature_type)
\& Function: Get SeqFeature type which is automatically set when adding
\&           a computation (SeqFeature) to a computation object
\& Returns : SeqFeature_type (string)
\& Args    : none if get, the new value if set
.Ve
.SS "get_all_SeqFeature_types"
.IX Subsection "get_all_SeqFeature_types"
.Vb 5
\& Title   : get_all_SeqFeature_types
\& Usage   : @all_SeqFeature_types = $comp\->get_all_SeqFeature_types();
\& Function: Returns an array with all subseqfeature types
\& Returns : An array
\& Args    : none
.Ve
.SS "get_SeqFeatures"
.IX Subsection "get_SeqFeatures"
.Vb 7
\& Title   : get_SeqFeatures(\*(Aqfeature_type\*(Aq)
\& Usage   : @feats = $feat\->get_SeqFeatures();
\&           @feats = $feat\->get_SeqFeatures(\*(Aqfeature_type\*(Aq);           
\& Function: Returns an array of sub Sequence Features of a specific
\&           type or, if the type is omitted, all sub Sequence Features
\& Returns : An array
\& Args    : (optional) a SeqFeature type (ie exon, pattern)
.Ve
.SS "add_SeqFeature"
.IX Subsection "add_SeqFeature"
.Vb 10
\& Title   : add_SeqFeature
\& Usage   : $feat\->add_SeqFeature($subfeat);
\&           $feat\->add_SeqFeature($subfeat,\*(Aqseqfeature_type\*(Aq)
\&           $feat\->add_SeqFeature($subfeat,\*(AqEXPAND\*(Aq)
\&           $feat\->add_SeqFeature($subfeat,\*(AqEXPAND\*(Aq,\*(Aqseqfeature_type\*(Aq)
\& Function: adds a SeqFeature into a specific subSeqFeature array.
\&           with no \*(AqEXPAND\*(Aq qualifer, subfeat will be tested
\&           as to whether it lies inside the parent, and throw
\&           an exception if not.
\&           If EXPAND is used, the parents start/end/strand will
\&           be adjusted so that it grows to accommodate the new
\&           subFeature,
\&           optionally a seqfeature type can be defined.
\& Returns : nothing
\& Args    : An object which has the SeqFeatureI interface
\&           (optional) \*(AqEXPAND\*(Aq
\&           (optional) \*(AqSeqFeature_type\*(Aq
.Ve
.SS "remove_SeqFeatures"
.IX Subsection "remove_SeqFeatures"
.Vb 9
\& Title   : remove_SeqFeatures
\& Usage   : $sf\->remove_SeqFeatures
\&           $sf\->remove_SeqFeatures(\*(AqSeqFeature_type\*(Aq);
\& Function: Removes all sub SeqFeature or all sub SeqFeatures of a specified type 
\&           (if you want to remove a more specific subset, take an array of them
\&           all, flush them, and add back only the guys you want)
\& Example :
\& Returns : none
\& Args    : none
.Ve
