.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Est2Genome 3pm"
.TH Bio::Tools::Est2Genome 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Est2Genome \- Parse est2genome output, makes simple Bio::SeqFeature::Generic objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Est2Genome;
\&
\&  my $featureiter = Bio::Tools::Est2Genome\->new(\-file => \*(Aqoutput.est2genome\*(Aq);
\&
\&  # This is going to be fixed to use the SeqAnalysisI next_feature
\&  # Method eventually when we have the objects to put the data in
\&  # properly
\&  while( my $f = $featureiter\->parse_next_gene ) {
\&   # process Bio::SeqFeature::Generic objects here
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a parser for \f(CW\*(C`est2genome\*(C'\fR [\s-1EMBOSS\s0] alignments of est/cdna
sequence to genomic \s-1DNA.\s0  This is generally accepted as the best
program for predicting splice sites based on est/dnas (as far as I know).
.PP
This module currently does not try pull out the ungapped alignments
(Segment) but may in the future.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Est2Genome\->new();
\& Function: Builds a new Bio::Tools::Est2Genome object
\& Returns : an instance of Bio::Tools::Est2Genome
\& Args    : \-file => \*(Aqoutput.est2genome\*(Aq or
\&           \-fh   => \e*EST2GENOMEOUTPUT
\&           \-genomefirst => 1  # genome was the first input (not standard)
.Ve
.SS "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $sim4\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /est2genome/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.SS "parse_next_gene"
.IX Subsection "parse_next_gene"
.Vb 5
\& Title   : parse_next_gene
\& Usage   : @gene = $est2genome_result\->parse_next_gene;
\&           foreach $exon (@exons) {
\&               # do something
\&           }
\&
\& Function: Parses the next alignments of the est2genome result file and
\&           returns the found exons as an array of
\&           Bio::SeqFeature::SimilarityPair objects. Call
\&           this method repeatedly until an empty array is returned to get the
\&           results for all alignments.
\&
\&           The $exon\->seq_id() attribute will be set to the identifier of the
\&           respective sequence for both sequences.
\&           The length is accessible via the seqlength()
\&           attribute of $exon\->query() and
\&           $exon\->est_hit().
\& Returns : An array (or array reference) of Bio::SeqFeature::SimilarityPair and Bio::SeqFeature::Generic objects
\&           or Bio::SeqFeature::Gene::GeneStructure
\& Args    : flag(1/0) indicating to return Bio::SeqFeature::Gene::GeneStructure or Bio::SeqFeature::SimilarityPair
\&           defaults to 0
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : $seqfeature = $obj\->next_feature();
\& Function: Returns the next feature available in the analysis result, or
\&           undef if there are no more features.
\& Example :
\& Returns : A Bio::SeqFeatureI implementing object, or undef if there are no
\&           more features.
\& Args    : none
.Ve
