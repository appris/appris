.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Location::Atomic 3pm"
.TH Bio::Location::Atomic 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Location::Atomic \- Implementation of a Atomic Location on a Sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Location::Atomic;
\&
\&    my $location = Bio::Location::Atomic\->new(\-start => 1, \-end => 100,
\&                                             \-strand => 1 );
\&
\&    if( $location\->strand == \-1 ) {
\&        printf "complement(%d..%d)\en", $location\->start, $location\->end;
\&    } else {
\&        printf "%d..%d\en", $location\->start, $location\->end;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation of Bio::LocationI to manage simple location
information on a Sequence.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "start"
.IX Subsection "start"
.Vb 6
\&  Title   : start
\&  Usage   : $start = $loc\->start();
\&  Function: get/set the start of this range
\&  Returns : the start of this range
\&  Args    : optionally allows the start to be set
\&          : using $loc\->start($start)
.Ve
.SS "end"
.IX Subsection "end"
.Vb 6
\&  Title   : end
\&  Usage   : $end = $loc\->end();
\&  Function: get/set the end of this range
\&  Returns : the end of this range
\&  Args    : optionally allows the end to be set
\&          : using $loc\->end($start)
.Ve
.SS "strand"
.IX Subsection "strand"
.Vb 6
\&  Title   : strand
\&  Usage   : $strand = $loc\->strand();
\&  Function: get/set the strand of this range
\&  Returns : the strandidness (\-1, 0, +1)
\&  Args    : optionally allows the strand to be set
\&          : using $loc\->strand($strand)
.Ve
.SS "flip_strand"
.IX Subsection "flip_strand"
.Vb 5
\&  Title   : flip_strand
\&  Usage   : $location\->flip_strand();
\&  Function: Flip\-flop a strand to the opposite
\&  Returns : None
\&  Args    : None
.Ve
.SS "seq_id"
.IX Subsection "seq_id"
.Vb 5
\&  Title   : seq_id
\&  Usage   : my $seqid = $location\->seq_id();
\&  Function: Get/Set seq_id that location refers to
\&  Returns : seq_id (a string)
\&  Args    : [optional] seq_id value to set
.Ve
.SS "length"
.IX Subsection "length"
.Vb 6
\& Title   : length
\& Usage   : $len = $loc\->length();
\& Function: get the length in the coordinate space this location spans
\& Example :
\& Returns : an integer
\& Args    : none
.Ve
.SS "min_start"
.IX Subsection "min_start"
.Vb 5
\&  Title   : min_start
\&  Usage   : my $minstart = $location\->min_start();
\&  Function: Get minimum starting location of feature startpoint   
\&  Returns : integer or undef if no minimum starting point.
\&  Args    : none
.Ve
.SS "max_start"
.IX Subsection "max_start"
.Vb 3
\&  Title   : max_start
\&  Usage   : my $maxstart = $location\->max_start();
\&  Function: Get maximum starting location of feature startpoint.
\&
\&            In this implementation this is exactly the same as min_start().
\&
\&  Returns : integer or undef if no maximum starting point.
\&  Args    : none
.Ve
.SS "start_pos_type"
.IX Subsection "start_pos_type"
.Vb 3
\&  Title   : start_pos_type
\&  Usage   : my $start_pos_type = $location\->start_pos_type();
\&  Function: Get start position type (ie <,>, ^).
\&
\&            In this implementation this will always be \*(AqEXACT\*(Aq.
\&
\&  Returns : type of position coded as text 
\&            (\*(AqBEFORE\*(Aq, \*(AqAFTER\*(Aq, \*(AqEXACT\*(Aq,\*(AqWITHIN\*(Aq, \*(AqBETWEEN\*(Aq)
\&  Args    : none
.Ve
.SS "min_end"
.IX Subsection "min_end"
.Vb 5
\&  Title   : min_end
\&  Usage   : my $minend = $location\->min_end();
\&  Function: Get minimum ending location of feature endpoint 
\&  Returns : integer or undef if no minimum ending point.
\&  Args    : none
.Ve
.SS "max_end"
.IX Subsection "max_end"
.Vb 3
\&  Title   : max_end
\&  Usage   : my $maxend = $location\->max_end();
\&  Function: Get maximum ending location of feature endpoint 
\&
\&            In this implementation this is exactly the same as min_end().
\&
\&  Returns : integer or undef if no maximum ending point.
\&  Args    : none
.Ve
.SS "end_pos_type"
.IX Subsection "end_pos_type"
.Vb 3
\&  Title   : end_pos_type
\&  Usage   : my $end_pos_type = $location\->end_pos_type();
\&  Function: Get end position type (ie <,>, ^) 
\&
\&            In this implementation this will always be \*(AqEXACT\*(Aq.
\&
\&  Returns : type of position coded as text 
\&            (\*(AqBEFORE\*(Aq, \*(AqAFTER\*(Aq, \*(AqEXACT\*(Aq,\*(AqWITHIN\*(Aq, \*(AqBETWEEN\*(Aq)
\&  Args    : none
.Ve
.SS "location_type"
.IX Subsection "location_type"
.Vb 5
\&  Title   : location_type
\&  Usage   : my $location_type = $location\->location_type();
\&  Function: Get location type encoded as text
\&  Returns : string (\*(AqEXACT\*(Aq, \*(AqWITHIN\*(Aq, \*(AqIN\-BETWEEN\*(Aq)
\&  Args    : none
.Ve
.SS "is_remote"
.IX Subsection "is_remote"
.Vb 3
\& Title   : is_remote
\& Usage   : $is_remote_loc = $loc\->is_remote()
\& Function: Whether or not a location is a remote location.
\&
\&           A location is said to be remote if it is on a different
\&           \*(Aqobject\*(Aq than the object which \*(Aqhas\*(Aq this
\&           location. Typically, features on a sequence will sometimes
\&           have a remote location, which means that the location of
\&           the feature is on a different sequence than the one that is
\&           attached to the feature. In such a case, $loc\->seq_id will
\&           be different from $feat\->seq_id (usually they will be the
\&           same).
\&
\&           While this may sound weird, it reflects the location of the
\&           kind of AL445212.9:83662..166657 which can be found in GenBank/EMBL
\&           feature tables.
\&
\& Example : 
\& Returns : TRUE if the location is a remote location, and FALSE otherwise
\& Args    : Value to set to
.Ve
.SS "each_Location"
.IX Subsection "each_Location"
.Vb 9
\& Title   : each_Location
\& Usage   : @locations = $locObject\->each_Location($order);
\& Function: Conserved function call across Location:: modules \- will
\&           return an array containing the component Location(s) in
\&           that object, regardless if the calling object is itself a
\&           single location or one containing sublocations.
\& Returns : an array of Bio::LocationI implementing objects \- for
\&           Simple locations, the return value is just itself.
\& Args    :
.Ve
.SS "to_FTstring"
.IX Subsection "to_FTstring"
.Vb 5
\&  Title   : to_FTstring
\&  Usage   : my $locstr = $location\->to_FTstring()
\&  Function: returns the FeatureTable string of this location
\&  Returns : string
\&  Args    : none
.Ve
.SS "valid_Location"
.IX Subsection "valid_Location"
.Vb 6
\& Title   : valid_Location
\& Usage   : if ($location\->valid_location) {...};
\& Function: boolean method to determine whether location is considered valid
\&           (has minimum requirements for Simple implementation)
\& Returns : Boolean value: true if location is valid, false otherwise
\& Args    : none
.Ve
.SS "coordinate_policy"
.IX Subsection "coordinate_policy"
.Vb 4
\&  Title   : coordinate_policy
\&  Usage   : $policy = $location\->coordinate_policy();
\&            $location\->coordinate_policy($mypolicy); # set may not be possible
\&  Function: Get the coordinate computing policy employed by this object.
\&
\&            See L<Bio::Location::CoordinatePolicyI> for documentation
\&            about the policy object and its use.
\&
\&            The interface *does not* require implementing classes to
\&            accept setting of a different policy. The implementation
\&            provided here does, however, allow one to do so.
\&
\&            Implementors of this interface are expected to initialize
\&            every new instance with a
\&            L<Bio::Location::CoordinatePolicyI> object. The
\&            implementation provided here will return a default policy
\&            object if none has been set yet. To change this default
\&            policy object call this method as a class method with an
\&            appropriate argument. Note that in this case only
\&            subsequently created Location objects will be affected.
\&
\&  Returns : A L<Bio::Location::CoordinatePolicyI> implementing object.
\&  Args    : On set, a L<Bio::Location::CoordinatePolicyI> implementing object.
.Ve
.PP
See Bio::Location::CoordinatePolicyI for more information
.SS "trunc"
.IX Subsection "trunc"
.Vb 4
\&  Title   : trunc
\&        Usage   : $trunc_location = $location\->trunc($start, $end, $relative_ori);
\&        Function: To truncate a location and keep annotations and features
\&                  within the truncated segment intact.
\&
\&                                                This might do things differently where the truncation
\&                                                splits the location in half.
\&        CAVEAT  : As yet, this is an untested and unannounced method. Use
\&                  with caution!
\&        Returns : A L<Bio::Location::Atomic> object.
\&        Args    : The start and end position for the trunction, and the relative
\&                  orientation.
.Ve
