.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::qual 3pm"
.TH Bio::SeqIO::qual 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::qual \- .qual file input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::SeqIO class
(see Bio::SeqIO for details).
.PP
.Vb 4
\&  my $in_qual = Bio::SeqIO\->new(\-file    => $qualfile,
\&                                \-format  => \*(Aqqual\*(Aq,
\&                                \-width   => $width,
\&                                \-verbose => $verbose);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform .qual (similar to fasta) objects to and from
Bio::Seq::Quality objects. See Bio::Seq::Quality for details.
.PP
Like the fasta module, it can take an argument '\-width' to change the
number of values per line (defaults to 50).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR Chad Matsalla"
.IX Header "AUTHOR Chad Matsalla"
Chad Matsalla
bioinformatics@dieselwurks.com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "\fBnext_seq()\fP"
.IX Subsection "next_seq()"
.Vb 5
\& Title   : next_seq()
\& Usage   : $scf = $stream\->next_seq()
\& Function: returns the next scf sequence in the stream
\& Returns : Bio::Seq::PrimaryQual object
\& Notes   : Get the next quality sequence from the stream.
.Ve
.SS "_next_qual"
.IX Subsection "_next_qual"
.Vb 8
\& Title   : _next_qual
\& Usage   : $seq = $stream\->_next_qual() (but do not do
\&          that. Use $stream\->next_seq() instead)
\& Function: returns the next quality in the stream
\& Returns : Bio::Seq::PrimaryQual object
\& Args    : NONE
\& Notes  : An internal method. Gets the next quality in
\&                the stream.
.Ve
.SS "\fBnext_primary_qual()\fP"
.IX Subsection "next_primary_qual()"
.Vb 5
\& Title   : next_primary_qual()
\& Usage   : $seq = $stream\->next_primary_qual()
\& Function: returns the next sequence in the stream
\& Returns : Bio::PrimaryQual object
\& Args    : NONE
.Ve
.SS "width"
.IX Subsection "width"
.Vb 5
\& Title   : width
\& Usage   : $obj\->width($newval)
\& Function: Get/Set the number of values per line  for FASTA\-like output
\& Returns : value of width
\& Args    : newvalue (optional)
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 10
\& Title   : write_seq
\& Usage   : $obj\->write_seq( \-source => $source,
\&                            \-header  => "some information"
\&                            \-oneline => 0);
\& Function: Write out a list of quality values to a fasta\-style file.
\& Returns : Nothing.
\& Args    : Requires a reference to a Bio::Seq::Quality object or a
\&           PrimaryQual object as the \-source. Option 1: information
\&           for the header. Option 2: whether the quality score should
\&           be on a single line or not
\& Notes   : If no \-header is provided, $obj\->id() will be used where
\&           $obj is a reference to either a Quality object or a
\&           PrimaryQual object. If $source\->id() fails, "unknown" will
\&           be the header. If the Quality object has $source\->length()
\&           of "DIFFERENT" (read the pod, luke), write_seq will use the
\&           length of the PrimaryQual object within the Quality object.
.Ve
