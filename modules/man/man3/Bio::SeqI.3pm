.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqI 3pm"
.TH Bio::SeqI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqI \- [Developers] Abstract Interface of Sequence (with features)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Bio::SeqI is the interface class for sequences.
\&
\&    # If you are a newcomer to bioperl, you should
\&    # start with Bio::Seq documentation. This
\&    # documentation is mainly for developers using
\&    # Bioperl.
\&
\&    # Bio::SeqI implements Bio::PrimarySeqI
\&    $seq      = $seqobj\->seq(); # actual sequence as a string
\&    $seqstr   = $seqobj\->subseq(10,50);
\&
\&    # Bio::SeqI has annotationcollections
\&
\&    $ann      = $seqobj\->annotation(); # annotation object
\&
\&    # Bio::SeqI has sequence features
\&    # features must implement Bio::SeqFeatureI
\&
\&    @features = $seqobj\->get_SeqFeatures();     # just top level
\&    @features = $seqobj\->get_all_SeqFeatures(); # descend into sub features
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqI is the abstract interface of annotated Sequences. These
methods are those which you can be guaranteed to get for any Bio::SeqI.
For most users of the package the documentation (and methods) in this
class are not at useful \- this is a developers only class which
defines what methods have to be implemented by other Perl objects to
comply to the Bio::SeqI interface. Go \*(L"perldoc Bio::Seq\*(R" or \*(L"man
Bio::Seq\*(R" for more information.
.PP
There aren't many method here, because too many complicated functions here
would prevent implementations which are just wrappers around a database or
similar delayed mechanisms.
.PP
Most of the clever stuff happens inside the SeqFeatureI system.
.PP
A good reference implementation is Bio::Seq which is a pure perl
implementation of this class with a lot of extra pieces for extra
manipulation.  However, if you want to be able to use any sequence
object in your analysis, if you can do it just using these methods,
then you know you will be future proof and compatible with other
implementations of Seq.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "get_SeqFeatures"
.IX Subsection "get_SeqFeatures"
.Vb 5
\& Title   : get_SeqFeatures
\& Usage   : my @feats = $seq\->get_SeqFeatures();
\& Function: retrieve just the toplevel sequence features attached to this seq
\& Returns : array of Bio::SeqFeatureI objects
\& Args    : none
.Ve
.PP
This method comes through extension of Bio::FeatureHolderI. See
Bio::FeatureHolderI and Bio::SeqFeatureI for more information.
.SS "get_all_SeqFeatures"
.IX Subsection "get_all_SeqFeatures"
.Vb 5
\& Title   : get_all_SeqFeatures
\& Usage   : my @feats = $seq\->get_all_SeqFeatures();
\& Function: returns all SeqFeatures, including sub SeqFeatures
\& Returns : an array of Bio::SeqFeatureI objects
\& Args    : none
.Ve
.PP
This method comes through extension of Bio::FeatureHolderI. See
Bio::FeatureHolderI and Bio::SeqFeatureI for more information.
.SS "feature_count"
.IX Subsection "feature_count"
.Vb 5
\& Title   : feature_count
\& Usage   : my $count = $seq\->feature_count();
\& Function: Return the number of SeqFeatures attached to a sequence
\& Returns : integer representing the number of SeqFeatures
\& Args    : none
.Ve
.PP
This method comes through extension of Bio::FeatureHolderI. See
Bio::FeatureHolderI for more information.
.SS "seq"
.IX Subsection "seq"
.Vb 5
\& Title   : seq
\& Usage   : my $string = $seq\->seq();
\& Function: Retrieves the sequence string for the sequence object
\& Returns : string
\& Args    : none
.Ve
.SS "write_GFF"
.IX Subsection "write_GFF"
.Vb 6
\& Title   : write_GFF
\& Usage   : $seq\->write_GFF(\e*FILEHANDLE);
\& Function: Convenience method to write out all the sequence features
\&           in GFF format to the provided filehandle (STDOUT by default)
\& Returns : none
\& Args    : [optional] filehandle to write to (default is STDOUT)
.Ve
.SS "annotation"
.IX Subsection "annotation"
.Vb 4
\& Title   : annotation
\& Usage   : my $ann = $seq\->annotation($seq_obj);
\& Function: retrieve the attached annotation object
\& Returns : Bio::AnnotationCollectionI or none;
.Ve
.PP
See Bio::AnnotationCollectionI and Bio::Annotation::Collection
for more information. This method comes through extension from
Bio::AnnotatableI.
.SS "species"
.IX Subsection "species"
.Vb 6
\& Title   : species
\& Usage   :
\& Function: Gets or sets the species
\& Example : my $species = $seq\->species();
\& Returns : Bio::Species object
\& Args    : Bio::Species object or none;
.Ve
.PP
See Bio::Species for more information
.SS "primary_seq"
.IX Subsection "primary_seq"
.Vb 8
\& Title   : primary_seq
\& Usage   : my $primaryseq = $seq\->primary_seq($newval)
\& Function: Retrieve the underlying Bio::PrimarySeqI object if available.
\&           This is in the event one has a sequence with lots of features
\&           but want to be able to narrow the object to just one with
\&           the basics of a sequence (no features or annotations).
\& Returns : Bio::PrimarySeqI
\& Args    : Bio::PrimarySeqI or none;
.Ve
.PP
See Bio::PrimarySeqI for more information
