.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Result::CrossMatchResult 3pm"
.TH Bio::Search::Result::CrossMatchResult 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Result::CrossMatchResult \- CrossMatch\-specific subclass of Bio::Search::Result::GenericResult
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Working with iterations (CrossMatch results)
\&
\&    $result\->next_iteration();
\&    $result\->num_iterations();
\&    $result\->iteration();
\&    $result\->iterations();
.Ve
.PP
# See Bio::Search::Result::GenericResult for information about working with Results.
.PP
# See Bio::Search::Iteration::IterationI
# for details about working with iterations.
.PP
# \s-1TODO:\s0
#     * Show how to configure a SearchIO stream so that it generates
#       CrossMatchResult objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is a subclass of Bio::Search::Result::GenericResult
and provides some operations that facilitate working with CrossMatch
and CrossMatch results.
.PP
For general information about working with Results, see 
Bio::Search::Result::GenericResult.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Shin Leong"
.IX Header "AUTHOR - Shin Leong"
Email sleong@watson.wustl.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $obj = Bio::Search::Result::CrossMatchResult\->new();
\& Function: Builds a new Bio::Search::Result::CrossMatchResult object
\& Returns : Bio::Search::Result::CrossMatchResult
\& Args    : See Bio::Search::Result::GenericResult();
\&           The following parameters are specific to CrossMatchResult:
\&             \-iterations  => array ref of Bio::Search::Iteration::IterationI objects
\&             \-inclusion_threshold => e\-value threshold for inclusion in the
\&                                     CrossMatch score matrix model (blastpgp)
.Ve
.SS "hits"
.IX Subsection "hits"
This method overrides Bio::Search::Result::GenericResult::hits to take 
into account the possibility of multiple iterations, as occurs in CrossMatch reports.
.PP
If there are multiple iterations, all 'new' hits for all iterations are returned.
These are the hits that did not occur in a previous iteration.
.PP
See Also: Bio::Search::Result::GenericResult::hits
.SS "next_hit"
.IX Subsection "next_hit"
This method overrides Bio::Search::Result::GenericResult::next_hit to take 
into account the possibility of multiple iterations, as occurs in CrossMatch reports.
.PP
If there are multiple iterations, calling \fBnext_hit()\fR traverses the
all of the hits, old and new, for each iteration, calling \fBnext_hit()\fR on each iteration.
.PP
See Also: Bio::Search::Iteration::GenericIteration::next_hit
.SS "num_hits"
.IX Subsection "num_hits"
This method overrides Bio::Search::Result::GenericResult::num_hits to take 
into account the possibility of multiple iterations, as occurs in CrossMatch reports.
.PP
If there are multiple iterations, calling \fBnum_hits()\fR returns the number of
\&'new' hits for each iteration. These are the hits that did not occur
in a previous iteration.
.PP
See Also: Bio::Search::Result::GenericResult::num_hits
.SS "add_iteration"
.IX Subsection "add_iteration"
.Vb 5
\& Title   : add_iteration
\& Usage   : $report\->add_iteration($iteration)
\& Function: Adds a IterationI to the stored list of iterations
\& Returns : Number of IterationI currently stored
\& Args    : Bio::Search::Iteration::IterationI
.Ve
.SS "next_iteration"
.IX Subsection "next_iteration"
.Vb 6
\& Title   : next_iteration
\& Usage   : while( $it = $result\->next_iteration()) { ... }
\& Function: Returns the next Iteration object, representing all hits
\&           found within a given CrossMatch iteration.
\& Returns : a Bio::Search::Iteration::IterationI object or undef if there are no more.
\& Args    : none
.Ve
.SS "iteration"
.IX Subsection "iteration"
.Vb 8
\& Usage     : $iteration = $blast\->iteration( $number );
\& Purpose   : Get an IterationI object for the specified iteration
\&             in the search result (CrossMatch).
\& Returns   : Bio::Search::Iteration::IterationI object
\& Throws    : Bio::Root::NoSuchThing exception if $number is not within 
\&             range of the number of iterations in this report.
\& Argument  : integer (optional, if not specified get the last iteration)
\&             First iteration = 1
.Ve
.SS "num_iterations"
.IX Subsection "num_iterations"
.Vb 4
\& Usage     : $num_iterations = $blast\->num_iterations; 
\& Purpose   : Get the number of iterations in the search result (CrossMatch).
\& Returns   : Total number of iterations in the report
\& Argument  : none (read\-only)
.Ve
.SS "number_of_iterations"
.IX Subsection "number_of_iterations"
Same as num_iterations.
.SS "round"
.IX Subsection "round"
Same as iteration.
.SS "iterations"
.IX Subsection "iterations"
.Vb 5
\& Title   : iterations
\& Usage   : my @iterations = $result\->iterations
\& Function: Returns the IterationI objects contained within this Result
\& Returns : Array of L<Bio::Search::Iteration::IterationI> objects
\& Args    : none
.Ve
.SS "no_hits_found"
.IX Subsection "no_hits_found"
.Vb 3
\& Usage     : $nohits = $blast\->no_hits_found( $iteration_number );
\& Purpose   : Get boolean indicator indicating whether or not any hits
\&             were present in the report.
\&
\&             This is NOT the same as determining the number of hits via
\&             the hits() method, which will return zero hits if there were no
\&             hits in the report or if all hits were filtered out during the parse.
\&
\&             Thus, this method can be used to distinguish these possibilities
\&             for hitless reports generated when filtering.
\&
\& Returns   : Boolean
\& Argument  : (optional) integer indicating the iteration number (CrossMatch)
\&             If iteration number is not specified and this is a CrossMatch result,
\&             then this method will return true only if all iterations had
\&             no hits found.
.Ve
.SS "set_no_hits_found"
.IX Subsection "set_no_hits_found"
.Vb 5
\& Usage     : $blast\->set_no_hits_found( $iteration_number ); 
\& Purpose   : Set boolean indicator indicating whether or not any hits
\&             were present in the report.
\& Returns   : n/a
\& Argument  : (optional) integer indicating the iteration number (CrossMatch)
.Ve
.SS "_next_iteration_index"
.IX Subsection "_next_iteration_index"
.Vb 2
\& Title   : _next_iteration_index
\& Usage   : private
.Ve
.SS "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $result\->rewind;
\& Function: Allow one to reset the Iteration iterator to the beginning
\&           Since this is an in\-memory implementation
\& Returns : none
\& Args    : none
.Ve
.SS "inclusion_threshold"
.IX Subsection "inclusion_threshold"
.Vb 7
\& Title   : inclusion_threshold
\& Usage   : my $incl_thresh = $result\->inclusion_threshold; (read\-only)
\& Function: Gets the e\-value threshold for inclusion in the CrossMatch 
\&           score matrix model (blastpgp) that was used for generating the report
\&           being parsed.
\& Returns : number (real) or undef if not a CrossMatch report.
\& Args    : none
.Ve
