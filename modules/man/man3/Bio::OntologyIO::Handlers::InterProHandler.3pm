.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::OntologyIO::Handlers::InterProHandler 3pm"
.TH Bio::OntologyIO::Handlers::InterProHandler 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::OntologyIO::Handlers::InterProHandler \- XML handler class for InterProParser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # do not use directly \- used and instantiated by InterProParser
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles xml events generated by InterProParser when parsing InterPro
\&\s-1XML\s0 files.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Peter Dimitrov"
.IX Header "AUTHOR - Peter Dimitrov"
Email dimitrov@gnf.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Juguang Xiao, juguang@tll.org.sg
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $h = Bio::OntologyIO::Handlers::InterProHandler\->new;
\& Function: Initializes global variables
\& Example :
\& Returns : an InterProHandler object
\& Args    :
.Ve
.SS "ontology_engine"
.IX Subsection "ontology_engine"
.Vb 6
\& Title   : ontology_engine
\& Usage   : $obj\->ontology_engine($newval)
\& Function: Get/set ontology engine. Can be initialized only once.
\& Example :
\& Returns : value of ontology_engine (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "ontology"
.IX Subsection "ontology"
.Vb 3
\& Title   : ontology
\& Usage   :
\& Function: Get the ontology to add the InterPro terms to.
\&
\&           The value is determined automatically once ontology_engine
\&           has been set and if it hasn\*(Aqt been set before.
\&
\& Example :
\& Returns : A L<Bio::Ontology::OntologyI> implementing object.
\& Args    : On set, a L<Bio::Ontology::OntologyI> implementing object.
.Ve
.SS "term_factory"
.IX Subsection "term_factory"
.Vb 7
\& Title   : term_factory
\& Usage   : $obj\->term_factory($newval)
\& Function: Get/set the ontology term object factory
\& Example :
\& Returns : value of term_factory (a Bio::Factory::ObjectFactory instance)
\& Args    : on set, new value (a Bio::Factory::ObjectFactory instance
\&           or undef, optional)
.Ve
.SS "_cite_skip"
.IX Subsection "_cite_skip"
.Vb 6
\& Title   : _cite_skip
\& Usage   : $obj\->_cite_skip($newval)
\& Function:
\& Example :
\& Returns : value of _cite_skip (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "_hash"
.IX Subsection "_hash"
.Vb 6
\& Title   : _hash
\& Usage   : $obj\->_hash($newval)
\& Function:
\& Example :
\& Returns : value of _hash (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "_stack"
.IX Subsection "_stack"
.Vb 6
\& Title   : _stack
\& Usage   : $obj\->_stack($newval)
\& Function:
\& Example :
\& Returns : value of _stack (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "_top"
.IX Subsection "_top"
.Vb 6
\& Title   : _top
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_term"
.IX Subsection "_term"
.Vb 6
\& Title   : _term
\& Usage   : $obj\->_term($newval)
\& Function: Get/set method for the term currently processed.
\& Example :
\& Returns : value of term (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "_clear_term"
.IX Subsection "_clear_term"
.Vb 6
\& Title   : _clear_term
\& Usage   :
\& Function: Removes the current term from the handler
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_names"
.IX Subsection "_names"
.Vb 6
\& Title   : _names
\& Usage   : $obj\->_names($newval)
\& Function:
\& Example :
\& Returns : value of _names (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "_create_relationship"
.IX Subsection "_create_relationship"
.Vb 6
\& Title   : _create_relationship
\& Usage   :
\& Function: Helper function. Adds relationships to one of the relationship stores.
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "start_element"
.IX Subsection "start_element"
.Vb 5
\& Title   : start_element
\& Usage   :
\& Function: This is a method that is derived from XML::SAX::Base and
\&           has to be overridden for processing start of xml element
\&           events. Used internally only.
\&
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_char_storage"
.IX Subsection "_char_storage"
.Vb 6
\& Title   : _char_storage
\& Usage   : $obj\->_char_storage($newval)
\& Function:
\& Example :
\& Returns : value of _char_storage (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "characters"
.IX Subsection "characters"
.Vb 6
\& Title   : characters
\& Usage   :
\& Function: This is a method that is derived from XML::SAX::Base and has to be overridden for processing xml characters events. Used internally only.
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "end_element"
.IX Subsection "end_element"
.Vb 6
\& Title   : end_element
\& Usage   :
\& Function: This is a method that is derived from XML::SAX::Base and has to be overridden for processing end of xml element events. Used internally only.
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "secondary_accessions_map"
.IX Subsection "secondary_accessions_map"
.Vb 8
\& Title   : secondary_accessions_map
\& Usage   : $obj\->secondary_accessions_map($newval)
\& Function:
\& Example : $map = $interpro_handler\->secondary_accessions_map();
\& Returns : Reference to a hash that maps InterPro identifier to an
\&  array reference of secondary accessions following the InterPro
\& xml schema.
\& Args    : Empty hash reference
.Ve
.SS "_increment_record_count"
.IX Subsection "_increment_record_count"
.Vb 6
\& Title   : _increment_record_count
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_increment_processed_count"
.IX Subsection "_increment_processed_count"
.Vb 6
\& Title   : _increment_processed_count
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
