.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Location::CoordinatePolicyI 3pm"
.TH Bio::Location::CoordinatePolicyI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Location::CoordinatePolicyI \- Abstract interface for objects implementing
a certain policy of computing integer\-valued coordinates of a Location
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    # get a location, e.g., from a SeqFeature
\&    $location = $feature\->location();
\&    # examine its coordinate computation policy
\&    print "Location of feature ", $feature\->primary_tag(), " employs a ",
\&          ref($location\->coordinate_policy()), 
\&          " instance for coordinate computation\en";
\&    # change the policy, e.g. because the user chose to do so
\&    $location\->coordinate_policy(Bio::Location::NarrowestCoordPolicy\->new());
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Objects implementing this interface are used by Bio::LocationI
implementing objects to determine integer-valued coordinates when
asked for it. While this may seem trivial for simple locations, there
are different ways to do it for fuzzy or compound (split)
locations. Classes implementing this interface implement a certain
policy, like 'always widest range', 'always smallest range', 'mean for
\&\s-1BETWEEN\s0 locations', etc. By installing a different policy object in a
Location object, the behaviour of coordinate computation can be changed
on-the-fly, and with a single line of code client-side.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp, Jason Stajich"
.IX Header "AUTHOR - Hilmar Lapp, Jason Stajich"
Email hlapp@gmx.net, jason@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "start"
.IX Subsection "start"
.Vb 6
\&  Title   : start
\&  Usage   : $start = $policy\->start($location);
\&  Function: Get the integer\-valued start coordinate of the given location as
\&            computed by this computation policy.
\&  Returns : A positive integer number.
\&  Args    : A Bio::LocationI implementing object.
.Ve
.SS "end"
.IX Subsection "end"
.Vb 6
\&  Title   : end
\&  Usage   : $end = $policy\->end($location);
\&  Function: Get the integer\-valued end coordinate of the given location as
\&            computed by this computation policy.
\&  Returns : A positive integer number.
\&  Args    : A Bio::LocationI implementing object.
.Ve
