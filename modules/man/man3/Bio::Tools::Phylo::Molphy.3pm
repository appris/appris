.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Phylo::Molphy 3pm"
.TH Bio::Tools::Phylo::Molphy 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Phylo::Molphy \- parser for Molphy output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Bio::Tools::Phylo::Molphy;
\&  my $parser = Bio::Tools::Phylo::Molphy\->new(\-file => \*(Aqoutput.protml\*(Aq);
\&  while( my $r = $parser\->next_result ) {
\&    # r is a Bio::Tools::Phylo::Molphy::Result object
\&
\&    # print the model name
\&    print $r\->model, "\en";
\&
\&    # get the substitution matrix
\&    # this is a hash of 3letter aa codes \-> 3letter aa codes representing
\&    # substitution rate
\&    my $smat = $r\->substitution_matrix;
\&    print "Arg \-> Gln substitution rate is %d\en", 
\&          $smat\->{\*(AqArg\*(Aq}\->{\*(AqGln\*(Aq}, "\en";
\&
\&    # get the transition probablity matrix
\&    # this is a hash of 3letter aa codes \-> 3letter aa codes representing
\&    # transition probabilty
\&    my $tmat = $r\->transition_probability_matrix;
\&    print "Arg \-> Gln transition probablity is %.2f\en", 
\&          $tmat\->{\*(AqArg\*(Aq}\->{\*(AqGln\*(Aq}, "\en";
\&
\&    # get the frequency for each of the residues
\&    my $rfreqs = $r\->residue_frequencies;
\&
\&    foreach my $residue ( keys %{$rfreqs} ) {
\&       printf "residue %s  expected freq: %.2f observed freq: %.2f\en",
\&              $residue,$rfreqs\->{$residue}\->[0], $rfreqs\->{$residue}\->[1];     
\&    }
\&
\&    my @trees;
\&    while( my $t = $r\->next_tree ) {
\&        push @trees, $t;
\&    }
\&
\&    print "search space is ", $r\->search_space, "\en",
\&          "1st tree score is ", $trees[0]\->score, "\en";
\&
\&    # writing to STDOUT, use \-file => \*(Aq>filename\*(Aq to specify a file
\&    my $out = Bio::TreeIO\->new(\-format => "newick");
\&    $out\->write_tree($trees[0]); # writing only the 1st tree
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A parser for Molphy output (protml,dnaml)
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Phylo::Molphy\->new();
\& Function: Builds a new Bio::Tools::Phylo::Molphy object 
\& Returns : Bio::Tools::Phylo::Molphy
\& Args    : \-fh/\-file => $val, # for initing input, see Bio::Root::IO
.Ve
.SS "next_result"
.IX Subsection "next_result"
.Vb 5
\& Title   : next_result
\& Usage   : my $r = $molphy\->next_result
\& Function: Get the next result set from parser data
\& Returns : Bio::Tools::Phylo::Molphy::Result object
\& Args    : none
.Ve
