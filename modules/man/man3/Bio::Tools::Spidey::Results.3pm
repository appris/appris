.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Spidey::Results 3pm"
.TH Bio::Tools::Spidey::Results 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Spidey::Results \- Results of a Spidey run
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Bio::Tools::Spidey::Results;
\&        my $spidey = Bio::Tools::Spidey::Results\->new(\-file => \*(Aqresult.spidey\*(Aq );
\&
\&        # or
\&
\&        my $spidey = Bio::Tools::Spidey::Results\->new( \-fh   => \e*INPUT );
\&
\&        # get the exons before doing anything else
\&        my $exonset = $spidey\->next_exonset();
\&
\&        # parse the results
\&        my @exons = $exonset\->sub_SeqFeature();
\&        print "Total no of Exons: ", scalar(@exons), "\en";
\&
\&        print "Genomic sequence length: ", $spidey\->genomic_dna_length(), "\en";
\&
\&        # $exonset is\-a Bio::SeqFeature::Generic with Bio::Tools::Spidey::Exons
\&        # as sub features
\&        print "Delimited on sequence ", $exonset\->seq_id(), " from ", 
\&                $exonset\->start(), " to ", $exonset\->end(), "\en";
\&
\&        foreach my $exon ( $exonset\->sub_SeqFeature() ) {
\&                # $exon is\-a Bio::SeqFeature::FeaturePair
\&                print "Exon from ", $exon\->start, " to ", $exon\->end, 
\&                        " on strand ", $exon\->strand(), "\en";
\&                # you can get out what it matched using the est_hit attribute
\&                my $homol = $exon\->est_hit();
\&                print "Matched to sequence ", $homol\->seq_id, 
\&                        " at ", $homol\->start," to ", $homol\->end, "\en";
\&        }
\&
\&        # essential if you gave a filename at initialization (otherwise 
\&        # the file stays open)
\&        $spidey\->close();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The spidey module provides a parser and results object for spidey 
output. The spidey results are specialised types of SeqFeatures, 
meaning you can add them to AnnSeq objects fine, and manipulate them 
in the \*(L"normal\*(R" seqfeature manner.
.PP
The spidey Exon objects are Bio::SeqFeature::FeaturePair inherited 
objects. The \f(CW$esthit\fR = \f(CW$exon\fR\->\fBest_hit()\fR is the alignment as a 
feature on the matching object (normally, a cDNA), in which the 
start/end points are where the hit lies.
.PP
To make this module work sensibly you need to run
.PP
.Vb 1
\&     spidey \-i genomic.fasta \-m cDNA.fasta
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ryan Golhar"
.IX Header "AUTHOR - Ryan Golhar"
Email golharam@umdnj.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. 
Internal methods are usually preceded with a _
.SS "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $spidey\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /Spidey/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.SS "parse_next_alignment"
.IX Subsection "parse_next_alignment"
.Vb 12
\& Title   : parse_next_alignment
\& Usage   : @exons = $spidey_result\->parse_next_alignment;
\&           foreach $exon (@exons) {
\&               # do something
\&           }
\& Function: Parses the next alignment of the Spidey result file and returns the
\&           found exons as an array of Bio::Tools::Spidey::Exon objects. Call
\&           this method repeatedly until an empty array is returned to get the
\&           results for all alignments.
\& Example :
\& Returns : An array of Bio::Tools::Spidey::Exon objects
\& Args    :
.Ve
.SS "next_exonset"
.IX Subsection "next_exonset"
.Vb 12
\&  Title   : next_exonset
\&  Usage   : $exonset = $spidey_result\->parse_next_exonset;
\&         print "Exons start at ", $exonset\->start(), 
\&        "and end at ", $exonset\->end(), "\en";
\&         for $exon ($exonset\->sub_SeqFeature()) {
\&            # do something
\&         }
\&  Function: Parses the next alignment of the Spidey result file and returns the
\&       set of exons as a container of features. The container is itself
\&       a Bio::SeqFeature::Generic object, with the Bio::Tools::Spidey::Exon
\&       objects as sub features. Start, end, and strand of the container
\&       will represent the total region covered by the exons of this set.
\&
\&      See the documentation of parse_next_alignment() for further
\&      reference about parsing and how the information is stored.
\& Example : 
\& Returns : An Bio::SeqFeature::Generic object holding Bio::Tools::Spidey::Exon
\&          objects as sub features.
\& Args    :
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 7
\&  Title   : next_feature
\&  Usage   : while($exonset = $spidey\->next_feature()) {
\&            # do something
\&           }
\&  Function: Does the same as L<next_exonset()>. See there for documentation of
\&      the functionality. Call this method repeatedly until FALSE is
\&      returned.
\&
\&      The returned object is actually a SeqFeatureI implementing object.
\&      This method is required for classes implementing the
\&      SeqAnalysisParserI interface, and is merely an alias for 
\&      next_exonset() at present.
\&
\&  Example :
\&  Returns : A Bio::SeqFeature::Generic object.
\&  Args    :
.Ve
.SS "genomic_dna_length"
.IX Subsection "genomic_dna_length"
.Vb 6
\&    Title   : genomic_dna_length
\&    Usage   : $spidey\->genomic_dna_length();
\&    Function: Returns the length of the genomic DNA used in this Spidey result
\&    Example :
\&    Returns : An integer value.
\&    Args    :
.Ve
.SS "splicesites"
.IX Subsection "splicesites"
.Vb 6
\&    Title   : splicesites
\&    Usage   : $spidey\->splicesites();
\&    Function: Returns the number of splice sites found in this Spidey result
\&    Example :
\&    Returns : An integer value.
\&    Args    :
.Ve
.SS "est_coverage"
.IX Subsection "est_coverage"
.Vb 6
\&    Title   : est_coverage
\&    Usage   : $spidey\->est_coverage();
\&    Function: Returns the percent of est coverage in this Spidey result
\&    Example :
\&    Returns : An integer value.
\&    Args    :
.Ve
.SS "overall_percentage_id"
.IX Subsection "overall_percentage_id"
.Vb 6
\&    Title   : overall_percentage_id
\&    Usage   : $spidey\->overall_percentage_id();
\&    Function: Returns the overall percent id in this Spidey result
\&    Example :
\&    Returns : An float value.
\&    Args    :
.Ve
.SS "missing_mrna_ends"
.IX Subsection "missing_mrna_ends"
.Vb 6
\&    Title   : missing_mrna_ends
\&    Usage   : $spidey\->missing_mrna_ends();
\&    Function: Returns left/right/neither from Spidey
\&    Example :
\&    Returns : A string value.
\&    Args    :
.Ve
