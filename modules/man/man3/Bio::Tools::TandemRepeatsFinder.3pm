.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::TandemRepeatsFinder 3pm"
.TH Bio::Tools::TandemRepeatsFinder 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::TandemRepeatsFinder \- a parser for Tandem Repeats Finder output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Tools::TandemRepeatsFinder;
\&
\&    # create parser
\&    my $parser = Bio::Tools::Bio::Tools::TandemRepeatsFinder\->new(\-file => \*(Aqtandem_repeats.out\*(Aq);
\&
\&    # loop through results
\&    while( my $feature = $parser\->next_result ) {
\&
\&        # print the source sequence id, start, end, percent matches, and the consensus sequence
\&        my ($percent_matches)    = $feat\->get_tag_values(\*(Aqpercent_matches\*(Aq);
\&        my ($consensus_sequence) = $feat\->get_tag_values(\*(Aqconsensus_sequence\*(Aq);
\&        print $feat\->seq_id()."\et".$feat\->start()."\et".$feat\->end()."\et$percent_matches\et$consensus_sequence\en"; 
\&
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A parser for Tandem Repeats Finder output.  
Written and tested for version 4.00
.PP
Location, seq_id, and score are stored in Bio::SeqFeature::Generic feature.
All other data is stored in tags.  The available tags are
.PP
.Vb 10
\&        period_size
\&        copy_number
\&        consensus_size
\&        percent_matches
\&        percent_indels
\&        percent_a
\&        percent_c
\&        percent_g
\&        percent_t
\&        entropy
\&        consensus_sequence
\&        repeat_sequence
\&        run_parameters
\&        sequence_description
.Ve
.PP
The run_parameters are stored in a hashref with the following key:
.PP
.Vb 7
\&        match_weight
\&        mismatch_weight
\&        indel_weight
\&        match_prob
\&        indel_prob
\&        min_score
\&        max_period_size
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Eric Just"
.IX Header "AUTHOR - Eric Just"
Email e\-just@northwestern.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Tools::TandemRepeatsFinder\->new();
\& Function: Builds a new Bio::Tools::TandemRepeatsFinder object
\& Returns : Bio::Tools::TandemRepeatsFinder
\& Args    : \-fh/\-file => $val, for initing input, see Bio::Root::IO
.Ve
.SS "version"
.IX Subsection "version"
.Vb 5
\& Title   : version
\& Usage   : $self\->version( $version )
\& Function: get/set the version of Tandem Repeats finder that was used in analysis
\& Returns : value of version of 
\& Args    : new value (optional)
.Ve
.SS "_current_seq_id"
.IX Subsection "_current_seq_id"
.Vb 5
\& Title   : _current_seq_id
\& Usage   : $self\->_current_seq_id( $current_seq_id )
\& Function: get/set the _current_seq_id
\& Returns : value of _current_seq_id
\& Args    : new value (optional)
.Ve
.SS "_current_seq_description"
.IX Subsection "_current_seq_description"
.Vb 5
\& Title   : _current_seq_description
\& Usage   : $self\->_current_seq_description( $current_seq_id )
\& Function: get/set the _current_seq_description
\& Returns : value of _current_seq_description
\& Args    : new value (optional)
.Ve
.SS "_current_parameters"
.IX Subsection "_current_parameters"
.Vb 10
\& Title   : _current_parameters
\& Usage   : $self\->_current_parameters( $parameters_hashref )
\& Function: get/set the _current_parameters
\& Returns : hashref representing current parameters parsed from results file
\&         : keys are
\&               match_weight
\&               mismatch_weight
\&               indel_weight
\&               match_prob
\&               indel_prob
\&               min_score
\&               max_period_size
\& Args    : parameters hashref (optional)
.Ve
.SS "next_result"
.IX Subsection "next_result"
.Vb 5
\& Title   : next_result
\& Usage   : my $r = $trf\->next_result()
\& Function: Get the next result set from parser data
\& Returns : Bio::SeqFeature::Generic
\& Args    : none
.Ve
.SS "_create_feature"
.IX Subsection "_create_feature"
.Vb 5
\& Title   : _create_feature
\& Usage   : internal method used by \*(Aqnext_feature\*(Aq
\& Function: Takes a line from the results file and creates a bioperl object
\& Returns : Bio::SeqFeature::Generic
\& Args    : none
.Ve
