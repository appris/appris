.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::FTHelper 3pm"
.TH Bio::SeqIO::FTHelper 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::FTHelper \- Helper class for EMBL/Genbank feature tables
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Used by Bio::SeqIO::EMBL,Bio::SeqIO::genbank, and Bio::SeqIO::swiss to
help process the Feature Table
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents one particular Feature with the following fields
.PP
.Vb 3
\&      key \- the key of the feature
\&      loc \- the location string of the feature
\&      <other fields> \- other fields
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich jason@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "_generic_seqfeature"
.IX Subsection "_generic_seqfeature"
.Vb 8
\& Title   : _generic_seqfeature
\& Usage   : $fthelper\->_generic_seqfeature($annseq, "GenBank")
\& Function: processes fthelper into a generic seqfeature
\& Returns : TRUE on success and otherwise FALSE
\& Args    : The Bio::Factory::LocationFactoryI object to use for parsing
\&           location strings. The ID (e.g., display_id) of the sequence on which
\&           this feature is located, optionally a string indicating the source
\&           (GenBank/EMBL/SwissProt)
.Ve
.SS "from_SeqFeature"
.IX Subsection "from_SeqFeature"
.Vb 10
\& Title   : from_SeqFeature
\& Usage   : @fthelperlist = Bio::SeqIO::FTHelper::from_SeqFeature($sf,
\&                                                     $context_annseq);
\& Function: constructor of fthelpers from SeqFeatures
\&         :
\&         : The additional annseq argument is to allow the building of FTHelper
\&         : lines relevant to particular sequences (ie, when features are spread over
\&         : enteries, knowing how to build this)
\& Returns : an array of FThelpers
\& Args    : seq features
.Ve
.SS "key"
.IX Subsection "key"
.Vb 6
\& Title   : key
\& Usage   : $obj\->key($newval)
\& Function:
\& Example :
\& Returns : value of key
\& Args    : newvalue (optional)
.Ve
.SS "loc"
.IX Subsection "loc"
.Vb 6
\& Title   : loc
\& Usage   : $obj\->loc($newval)
\& Function:
\& Example :
\& Returns : value of loc
\& Args    : newvalue (optional)
.Ve
.SS "field"
.IX Subsection "field"
.Vb 6
\& Title   : field
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "add_field"
.IX Subsection "add_field"
.Vb 6
\& Title   : add_field
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
