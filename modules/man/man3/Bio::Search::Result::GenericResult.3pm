.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Result::GenericResult 3pm"
.TH Bio::Search::Result::GenericResult 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Result::GenericResult \- Generic Implementation of
Bio::Search::Result::ResultI interface applicable to most search
results.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # typically one gets Results from a SearchIO stream
\&    use Bio::SearchIO;
\&    my $io = Bio::SearchIO\->new(\-format => \*(Aqblast\*(Aq,
\&                                \-file   => \*(Aqt/data/HUMBETGLOA.tblastx\*(Aq);
\&    while( my $result = $io\->next_result ) {
\&        # process all search results within the input stream
\&        while( my $hit = $result\->next_hit ) {  
\&            # insert code here for hit processing
\&        }
\&    }
\&
\&    use Bio::Search::Result::GenericResult;
\&    my @hits = (); # would be a list of Bio::Search::Hit::HitI objects
\&    # typically these are created from a Bio::SearchIO stream
\&    my $result = Bio::Search::Result::GenericResult\->new
\&        ( \-query_name        => \*(AqHUMBETGLOA\*(Aq,
\&          \-query_accession   => \*(Aq\*(Aq
\&          \-query_description => \*(AqHuman haplotype C4 beta\-globin gene, complete cds.\*(Aq
\&          \-query_length      => 3002
\&          \-database_name     => \*(Aqecoli.aa\*(Aq
\&          \-database_letters  => 4662239,
\&          \-database_entries  => 400,
\&          \-parameters        => { \*(Aqe\*(Aq => \*(Aq0.001\*(Aq },
\&          \-statistics        => { \*(Aqkappa\*(Aq => 0.731 },
\&          \-algorithm         => \*(Aqblastp\*(Aq,
\&          \-algorithm_version => \*(Aq2.1.2\*(Aq,
\&          );
\&
\&    my $id = $result\->query_name();
\&
\&    my $desc = $result\->query_description();
\&
\&    my $name = $result\->database_name();
\&
\&    my $size = $result\->database_letters();
\&
\&    my $num_entries = $result\->database_entries();
\&
\&    my $gap_ext = $result\->get_parameter(\*(Aqe\*(Aq);
\&
\&    my @params = $result\->available_parameters;
\&
\&    my $kappa = $result\->get_statistic(\*(Aqkappa\*(Aq);
\&
\&    my @statnames = $result\->available_statistics;
.Ve
.PP
# \s-1TODO:\s0 Show how to configure a SearchIO stream so that it generates
#       GenericResult objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is an implementation of the Bio::Search::Result::ResultI
interface and provides a generic place to store results from a
sequence database search.
.PP
Unless you're writing a parser, you won't ever need to create a
GenericResult or any other ResultI-implementing object. If you use
the SearchIO system, ResultI objects are created automatically from
a SearchIO stream which returns Bio::Search::Result::ResultI objects.
.PP
For documentation on what you can do with GenericResult (and other ResultI
objects), please see the \s-1API\s0 documentation in
Bio::Search::Result::ResultI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich and Steve Chervitz"
.IX Header "AUTHOR - Jason Stajich and Steve Chervitz"
Email jason@bioperl.org
Email sac@bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala, bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Search::Result::GenericResult\->new();
\& Function: Builds a new Bio::Search::Result::GenericResult object 
\& Returns : Bio::Search::Result::GenericResult
\& Args    : \-query_name        => Name of query Sequence
\&           \-query_accession   => Query accession number (if available)
\&           \-query_description => Description of query sequence
\&           \-query_length      => Length of query sequence
\&           \-database_name     => Name of database
\&           \-database_letters  => Number of residues in database
\&           \-database_entries  => Number of entries in database
\&           \-hits              => array ref of Bio::Search::Hit::HitI objects
\&           \-parameters        => hash ref of search parameters (key => value)
\&           \-statistics        => hash ref of search statistics (key => value)
\&           \-algorithm         => program name (blastx)
\&           \-algorithm_version   => version of the algorithm (2.1.2)
\&           \-algorithm_reference => literature reference string for this algorithm
\&           \-rid               => value of the BLAST Request ID (eg. RID: ZABJ4EA7014)
\&           \-hit_factory       => Bio::Factory::ObjectFactoryI capable of making
\&                                 Bio::Search::Hit::HitI objects
.Ve
.SS "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $hsp\->algorithm
\& Function: Obtain the name of the algorithm used to obtain the Result
\& Returns : string (e.g., BLASTP)
\& Args    : [optional] scalar string to set value
.Ve
.SS "algorithm_version"
.IX Subsection "algorithm_version"
.Vb 5
\& Title   : algorithm_version
\& Usage   : my $r_version = $hsp\->algorithm_version
\& Function: Obtain the version of the algorithm used to obtain the Result
\& Returns : string (e.g., 2.1.2)
\& Args    : [optional] scalar string to set algorithm version value
.Ve
.SS "Bio::Search::Result::ResultI interface methods"
.IX Subsection "Bio::Search::Result::ResultI interface methods"
Bio::Search::Result::ResultI implementation
.SS "next_hit"
.IX Subsection "next_hit"
.Vb 6
\& Title   : next_hit
\& Usage   : while( $hit = $result\->next_hit()) { ... }
\& Function: Returns the next available Hit object, representing potential
\&           matches between the query and various entities from the database.
\& Returns : a Bio::Search::Hit::HitI object or undef if there are no more.
\& Args    : none
.Ve
.SS "query_name"
.IX Subsection "query_name"
.Vb 6
\& Title   : query_name
\& Usage   : $id = $result\->query_name();
\& Function: Get the string identifier of the query used by the
\&           algorithm that performed the search.
\& Returns : a string.
\& Args    : [optional] new string value for query name
.Ve
.SS "query_accession"
.IX Subsection "query_accession"
.Vb 5
\& Title   : query_accession
\& Usage   : $id = $result\->query_accession();
\& Function: Get the accession (if available) for the query sequence
\& Returns : a string
\& Args    : [optional] new string value for accession
.Ve
.SS "query_gi"
.IX Subsection "query_gi"
.Vb 6
\& Title   : query_gi
\& Usage   : $acc = $hit\->query_gi();
\& Function: Retrieve the NCBI Unique ID (aka the GI #),
\&           if available, for the query
\& Returns : a scalar string (empty string if not set)
\& Args    : none
.Ve
.SS "query_length"
.IX Subsection "query_length"
.Vb 6
\& Title   : query_length
\& Usage   : $id = $result\->query_length();
\& Function: Get the length of the query sequence
\&           used in the search.
\& Returns : a number
\& Args    :  [optional] new integer value for query length
.Ve
.SS "query_description"
.IX Subsection "query_description"
.Vb 6
\& Title   : query_description
\& Usage   : $id = $result\->query_description();
\& Function: Get the description of the query sequence
\&           used in the search.
\& Returns : a string
\& Args    : [optional] new string for the query description
.Ve
.SS "database_name"
.IX Subsection "database_name"
.Vb 6
\& Title   : database_name
\& Usage   : $name = $result\->database_name()
\& Function: Used to obtain the name of the database that the query was searched
\&           against by the algorithm.
\& Returns : a scalar string
\& Args    : [optional] new string for the db name
.Ve
.SS "database_letters"
.IX Subsection "database_letters"
.Vb 7
\& Title   : database_letters
\& Usage   : $size = $result\->database_letters()
\& Function: Used to obtain the size of database that was searched against.
\& Returns : a scalar integer (units specific to algorithm, but probably the
\&           total number of residues in the database, if available) or undef if
\&           the information was not available to the Processor object.
\& Args    : [optional] new scalar integer for number of letters in db
.Ve
.SS "database_entries"
.IX Subsection "database_entries"
.Vb 6
\& Title   : database_entries
\& Usage   : $num_entries = $result\->database_entries()
\& Function: Used to obtain the number of entries contained in the database.
\& Returns : a scalar integer representing the number of entities in the database
\&           or undef if the information was not available.
\& Args    : [optional] new integer for the number of sequence entries in the db
.Ve
.SS "get_parameter"
.IX Subsection "get_parameter"
.Vb 6
\& Title   : get_parameter
\& Usage   : my $gap_ext = $report\->get_parameter(\*(Aqgapext\*(Aq)
\& Function: Returns the value for a specific parameter used
\&           when running this report
\& Returns : string
\& Args    : name of parameter (string)
.Ve
.SS "available_parameters"
.IX Subsection "available_parameters"
.Vb 5
\& Title   : available_parameters
\& Usage   : my @params = $report\->available_paramters
\& Function: Returns the names of the available parameters
\& Returns : Return list of available parameters used for this report
\& Args    : none
.Ve
.SS "get_statistic"
.IX Subsection "get_statistic"
.Vb 6
\& Title   : get_statistic
\& Usage   : my $gap_ext = $report\->get_statistic(\*(Aqkappa\*(Aq)
\& Function: Returns the value for a specific statistic available 
\&           from this report
\& Returns : string
\& Args    : name of statistic (string)
.Ve
.SS "available_statistics"
.IX Subsection "available_statistics"
.Vb 5
\& Title   : available_statistics
\& Usage   : my @statnames = $report\->available_statistics
\& Function: Returns the names of the available statistics
\& Returns : Return list of available statistics used for this report
\& Args    : none
.Ve
.SS "Bio::Search::Report"
.IX Subsection "Bio::Search::Report"
Bio::Search::Result::GenericResult specific methods
.SS "add_hit"
.IX Subsection "add_hit"
.Vb 5
\& Title   : add_hit
\& Usage   : $report\->add_hit($hit)
\& Function: Adds a HitI to the stored list of hits
\& Returns : Number of HitI currently stored
\& Args    : Bio::Search::Hit::HitI
.Ve
.SS "hit_factory"
.IX Subsection "hit_factory"
.Vb 5
\& Title   : hit_factory
\& Usage   : $hit\->hit_factory($hit_factory)
\& Function: Get/set the factory used to build HitI objects if necessary.
\& Returns : Bio::Factory::ObjectFactoryI
\& Args    : Bio::Factory::ObjectFactoryI
.Ve
.SS "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $result\->rewind;
\& Function: Allow one to reset the Hit iterator to the beginning
\&           Since this is an in\-memory implementation
\& Returns : none
\& Args    : none
.Ve
.SS "_nexthitindex"
.IX Subsection "_nexthitindex"
.Vb 2
\& Title   : _nexthitindex
\& Usage   : private
.Ve
.SS "add_parameter"
.IX Subsection "add_parameter"
.Vb 6
\& Title   : add_parameter
\& Usage   : $report\->add_parameter(\*(Aqgapext\*(Aq, 11);
\& Function: Adds a parameter
\& Returns : none
\& Args    : key  \- key value name for this parama
\&           value \- value for this parameter
.Ve
.SS "add_statistic"
.IX Subsection "add_statistic"
.Vb 6
\& Title   : add_statistic
\& Usage   : $report\->add_statistic(\*(Aqlambda\*(Aq, 2.3);
\& Function: Adds a parameter
\& Returns : none
\& Args    : key  \- key value name for this parama
\&           value \- value for this parameter
.Ve
.SS "num_hits"
.IX Subsection "num_hits"
.Vb 5
\& Title   : num_hits
\& Usage   : my $hitcount= $result\->num_hits
\& Function: returns the number of hits for this query result
\& Returns : integer
\& Args    : none
.Ve
.SS "hits"
.IX Subsection "hits"
.Vb 5
\& Title   : hits
\& Usage   : my @hits = $result\->hits
\& Function: Returns the available hits for this Result
\& Returns : Array of L<Bio::Search::Hit::HitI> objects
\& Args    : none
.Ve
.SS "algorithm_reference"
.IX Subsection "algorithm_reference"
.Vb 7
\& Title   : algorithm_reference
\& Usage   : $obj\->algorithm_reference($newval)
\& Function: 
\& Returns : string containing literature reference for the algorithm
\& Args    : newvalue string (optional)
\& Comments: Formerly named program_reference(), which is still supported
\&           for backwards compatibility.
.Ve
.SS "program_reference"
.IX Subsection "program_reference"
.Vb 6
\& Title   : program_reference
\& Usage   : $obj\->program_reference()
\& Function:
\& Returns : string containing literature reference for the algorithm
\& Args    : 
\& Comments: Deprecated \- use algorithm_reference() instead.
.Ve
.SS "rid"
.IX Subsection "rid"
.Vb 10
\& Title   : rid
\& Usage   : $obj\->rid($newval)
\& Function:
\& Returns : value of the BLAST Request ID (eg. RID: ZABJ4EA7014)
\& Args    : newvalue (optional)
\& Comments: The default implementation in ResultI returns an empty string
\&           rather than throwing a NotImplemented exception, since
\&           the RID may not always be available and is not critical.
\&           See: (1) https://www.ncbi.nlm.nih.gov/Class/MLACourse/Modules/BLAST/rid.html
\&                (2) https://www.ncbi.nlm.nih.gov/staff/tao/URLAPI/new/node63.html
.Ve
.SS "no_hits_found"
.IX Subsection "no_hits_found"
See documentation in \fBBio::Search::Result::ResultI::no_hits_found()\fR
.SS "set_no_hits_found"
.IX Subsection "set_no_hits_found"
See documentation in \fBBio::Search::Result::ResultI::set_no_hits_found()\fR
.SS "to_string"
.IX Subsection "to_string"
.Vb 10
\& Title   : to_string
\& Usage   : print $blast\->to_string;
\& Function: Returns a string representation for the Blast result. 
\&           Primarily intended for debugging purposes.
\& Example : see usage
\& Returns : A string of the form:
\&           [GenericResult] <analysis_method> query=<name> <description> db=<database
\&           e.g.:
\&           [GenericResult] BLASTP query=YEL060C vacuolar protease B, db=PDBUNIQ 
\& Args    : None
.Ve
