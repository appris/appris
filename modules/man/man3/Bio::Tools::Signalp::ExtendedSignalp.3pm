.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Signalp::ExtendedSignalp 3pm"
.TH Bio::Tools::Signalp::ExtendedSignalp 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Signalp::ExtendedSignalp \- enhanced parser for Signalp output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& use Bio::Tools::Signalp::ExtendedSignalp;
\& my $params = [qw(maxC maxY maxS meanS D)];
\& my $parser = new Bio::Tools::Signalp::ExtendedSignalp(
\&                                                       \-fh      => $filehandle
\&                                                       \-factors => $params
\&                                                      );
\&
\& $parser\->factors($params);
\& while( my $sp_feat = $parser\->next_feature ) {
\&       #do something
\&       #eg
\&       push @sp_feat, $sp_feat;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
# Please direct questions and support issues to \fIbioperl\-l@bioperl.org\fR
.PP
Parser module for Signalp.
.PP
Based on the EnsEMBL module Bio::EnsEMBL::Pipeline::Runnable::Protein::Signalp
originally written by Marc Sohrmann (ms2 a sanger.ac.uk) Written in BioPipe by
Balamurugan Kumarasamy (savikalpa a fugu\-sg.org) Cared for by the Fugu
Informatics team (fuguteam@fugu\-sg.org)
.PP
You may distribute this module under the same terms as perl itself
.PP
Compared to the original SignalP, this method allow the user to filter results
out based on maxC maxY maxS meanS and D factor cutoff for the Neural Network (\s-1NN\s0)
method only. The \s-1HMM\s0 method does not give any filters with '\s-1YES\s0' or '\s-1NO\s0' as result.
.PP
The user must be aware that the filters can only by applied on \s-1NN\s0 method.
Also, to ensure the compatibility with original Signalp parsing module, the user
must know that by default, if filters are empty, max Y and mean S filters are
automatically used to filter results.
.PP
If the used gives a list, then the parser will only report protein having '\s-1YES\s0'
for each factor.
.PP
This module supports parsing for full, summary and short output form signalp.
Actually, full and summary are equivalent in terms of filtering results.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Based on the Bio::Tools::Signalp module
\& Emmanuel Quevillon <emmanuel.quevillon@versailles.inra.fr>
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
.Vb 2
\& The rest of the documentation details each of the object methods.
\& Internal methods are usually preceded with a _
.Ve
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Signalp::ExtendedSignalp();
\& Function: Builds a new Bio::Tools::Signalp::ExtendedSignalp object
\& Returns : Bio::Tools::Signalp::ExtendedSignalp
\& Args    : \-fh/\-file => $val, # for initing input, see Bio::Root::IO
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 5
\& Title   : next_feature
\& Usage   : my $feat = $signalp\->next_feature
\& Function: Get the next result feature from parser data
\& Returns : Bio::SeqFeature::Generic
\& Args    : none
.Ve
.SS "_filterok"
.IX Subsection "_filterok"
.Vb 5
\& Title   : _filterok
\& Usage   : my $feat = $signalp\->_filterok
\& Function: Check if the factors required by the user are all ok.
\& Returns : 1/0
\& Args    : hash reference
.Ve
.SS "factors"
.IX Subsection "factors"
.Vb 5
\& Title   : factors
\& Usage   : my $feat = $signalp\->factors
\& Function: Get/Set the filters required from the user
\& Returns : hash
\& Args    : array reference
.Ve
.SS "_parsed"
.IX Subsection "_parsed"
.Vb 5
\& Title   : _parsed
\& Usage   : obj\->_parsed()
\& Function: Get/Set if the result is parsed or not
\& Returns : 1/0 scalar
\& Args    : On set 1
.Ve
.SS "_parse"
.IX Subsection "_parse"
.Vb 5
\& Title   : _parse
\& Usage   : obj\->_parse
\& Function: Parse the SignalP result
\& Returns :
\& Args    :
.Ve
.SS "_parse_summary_format"
.IX Subsection "_parse_summary_format"
.Vb 6
\& Title   : _parse_summary_format
\& Usage   : $self\->_parse_summary_format
\& Function: Method to parse summary/full format from signalp output
\&           It automatically fills filtered features.
\& Returns :
\& Args    :
.Ve
.SS "_parse_nn_result"
.IX Subsection "_parse_nn_result"
.Vb 5
\& Title   : _parse_nn_result
\& Usage   : obj\->_parse_nn_result
\& Function: Parses the Neuronal Network (NN) part of the result
\& Returns : Hash reference
\& Args    :
.Ve
.SS "_parse_hmm_result"
.IX Subsection "_parse_hmm_result"
.Vb 5
\& Title   : _parse_hmm_result
\& Usage   : obj\->_parse_hmm_result
\& Function: Parses the Hiden Markov Model (HMM) part of the result
\& Returns : Hash reference
\& Args    :
.Ve
.SS "_parse_short_format"
.IX Subsection "_parse_short_format"
.Vb 6
\& Title   : _parse_short_format
\& Usage   : $self\->_parse_short_format
\& Function: Method to parse short format from signalp output
\&           It automatically fills filtered features.
\& Returns :
\& Args    :
.Ve
.SS "create_feature"
.IX Subsection "create_feature"
.Vb 5
\& Title   : create_feature
\& Usage   : obj\->create_feature(\e%feature)
\& Function: Internal(not to be used directly)
\& Returns :
\& Args    :
.Ve
.SS "seqname"
.IX Subsection "seqname"
.Vb 5
\& Title   : seqname
\& Usage   : obj\->seqname($name)
\& Function: Internal(not to be used directly)
\& Returns :
\& Args    :
.Ve
