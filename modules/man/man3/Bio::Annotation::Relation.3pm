.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::Relation 3pm"
.TH Bio::Annotation::Relation 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Annotation::Relation \- Relationship (pairwise) with other objects SeqI and NodeI;
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Bio::Annotation::Relation;
\&   use Bio::Annotation::Collection;
\&
\&   my $col = Bio::Annotation::Collection\->new();
\&   my $sv = Bio::Annotation::Relation\->new(\-type => "paralogy" \-to => "someSeqI");
\&   $col\->add_Annotation(\*(Aqtagname\*(Aq, $sv);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Scalar value annotation object
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR  \- Mira Han"
.IX Header "AUTHOR - Mira Han"
Email mirhan@indiana.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $sv = Bio::Annotation::Relation\->new();
\& Function: Instantiate a new Relation object
\& Returns : Bio::Annotation::Relation object
\& Args    : \-type    => $type of relation [optional]
\&           \-to     => $obj which $self is in relation to [optional]
\&           \-tagname  => $tag to initialize the tagname [optional]
\&           \-tag_term => ontology term representation of the tag [optional]
.Ve
.SH "AnnotationI implementing functions"
.IX Header "AnnotationI implementing functions"
.SS "as_text"
.IX Subsection "as_text"
.Vb 5
\& Title   : as_text
\& Usage   : my $text = $obj\->as_text
\& Function: return the string "Value: $v" where $v is the value
\& Returns : string
\& Args    : none
.Ve
.SS "display_text"
.IX Subsection "display_text"
.Vb 4
\& Title   : display_text
\& Usage   : my $str = $ann\->display_text();
\& Function: returns a string. Unlike as_text(), this method returns a string
\&           formatted as would be expected for te specific implementation.
\&
\&           One can pass a callback as an argument which allows custom text
\&           generation; the callback is passed the current instance and any text
\&           returned
\& Example :
\& Returns : a string
\& Args    : [optional] callback
.Ve
.SS "hash_tree"
.IX Subsection "hash_tree"
.Vb 6
\& Title   : hash_tree
\& Usage   : my $hashtree = $value\->hash_tree
\& Function: For supporting the AnnotationI interface just returns the value
\&           as a hashref with the key \*(Aqvalue\*(Aq pointing to the value
\& Returns : hashrf
\& Args    : none
.Ve
.SS "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj\->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
\&
\&           Setting this is optional. If set, it obviates the need to
\&           provide a tag to AnnotationCollection when adding this
\&           object.
\&
\& Example :
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SH "Specific accessors for Relation"
.IX Header "Specific accessors for Relation"
.SS "type"
.IX Subsection "type"
.Vb 5
\& Title   : type 
\& Usage   : $obj\->type($newval)
\& Function: Get/Set the type
\& Returns : type of relation
\& Args    : newtype (optional)
.Ve
.SS "to"
.IX Subsection "to"
.Vb 5
\& Title   : to
\& Usage   : $obj\->to($newval)
\& Function: Get/Set the object which $self is in relation to
\& Returns : the object which the relation applies to
\& Args    : new target object (optional)
.Ve
.SS "confidence"
.IX Subsection "confidence"
.Vb 6
\& Title   : confidence
\& Usage   : $self\->confidence($newval)
\& Function: Gives the confidence value.
\& Example :
\& Returns : value of confidence
\& Args    : newvalue (optional)
.Ve
.SS "confidence_type"
.IX Subsection "confidence_type"
.Vb 6
\& Title   : confidence_type
\& Usage   : $self\->confidence_type($newtype)
\& Function: Gives the confidence type.
\& Example :
\& Returns : type of confidence
\& Args    : newtype (optional)
.Ve
.SS "tag_term"
.IX Subsection "tag_term"
.Vb 4
\& Title   : tag_term
\& Usage   : $obj\->tag_term($newval)
\& Function: Get/set the L<Bio::Ontology::TermI> object representing
\&           the tag name.
\&
\&           This is so you can specifically relate the tag of this
\&           annotation to an entry in an ontology. You may want to do
\&           this to associate an identifier with the tag, or a
\&           particular category, such that you can better match the tag
\&           against a controlled vocabulary.
\&
\&           This accessor will return undef if it has never been set
\&           before in order to allow this annotation to stay
\&           light\-weight if an ontology term representation of the tag
\&           is not needed. Once it is set to a valid value, tagname()
\&           will actually delegate to the name() of this term.
\&
\& Example :
\& Returns : a L<Bio::Ontology::TermI> compliant object, or undef
\& Args    : on set, new value (a L<Bio::Ontology::TermI> compliant
\&           object or undef, optional)
.Ve
