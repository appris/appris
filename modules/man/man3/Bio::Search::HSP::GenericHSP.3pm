.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::HSP::GenericHSP 3pm"
.TH Bio::Search::HSP::GenericHSP 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::HSP::GenericHSP \- A "Generic" implementation of a High Scoring Pair
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $hsp = Bio::Search::HSP::GenericHSP\->new( \-algorithm => \*(Aqblastp\*(Aq,
\&                                                \-evalue    => \*(Aq1e\-30\*(Aq,
\&                                                );
\&
\&    $r_type = $hsp\->algorithm;
\&
\&    $pvalue = $hsp\->p();
\&
\&    $evalue = $hsp\->evalue();
\&
\&    $frac_id = $hsp\->frac_identical( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\&
\&    $frac_cons = $hsp\->frac_conserved( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\&
\&    $gaps = $hsp\->gaps( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\&
\&    $qseq = $hsp\->query_string;
\&
\&    $hseq = $hsp\->hit_string;
\&
\&    $homo_string = $hsp\->homology_string;
\&
\&    $len = $hsp\->length( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\&
\&    $len = $hsp\->length( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\&
\&    $rank = $hsp\->rank;
.Ve
.PP
# \s-1TODO:\s0 Describe how to configure a SearchIO stream so that it generates
#       GenericHSP objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This implementation is \*(L"Generic\*(R", meaning it is is suitable for
holding information about High Scoring pairs from most Search reports
such as \s-1BLAST\s0 and FastA.  Specialized objects can be derived from
this.
.PP
Unless you're writing a parser, you won't ever need to create a
GenericHSP or any other HSPI-implementing object. If you use
the SearchIO system, \s-1HSPI\s0 objects are created automatically from
a SearchIO stream which returns Bio::Search::Result::ResultI objects
and you get the \s-1HSPI\s0 objects via the ResultI \s-1API.\s0
.PP
For documentation on what you can do with GenericHSP (and other \s-1HSPI\s0
objects), please see the \s-1API\s0 documentation in
Bio::Search::HSP::HSPI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich and Steve Chervitz"
.IX Header "AUTHOR - Jason Stajich and Steve Chervitz"
Email jason\-at\-bioperl.org
Email sac\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala, bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Search::HSP::GenericHSP\->new();
\& Function: Builds a new Bio::Search::HSP::GenericHSP object
\& Returns : Bio::Search::HSP::GenericHSP
\& Args    : \-algorithm => algorithm used (BLASTP, TBLASTX, FASTX, etc)
\&           \-evalue    => evalue
\&           \-pvalue    => pvalue
\&           \-bits      => bit value for HSP
\&           \-score     => score value for HSP (typically z\-score but depends on
\&                                              analysis)
\&           \-hsp_length=> Length of the HSP (including gaps)
\&           \-identical => # of residues that that matched identically
\&           \-percent_identity => (optional) percent identity
\&           \-conserved => # of residues that matched conservatively
\&                           (only protein comparisons;
\&                            conserved == identical in nucleotide comparisons)
\&           \-hsp_gaps   => # of gaps in the HSP
\&           \-query_gaps => # of gaps in the query in the alignment
\&           \-hit_gaps   => # of gaps in the subject in the alignment
\&           \-query_name  => HSP Query sequence name (if available)
\&           \-query_start => HSP Query start (in original query sequence coords)
\&           \-query_end   => HSP Query end (in original query sequence coords)
\&           \-query_length=> total length of the query sequence
\&           \-query_seq   => query sequence portion of the HSP
\&           \-query_desc  => textual description of the query
\&           \-hit_name    => HSP Hit sequence name (if available)
\&           \-hit_start   => HSP Hit start (in original hit sequence coords)
\&           \-hit_end     => HSP Hit end (in original hit sequence coords)
\&           \-hit_length  => total length of the hit sequence
\&           \-hit_seq     => hit sequence portion of the HSP
\&           \-hit_desc    => textual description of the hit
\&           \-homology_seq=> homology sequence for the HSP
\&           \-hit_frame   => hit frame (only if hit is translated protein)
\&           \-query_frame => query frame (only if query is translated protein)
\&           \-rank        => HSP rank
\&           \-links       => HSP links information (WU\-BLAST only)
\&           \-hsp_group   => HSP Group informat (WU\-BLAST only)
\&           \-gap_symbol  => symbol representing a gap (default = \*(Aq\-\*(Aq)
\&           \-hit_features=> string of features found in or near HSP hit
\&                           region (reported in some BLAST text output,
\&                           v. 2.2.13 and up)
\&           \-stranded    => If the algorithm isn\*(Aqt known (i.e. defaults to
\&                           \*(Aqgeneric\*(Aq), setting this will indicate start/end
\&                           coordinates are to be used to determine the strand
\&                           for \*(Aqquery\*(Aq, \*(Aqsubject\*(Aq, \*(Aqhit\*(Aq, \*(Aqboth\*(Aq, or \*(Aqnone\*(Aq
\&                           (default = \*(Aqnone\*(Aq)
.Ve
.SS "Bio::Search::HSP::HSPI methods"
.IX Subsection "Bio::Search::HSP::HSPI methods"
Implementation of Bio::Search::HSP::HSPI methods follow
.SS "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $hsp\->algorithm
\& Function: Obtain the name of the algorithm used to obtain the HSP
\& Returns : string (e.g., BLASTP)
\& Args    : [optional] scalar string to set value
.Ve
.SS "pvalue"
.IX Subsection "pvalue"
.Vb 6
\& Title   : pvalue
\& Usage   : my $pvalue = $hsp\->pvalue();
\& Function: Returns the P\-value for this HSP or undef
\& Returns : float or exponential (2e\-10)
\&           P\-value is not defined with NCBI Blast2 reports.
\& Args    : [optional] numeric to set value
.Ve
.SS "evalue"
.IX Subsection "evalue"
.Vb 5
\& Title   : evalue
\& Usage   : my $evalue = $hsp\->evalue();
\& Function: Returns the e\-value for this HSP
\& Returns : float or exponential (2e\-10)
\& Args    : [optional] numeric to set value
.Ve
.SS "frac_identical"
.IX Subsection "frac_identical"
.Vb 12
\& Title   : frac_identical
\& Usage   : my $frac_id = $hsp\->frac_identical( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function: Returns the fraction of identitical positions for this HSP
\& Returns : Float in range 0.0 \-> 1.0
\& Args    : arg 1:  \*(Aqquery\*(Aq = num identical / length of query seq (without gaps)
\&                   \*(Aqhit\*(Aq   = num identical / length of hit seq (without gaps)
\&                             synonyms: \*(Aqsbjct\*(Aq, \*(Aqsubject\*(Aq
\&                   \*(Aqtotal\*(Aq = num identical / length of alignment (with gaps)
\&                             synonyms: \*(Aqhsp\*(Aq
\&                   default = \*(Aqtotal\*(Aq
\&           arg 2: [optional] frac identical value to set for the type requested
\& Note    : for translated sequences, this adjusts the length accordingly
.Ve
.SS "frac_conserved"
.IX Subsection "frac_conserved"
.Vb 10
\& Title    : frac_conserved
\& Usage    : my $frac_cons = $hsp\->frac_conserved( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function : Returns the fraction of conserved positions for this HSP.
\&            This is the fraction of symbols in the alignment with a
\&            positive score.
\& Returns : Float in range 0.0 \-> 1.0
\& Args    : arg 1: \*(Aqquery\*(Aq = num conserved / length of query seq (without gaps)
\&                  \*(Aqhit\*(Aq   = num conserved / length of hit seq (without gaps)
\&                             synonyms: \*(Aqsbjct\*(Aq, \*(Aqsubject\*(Aq
\&                  \*(Aqtotal\*(Aq = num conserved / length of alignment (with gaps)
\&                             synonyms: \*(Aqhsp\*(Aq
\&                  default = \*(Aqtotal\*(Aq
\&           arg 2: [optional] frac conserved value to set for the type requested
.Ve
.SS "gaps"
.IX Subsection "gaps"
.Vb 9
\& Title    : gaps
\& Usage    : my $gaps = $hsp\->gaps( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function : Get the number of gap characters in the query, hit, or total alignment.
\& Returns  : Integer, number of gaps or 0 if none
\& Args     : arg 1: \*(Aqquery\*(Aq = num gap characters in query seq
\&                   \*(Aqhit\*(Aq   = num gap characters in hit seq; synonyms: \*(Aqsbjct\*(Aq, \*(Aqsubject\*(Aq
\&                   \*(Aqtotal\*(Aq = num gap characters in whole alignment;  synonyms: \*(Aqhsp\*(Aq
\&                   default = \*(Aqtotal\*(Aq
\&            arg 2: [optional] integer gap value to set for the type requested
.Ve
.SS "query_string"
.IX Subsection "query_string"
.Vb 5
\& Title   : query_string
\& Usage   : my $qseq = $hsp\->query_string;
\& Function: Retrieves the query sequence of this HSP as a string
\& Returns : string
\& Args    : [optional] string to set for query sequence
.Ve
.SS "hit_string"
.IX Subsection "hit_string"
.Vb 5
\& Title   : hit_string
\& Usage   : my $hseq = $hsp\->hit_string;
\& Function: Retrieves the hit sequence of this HSP as a string
\& Returns : string
\& Args    : [optional] string to set for hit sequence
.Ve
.SS "homology_string"
.IX Subsection "homology_string"
.Vb 8
\& Title   : homology_string
\& Usage   : my $homo_string = $hsp\->homology_string;
\& Function: Retrieves the homology sequence for this HSP as a string.
\&         : The homology sequence is the string of symbols in between the
\&         : query and hit sequences in the alignment indicating the degree
\&         : of conservation (e.g., identical, similar, not similar).
\& Returns : string
\& Args    : [optional] string to set for homology sequence
.Ve
.SS "consensus_string"
.IX Subsection "consensus_string"
.Vb 9
\& Title   : consensus_string
\& Usage   : my $cs_string = $hsp\->consensus_string;
\& Function: Retrieves the consensus structure line for this HSP as a string (HMMER).
\&         : If the model had any consensus structure or reference line annotation
\&         : that it inherited from a multiple alignment (#=GC SS cons,
\&         : #=GC RF annotation in Stockholm files), that information is shown
\&         : as CS or RF annotation line.
\& Returns : string
\& Args    : [optional] string to set for consensus structure
.Ve
.SS "posterior_string"
.IX Subsection "posterior_string"
.Vb 9
\& Title   : posterior_string
\& Usage   : my $pp_string = $hsp\->posterior_string;
\& Function: Retrieves the posterior probability line for this HSP as a string (HMMer3).
\&         : The posterior probability is the string of symbols at the bottom
\&         : of the alignment indicating the expected accuracy of each aligned residue.
\&         : A 0 means 0\-5%, 1 means 5\-15%, and so on; 9 means 85\-95%,
\&         : and a * means 95\-100% posterior probability.
\& Returns : string
\& Args    : [optional] string to set for posterior probability
.Ve
.SS "length"
.IX Subsection "length"
.Vb 12
\& Title    : length
\& Usage    : my $len = $hsp\->length( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function : Returns the length of the query or hit in the alignment
\&            (without gaps)
\&            or the aggregate length of the HSP (including gaps;
\&            this may be greater than either hit or query )
\& Returns  : integer
\& Args     : arg 1: \*(Aqquery\*(Aq = length of query seq (without gaps)
\&                   \*(Aqhit\*(Aq   = length of hit seq (without gaps) (synonyms: sbjct, subject)
\&                   \*(Aqtotal\*(Aq = length of alignment (with gaps)
\&                   default = \*(Aqtotal\*(Aq
\&            arg 2: [optional] integer length value to set for specific type
.Ve
.SS "hsp_length"
.IX Subsection "hsp_length"
.Vb 5
\& Title   : hsp_length
\& Usage   : my $len = $hsp\->hsp_length()
\& Function: shortcut  length(\*(Aqhsp\*(Aq)
\& Returns : floating point between 0 and 100
\& Args    : none
.Ve
.SS "percent_identity"
.IX Subsection "percent_identity"
.Vb 5
\& Title   : percent_identity
\& Usage   : my $percentid = $hsp\->percent_identity()
\& Function: Returns the calculated percent identity for an HSP
\& Returns : floating point between 0 and 100
\& Args    : none
.Ve
.SS "frame"
.IX Subsection "frame"
.Vb 10
\& Title   : frame
\& Usage   : my ($qframe, $hframe) = $hsp\->frame(\*(Aqlist\*(Aq,$queryframe,$subjectframe)
\& Function: Set the Frame for both query and subject and insure that
\&           they agree.
\&           This overrides the frame() method implementation in
\&           FeaturePair.
\& Returns : array of query and subject frame if return type wants an array
\&           or query frame if defined or subject frame if not defined
\& Args    : \*(Aqhit\*(Aq or \*(Aqsubject\*(Aq or \*(Aqsbjct\*(Aq to retrieve the frame of the subject (default)
\&           \*(Aqquery\*(Aq to retrieve the query frame 
\&           \*(Aqlist\*(Aq or \*(Aqarray\*(Aq to retrieve both query and hit frames together
\& Note    : Frames are stored in the GFF way (0\-2) not 1\-3
\&           as they are in BLAST (negative frames are deduced by checking
\&                                 the strand of the query or hit)
.Ve
.SS "get_aln"
.IX Subsection "get_aln"
.Vb 5
\& Title   : get_aln
\& Usage   : my $aln = $hsp\->gel_aln
\& Function: Returns a L<Bio::SimpleAlign> object representing the HSP alignment
\& Returns : L<Bio::SimpleAlign>
\& Args    : none
.Ve
.SS "num_conserved"
.IX Subsection "num_conserved"
.Vb 5
\& Title   : num_conserved
\& Usage   : $obj\->num_conserved($newval)
\& Function: returns the number of conserved residues in the alignment
\& Returns : integer
\& Args    : integer (optional)
.Ve
.SS "num_identical"
.IX Subsection "num_identical"
.Vb 5
\& Title   : num_identical
\& Usage   : $obj\->num_identical($newval)
\& Function: returns the number of identical residues in the alignment
\& Returns : integer
\& Args    : integer (optional)
.Ve
.SS "rank"
.IX Subsection "rank"
.Vb 5
\& Usage     : $hsp\->rank( [string] );
\& Purpose   : Get the rank of the HSP within a given Blast hit.
\& Example   : $rank = $hsp\->rank;
\& Returns   : Integer (1..n) corresponding to the order in which the HSP
\&             appears in the BLAST report.
.Ve
.SS "seq_inds"
.IX Subsection "seq_inds"
.Vb 10
\& Title   : seq_inds
\& Purpose   : Get a list of residue positions (indices) for all identical
\&           : or conserved residues in the query or sbjct sequence.
\& Example   : @s_ind = $hsp\->seq_inds(\*(Aqquery\*(Aq, \*(Aqidentical\*(Aq);
\&           : @h_ind = $hsp\->seq_inds(\*(Aqhit\*(Aq, \*(Aqconserved\*(Aq);
\&           : @h_ind = $hsp\->seq_inds(\*(Aqhit\*(Aq, \*(Aqconserved\-not\-identical\*(Aq);
\&           : @h_ind = $hsp\->seq_inds(\*(Aqhit\*(Aq, \*(Aqconserved\*(Aq, 1);
\& Returns   : List of integers
\&           : May include ranges if collapse is true.
\& Argument  : seq_type  = \*(Aqquery\*(Aq or \*(Aqhit\*(Aq or \*(Aqsbjct\*(Aq  (default = query)
\&           :  (\*(Aqsbjct\*(Aq is synonymous with \*(Aqhit\*(Aq)
\&           : class     = \*(Aqidentical\*(Aq \- identical positions
\&           :             \*(Aqconserved\*(Aq \- conserved positions
\&           :             \*(Aqnomatch\*(Aq   \- mismatched residue or gap positions
\&           :             \*(Aqmismatch\*(Aq  \- mismatched residue positions (no gaps)
\&           :             \*(Aqgap\*(Aq       \- gap positions only
\&           :             \*(Aqframeshift\*(Aq\- frameshift positions only
\&           :             \*(Aqconserved\-not\-identical\*(Aq \- conserved positions w/o 
\&           :                            identical residues
\&           :             The name can be shortened to \*(Aqid\*(Aq or \*(Aqcons\*(Aq unless
\&           :             the name is .  The default value is
\&           :             \*(Aqidentical\*(Aq
\&           :
\&           : collapse  = boolean, if true, consecutive positions are merged
\&           :             using a range notation, e.g., "1 2 3 4 5 7 9 10 11"
\&           :             collapses to "1\-5 7 9\-11". This is useful for
\&           :             consolidating long lists. Default = no collapse.
\&           :
\& Throws    : n/a.
\& Comments  : For HSPs partially or completely derived from translated sequences
\&           : (TBLASTN, BLASTX, TBLASTX, or similar), some positional data
\&           : cannot easily be attributed to a single position (i.e. the 
\&           : positional data is ambiguous).  In these cases all three codon 
\&           : positions are reported.  Under these conditions you can check 
\&           : ambiguous_seq_inds() to determine whether the query, subject, 
\&           : or both are ambiguous.
\&           :
\&See Also   : L<Bio::Search::SearchUtils::collapse_nums()|Bio::Search::SearchUtils>,
\&             L<Bio::Search::Hit::HitI::seq_inds()|Bio::Search::Hit::HitI>
.Ve
.SS "ambiguous_seq_inds"
.IX Subsection "ambiguous_seq_inds"
.Vb 10
\& Title     : ambiguous_seq_inds
\& Purpose   : returns a string denoting whether sequence indices for query, 
\&           : subject, or both are ambiguous
\& Returns   : String; \*(Aqquery\*(Aq, \*(Aqsubject\*(Aq, \*(Aqquery/subject\*(Aq, or empty string \*(Aq\*(Aq
\& Argument  : none
\& Comments  : For HSPs partially or completely derived from translated sequences
\&           : (TBLASTN, BLASTX, TBLASTX, or similar), some positional data
\&           : cannot easily be attributed to a single position (i.e. the 
\&           : positional data is ambiguous).  In these cases all three codon 
\&           : positions are reported when using seq_inds().  Under these
\&           : conditions you can check ambiguous_seq_inds() to determine whether
\&           : the query, subject, or both are ambiguous.
\&See Also   : L<Bio::Search::Hit::HSPI::seq_inds()>
.Ve
.SS "Inherited from Bio::SeqFeature::SimilarityPair"
.IX Subsection "Inherited from Bio::SeqFeature::SimilarityPair"
These methods come from Bio::SeqFeature::SimilarityPair
.SS "query"
.IX Subsection "query"
.Vb 5
\& Title   : query
\& Usage   : my $query = $hsp\->query
\& Function: Returns a SeqFeature representing the query in the HSP
\& Returns : L<Bio::SeqFeature::Similarity>
\& Args    : [optional] new value to set
.Ve
.SS "hit"
.IX Subsection "hit"
.Vb 5
\& Title   : hit
\& Usage   : my $hit = $hsp\->hit
\& Function: Returns a SeqFeature representing the hit in the HSP
\& Returns : L<Bio::SeqFeature::Similarity>
\& Args    : [optional] new value to set
.Ve
.SS "significance"
.IX Subsection "significance"
.Vb 6
\& Title   : significance
\& Usage   : $evalue = $obj\->significance();
\&           $obj\->significance($evalue);
\& Function: Get/Set the significance value
\& Returns : numeric
\& Args    : [optional] new value to set
.Ve
.SS "strand"
.IX Subsection "strand"
.Vb 6
\& Title   : strand
\& Usage   : $hsp\->strand(\*(Aqquery\*(Aq)
\& Function: Retrieves the strand for the HSP component requested
\& Returns : +1 or \-1
\& Args    : \*(Aqhit\*(Aq or \*(Aqsubject\*(Aq or \*(Aqsbjct\*(Aq to retrieve the strand of the subject,
\&           \*(Aqquery\*(Aq to retrieve the query strand (default)
.Ve
.SS "score"
.IX Subsection "score"
.Vb 6
\& Title   : score
\& Usage   : $score = $obj\->score();
\&           $obj\->score($value);
\& Function: Get/Set the score value
\& Returns : numeric
\& Args    : [optional] new value to set
.Ve
.SS "bits"
.IX Subsection "bits"
.Vb 6
\& Title   : bits
\& Usage   : $bits = $obj\->bits();
\&           $obj\->bits($value);
\& Function: Get/Set the bits value
\& Returns : numeric
\& Args    : [optional] new value to set
.Ve
.SH "Private methods"
.IX Header "Private methods"
.SS "_calculate_seq_positions"
.IX Subsection "_calculate_seq_positions"
.Vb 5
\& Title   : _calculate_seq_positions
\& Usage   : $self\->_calculate_seq_positions
\& Function: Internal function
\& Returns :
\& Args    :
.Ve
.SS "n"
.IX Subsection "n"
See documentation in \fBBio::Search::HSP::HSPI::n()\fR
.SS "range"
.IX Subsection "range"
See documentation in \fBBio::Search::HSP::HSPI::range()\fR
.SS "links"
.IX Subsection "links"
.Vb 6
\& Title   : links
\& Usage   : $obj\->links($newval)
\& Function: Get/Set the Links value (from WU\-BLAST)
\&           Indicates the placement of the alignment in the group of HSPs
\& Returns : Value of links
\& Args    : On set, new value (a scalar or undef, optional)
.Ve
.SS "hsp_group"
.IX Subsection "hsp_group"
.Vb 6
\& Title   : hsp_group
\& Usage   : $obj\->hsp_group($newval)
\& Function: Get/Set the Group value (from WU\-BLAST)
\&           Indicates a grouping of HSPs
\& Returns : Value of group
\& Args    : On set, new value (a scalar or undef, optional)
.Ve
.SS "hit_features"
.IX Subsection "hit_features"
.Vb 7
\& Title   : hit_features
\& Usage   : $obj\->hit_features($newval)
\& Function: Get/Set the HSP hit feature string (from some BLAST 2.2.13 text
\&           output), which is a string of overlapping or nearby features in HSP
\&           hit
\& Returns : Value of hit features, if present
\& Args    : On set, new value (a scalar or undef, optional)
.Ve
.SH "Brief introduction on cigar string"
.IX Header "Brief introduction on cigar string"
\&\s-1NOTE:\s0 the concept is originally from EnsEMBL docs at
http://may2005.archive.ensembl.org/Docs/wiki/html/EnsemblDocs/CigarFormat.html
Please append to these docs if you have a better definition.
.PP
Sequence alignment hits can be stored in a database as ungapped alignments.
This imposes 2 major constraints on alignments:
.PP
a) alignments for a single hit record require multiple rows in the database,
and
b) it is not possible to accurately retrieve the exact original alignment.
.PP
Alternatively, sequence alignments can be stored as gapped alignments using
the \s-1CIGAR\s0 line format (where \s-1CIGAR\s0 stands for Concise Idiosyncratic Gapped
Alignment Report).
.PP
In the cigar line format alignments are stored as follows:
.PP
M: Match
D: Deletion
I: Insertion
.PP
An example of an alignment for a hypthetical protein match is shown below:
.PP
Query:   42 \s-1PGPAGLP\-\-\-\-GSVGLQGPRGLRGPLP\-GPLGPPL...\s0
.PP
.Vb 1
\&            PG    P    G     GP   R      PLGP
.Ve
.PP
Sbjct: 1672 PGTP*TPLVPLGPWVPLGPSSPR\*(--LPSGPLGPTD...
.PP
protein_align_feature table as the following cigar line:
.PP
7M4D12M2I2MD7M
.SS "cigar_string"
.IX Subsection "cigar_string"
.Vb 5
\&  Name:     cigar_string
\&  Usage:    $cigar_string = $hsp\->cigar_string
\&  Function: Generate and return cigar string for this HSP alignment
\&  Args:     No input needed
\&  Return:   a cigar string
.Ve
.SS "generate_cigar_string"
.IX Subsection "generate_cigar_string"
.Vb 5
\&  Name:     generate_cigar_string
\&  Usage:    my $cigar_string = Bio::Search::HSP::GenericHSP::generate_cigar_string ($qstr, $hstr);
\&  Function: generate cigar string from a simple sequence of alignment.
\&  Args:     the string of query and subject
\&  Return:   cigar string
.Ve
