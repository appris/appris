.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::IO 3pm"
.TH Bio::Matrix::PSM::IO 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::PSM::IO \- PSM parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Matrix::PSM::IO;
\&
\&  my $psmIO= Bio::Matrix::PSM::IO\->new(\-file=>$file, \-format=>\*(Aqtransfac\*(Aq);
\&
\&  my $release=$psmIO\->release; #Using Bio::Matrix::PSM::PsmHeader methods
\&
\&  my $release=$psmIO\->release;
\&
\&  while (my $psm=$psmIO\->next_psm) {
\&   my %psm_header=$psm\->header;
\&   my $ic=$psm_header{IC};
\&   my $sites=$psm_header{sites};
\&   my $width=$psm_header{width};
\&   my $score=$psm_header{e_val};
\&   my $IUPAC=$psm\->IUPAC;
\&  }
\&
\&  my $instances=$psm\->instances;
\&  foreach my $instance (@{$instances}) {
\&    my $id=$instance\->primary_id;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to read \s-1DNA\s0 position scoring matrices and/or
their respective sequence matches from a file.
.PP
There are two header methods, one belonging to
Bio::Matrix::PSM::IO::driver and the other to
Bio::Matrix::PSM::Psm. They provide general information about the file
(driver) and for the current \s-1PSM\s0 result (Psm) respectively. Psm header
method always returns the same thing, but some values in the hash
might be empty, depending on the file you are parsing. You will get
undef in this case (no exceptions are thrown).
.PP
Please note that the file header data (commenatries, version, input
data, configuration, etc.)  might be obtained through
Bio::Matrix::PSM::PsmHeader methods. Some methods are driver specific
(meme, transfac, etc.): meme: weight mast: seq, instances
.PP
If called when you parse a different file type you will get undef. For
example:
.PP
.Vb 2
\&  my $psmIO= Bio::Matrix::PSM::IO\->new(file=>$file, format=>\*(Aqtransfac\*(Aq);
\&  my %seq=$psmIO\->seq;
.Ve
.PP
will return an empty hash. To see all methods and how to use them go
to Bio::Matrix::PSM::PsmHeaderI.
.PP
See also Bio::Matrix::PSM::PsmI for details on using and manipulating
the parsed data.
.PP
The only way to write \s-1PFM/PWM\s0 is through masta module (something like fasta for
\&\s-1DNA\s0 matrices). You can see an example by reading Bio::Matrix::PSM::IO::masta
documentation.
.SH "See also"
.IX Header "See also"
Bio::Matrix::PSM::PsmI, Bio::Matrix::PSM::PsmHeaderI, Bio::Matrix::PSM::IO::masta
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Stefan Kirov"
.IX Header "AUTHOR - Stefan Kirov"
Email skirov@utk.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $psmIO =  Bio::Matrix::PSM::IO\->new(\-format=>\*(Aqmeme\*(Aq, 
\&                                                 \-file=>$file);
\& Function: Associates a file with the appropriate parser
\& Throws  : Throws if the file passed is in HTML format or 
\&           if some criteria for the file
\&           format are not met. See L<Bio::Matrix::PSM::IO::meme> and 
\&           L<Bio::Matrix::PSM::IO::transfac> for more details.
\& Example :
\& Returns : psm object, associated with a file with matrix file
\& Args    : hash
.Ve
.SS "fh"
.IX Subsection "fh"
.Vb 7
\& Title   : fh
\& Usage   : $obj\->fh
\& Function: Get a filehandle type access to the matrix parser
\& Example : $fh = $obj\->fh;      # make a tied filehandle
\&           $matrix = <$fh>;     # read a matrix object
\& Returns : filehandle tied to Bio::Matrix::PSM::IO class
\& Args    : none
.Ve
.SS "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 3
\& Title   : _load_format_module
\& Usage   : *INTERNAL Matrix::PSM::IO stuff*
\& Function: Loads up (like use) a module at run time on demand
.Ve
.SS "_guess_format"
.IX Subsection "_guess_format"
.Vb 4
\& Title   : _guess_format
\& Usage   : $obj\->_guess_format($filename)
\& Returns : guessed format of filename (lower case)
\& Args    : filename
.Ve
.SS "next_psm"
.IX Subsection "next_psm"
.Vb 8
\& Title   : next_psm
\& Usage   : my $psm=$psmIO\->next_psm();
\& Function: Reads the next PSM from the input file, associated with this object
\& Throws  : Throws if there ara format violations in the input file (checking is not
\&            very strict with all drivers).
\& Example :
\& Returns : Bio::Matrix::PSM::Psm object
\& Args    : none
.Ve
.SS "_parseMatrix"
.IX Subsection "_parseMatrix"
.Vb 7
\& Title   : _parseMatrix
\& Usage   :
\& Function: Parses the next site matrix information in the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  hash as for constructing a SiteMatrix object (see SiteMatrixI)
\& Args    :  string
.Ve
.SS "_parseInstance"
.IX Subsection "_parseInstance"
.Vb 7
\& Title   : _parseInstance
\& Usage   :
\& Function: Parses the next sites instances from the meme file
\& Throws  :
\& Example : Internal stuff
\& Returns : Bio::Matrix::PSM::SiteMatrix object
\& Args    : array references
.Ve
.SS "_parse_coordinates"
.IX Subsection "_parse_coordinates"
.Vb 7
\& Title   : _parse_coordinates
\& Usage   :
\& Function:
\& Throws  :
\& Example : Internal stuff
\& Returns :
\& Args    :
.Ve
.SS "header"
.IX Subsection "header"
.Vb 7
\& Title   : header
\& Usage   :  my %header=$psmIO\->header;
\& Function:  Returns the header for the PSM file, format specific
\& Throws  :
\& Example :
\& Returns :  Hash or a single string with driver specific information
\& Args    :  none
.Ve
.SS "_make_matrix"
.IX Subsection "_make_matrix"
.Vb 7
\& Title   : _make_matrix
\& Usage   :
\& Function: makes a matrix from 4 array references (A C G T)
\& Throws  :
\& Example :
\& Returns : SiteMatrix object
\& Args    : array of references(A C G T)
.Ve
