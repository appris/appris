.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Factory::SeqAnalysisParserFactoryI 3pm"
.TH Bio::Factory::SeqAnalysisParserFactoryI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Factory::SeqAnalysisParserFactoryI \- interface describing objects capable
              of creating SeqAnalysisParserI compliant parsers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    # initialize an object implementing this interface, e.g.
\&    $factory = Bio::Factory::SeqAnalysisParserFactory\->new();
\&    # obtain a parser object
\&    $parser = $factory\->get_parser(\-input=>$inputobj,
\&                                   \-params=>[@params],
\&                                   \-method => $method);
\&    # $parser is an object implementing Bio::SeqAnalysisParserI
\&    # annotate sequence with features produced by parser
\&    while(my $feat = $parser\->next_feature()) {
\&        $seq\->add_SeqFeature($feat);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an interface for factory classes capable of instantiating
SeqAnalysisParserI implementing parsers.
.PP
The concept behind the interface is a generic analysis result parsing
in high-throughput automated sequence annotation pipelines. See
Bio::SeqAnalysisParserI for more documentation of this concept.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp, Jason Stajich"
.IX Header "AUTHOR - Hilmar Lapp, Jason Stajich"
Email Hilmar Lapp <hlapp@gmx.net>, Jason Stajich <jason@bioperl.org>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "get_parser"
.IX Subsection "get_parser"
.Vb 8
\& Title   : get_parser
\& Usage   : $factory\->get_parser(\-input=>$inputobj, 
\&                                [ \-params=>[@params] ],
\&                                \-method => $method)
\& Function: Creates and returns a parser object for the given input and method.
\&           The type of input which is suitable depends on the implementation,
\&           but a good\-style implementation should allow both file names and
\&           streams (filehandles).
\&
\&           A particular implementation may not be able to create a parser for
\&           the requested method. In this case it shall return undef.
\&
\&           Parameters (\-params argument) are passed on to the parser object
\&           and therefore are specific to the parser to be created. An
\&           implementation of this interface should make this argument optional.
\& Example :
\& Returns : A Bio::SeqAnalysisParserI implementing object.
\& Args    : B<input>  \- object/file where analysis results are coming from,
\&           B<params> \- parameter to use when parsing/running analysis
\&           B<method> \- method of analysis
.Ve
