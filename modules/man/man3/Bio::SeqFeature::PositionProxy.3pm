.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::PositionProxy 3pm"
.TH Bio::SeqFeature::PositionProxy 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::PositionProxy \- handle features when truncation/revcom sequences span a feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   $proxy = Bio::SeqFeature::PositionProxy\->new( \-loc => $loc,
\&                                                 \-parent => $basefeature);
\&
\&   $seq\->add_SeqFeature($feat);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
PositionProxy is a Proxy Sequence Feature to handle truncation
and revcomp without duplicating all the data within the sequence features.
It holds a new location for a sequence feature and the original feature
it came from to provide the additional annotation information.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Ewan Birney <birney@sanger.ac.uk>
.SH "DEVELOPERS"
.IX Header "DEVELOPERS"
This class has been written with an eye out of inheritance. The fields
the actual object hash are:
.PP
.Vb 5
\&   _gsf_tag_hash  = reference to a hash for the tags
\&   _gsf_sub_array = reference to an array for sub arrays
\&   _gsf_start     = scalar of the start point
\&   _gsf_end       = scalar of the end point
\&   _gsf_strand    = scalar of the strand
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "location"
.IX Subsection "location"
.Vb 6
\& Title   : location
\& Usage   : my $location = $seqfeature\->location()
\& Function: returns a location object suitable for identifying location 
\&           of feature on sequence or parent feature  
\& Returns : Bio::LocationI object
\& Args    : none
.Ve
.SS "parent"
.IX Subsection "parent"
.Vb 5
\& Title   : parent
\& Usage   : my $sf = $proxy\->parent()
\& Function: returns the seqfeature parent of this proxy
\& Returns : Bio::SeqFeatureI object
\& Args    : none
.Ve
.SS "start"
.IX Subsection "start"
.Vb 6
\& Title   : start
\& Usage   : $start = $feat\->start
\&           $feat\->start(20)
\& Function: Get
\& Returns : integer
\& Args    : none
.Ve
.SS "end"
.IX Subsection "end"
.Vb 6
\& Title   : end
\& Usage   : $end = $feat\->end
\&           $feat\->end($end)
\& Function: get
\& Returns : integer
\& Args    : none
.Ve
.SS "length"
.IX Subsection "length"
.Vb 6
\& Title   : length
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "strand"
.IX Subsection "strand"
.Vb 6
\& Title   : strand
\& Usage   : $strand = $feat\->strand()
\&           $feat\->strand($strand)
\& Function: get/set on strand information, being 1,\-1 or 0
\& Returns : \-1,1 or 0
\& Args    : none
.Ve
.SS "attach_seq"
.IX Subsection "attach_seq"
.Vb 8
\& Title   : attach_seq
\& Usage   : $sf\->attach_seq($seq)
\& Function: Attaches a Bio::Seq object to this feature. This
\&           Bio::Seq object is for the *entire* sequence: ie
\&           from 1 to 10000
\& Example :
\& Returns : TRUE on success
\& Args    :
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 6
\& Title   : seq
\& Usage   : $tseq = $sf\->seq()
\& Function: returns the truncated sequence (if there) for this
\& Example :
\& Returns : sub seq on attached sequence bounded by start & end
\& Args    : none
.Ve
.SS "entire_seq"
.IX Subsection "entire_seq"
.Vb 6
\& Title   : entire_seq
\& Usage   : $whole_seq = $sf\->entire_seq()
\& Function: gives the entire sequence that this seqfeature is attached to
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "seqname"
.IX Subsection "seqname"
.Vb 6
\& Title   : seqname
\& Usage   : $obj\->seq_id($newval)
\& Function: There are many cases when you make a feature that you
\&           do know the sequence name, but do not know its actual
\&           sequence. This is an attribute such that you can store
\&           the seqname.
\&
\&           This attribute should *not* be used in GFF dumping, as
\&           that should come from the collection in which the seq
\&           feature was found.
\& Returns : value of seqname
\& Args    : newvalue (optional)
.Ve
.SS "Proxies"
.IX Subsection "Proxies"
These functions chain back to the parent for all non sequence related stuff.
.SS "primary_tag"
.IX Subsection "primary_tag"
.Vb 6
\& Title   : primary_tag
\& Usage   : $tag = $feat\->primary_tag()
\& Function: Returns the primary tag for a feature,
\&           eg \*(Aqexon\*(Aq
\& Returns : a string 
\& Args    : none
.Ve
.SS "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $tag = $feat\->source_tag()
\& Function: Returns the source tag for a feature,
\&           eg, \*(Aqgenscan\*(Aq 
\& Returns : a string 
\& Args    : none
.Ve
.SS "has_tag"
.IX Subsection "has_tag"
.Vb 5
\& Title   : has_tag
\& Usage   : $tag_exists = $self\->has_tag(\*(Aqsome_tag\*(Aq)
\& Function: 
\& Returns : TRUE if the specified tag exists, and FALSE otherwise
\& Args    :
.Ve
.SS "get_tag_values"
.IX Subsection "get_tag_values"
.Vb 5
\& Title   : get_tag_values
\& Usage   : @values = $self\->get_tag_values(\*(Aqsome_tag\*(Aq)
\& Function: 
\& Returns : An array comprising the values of the specified tag.
\& Args    :
.Ve
.SS "get_all_tags"
.IX Subsection "get_all_tags"
.Vb 5
\& Title   : get_all_tags
\& Usage   : @tags = $feat\->get_all_tags()
\& Function: gives all tags for this feature
\& Returns : an array of strings
\& Args    : none
.Ve
