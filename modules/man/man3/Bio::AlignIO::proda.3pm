.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::AlignIO::proda 3pm"
.TH Bio::AlignIO::proda 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::AlignIO::proda \- proda sequence input/output stream
.PP
This provides the basic capabilities to parse the output alignments
from the ProDA multiple sequence alignment program
(http://proda.stanford.edu)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::AlignIO class.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Align::AlignI objects to and from proda
files.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS \- Albert Vilella"
.IX Header "AUTHORS - Albert Vilella"
Email: avilella-at-gmail-dot-com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $alignio = Bio::AlignIO\->new(\-format => \*(Aqproda\*(Aq,
\&                       \-file => \*(Aqfilename\*(Aq);
\& Function: returns a new Bio::AlignIO object to handle proda files
\& Returns : Bio::AlignIO::proda object
\& Args    : \-verbose => verbosity setting (\-1, 0, 1, 2)
\&           \-file    => name of file to read in or to write, with ">"
\&           \-fh      => alternative to \-file param \- provide a filehandle
\&                       to read from or write to
\&           \-format  => alignment format to process or produce
\&           \-percentages => display a percentage of identity
\&                           in each line of the alignment (proda only)
\&           \-linelength=> alignment output line length (default 60)
.Ve
.SS "next_aln"
.IX Subsection "next_aln"
.Vb 5
\& Title   : next_aln
\& Usage   : $aln = $stream\->next_aln()
\& Function: returns the next alignment in the stream
\& Returns : Bio::Align::AlignI object
\& Args    : NONE
.Ve
.PP
See Bio::Align::AlignI for details
.SS "write_aln"
.IX Subsection "write_aln"
.Vb 5
\& Title   : write_aln
\& Usage   : $stream\->write_aln(@aln)
\& Function: writes the proda\-format object (.aln) into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Align::AlignI object
.Ve
.SS "percentages"
.IX Subsection "percentages"
.Vb 6
\& Title   : percentages
\& Usage   : $obj\->percentages($newval)
\& Function: Set the percentages flag \- whether or not to show percentages in
\&           each output line
\& Returns : value of percentages
\& Args    : newvalue (optional)
.Ve
.SS "line_length"
.IX Subsection "line_length"
.Vb 5
\& Title   : line_length
\& Usage   : $obj\->line_length($newval)
\& Function: Set the alignment output line length
\& Returns : value of line_length
\& Args    : newvalue (optional)
.Ve
.SS "no_header"
.IX Subsection "no_header"
.Vb 5
\& Title   : no_header
\& Usage   : $obj\->no_header($newval)
\& Function: Set if the alignment input has a CLUSTAL header or not
\& Returns : value of no_header
\& Args    : newvalue (optional)
.Ve
