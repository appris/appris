.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::DB::GFF::Util::Binning 3pm"
.TH Bio::DB::GFF::Util::Binning 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::GFF::Util::Binning \- binning utility for Bio::DB::GFF index
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::DB::GFF::Util::Binning qw(bin bin_bot bin_top);
\& my $tier = bin($start,$stop,$min);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a utility module that exports the functions \fBbin()\fR, \fBbin_bot()\fR
and \fBbin_top()\fR.  These functions translate a range on the genome into a
named bin that is used as an index in the Bio::DB::GFF schema.  The
index makes certain range retrieval queries much faster.
.SH "API"
.IX Header "API"
The remainder of the document describes the function calls.  No calls
are exported by default, but must be imported explicitly.
.ie n .IP "$bin_name = bin($start,$stop,$bin_size)" 4
.el .IP "\f(CW$bin_name\fR = bin($start,$stop,$bin_size)" 4
.IX Item "$bin_name = bin($start,$stop,$bin_size)"
Given a start, stop and bin size on the genome, translate this
location into a bin name.  In a list context, returns the bin tier
name and the position that the bin begins.
.ie n .IP "$bottom = bin_bot($tier,$start)" 4
.el .IP "\f(CW$bottom\fR = bin_bot($tier,$start)" 4
.IX Item "$bottom = bin_bot($tier,$start)"
Given a tier name and a range start position, returns the lower end of
the bin range.
.ie n .IP "$top = bin_top($tier,$end)" 4
.el .IP "\f(CW$top\fR = bin_top($tier,$end)" 4
.IX Item "$top = bin_top($tier,$end)"
Given a tier name and the end of a range, returns the upper end of the
bin range.
.SH "BUGS"
.IX Header "BUGS"
None known yet.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::DB::GFF,
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
