.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::SubSeq 3pm"
.TH Bio::SeqFeature::SubSeq 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::SubSeq \- Feature representing a subsequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&  # SubSeq with implicit sequence
\&  use Bio::Seq;
\&  my $template = Bio::Seq\->new( \-seq => \*(AqAAAAACCCCCGGGGGTTTTT\*(Aq );
\&  $subseq = Bio::SeqFeature::Amplicon\->new(
\&      \-start    => 6,
\&      \-end      => 15,
\&      \-template => $template,
\&  );
\&  print "Subsequence is: ".$amplicon\->seq\->seq."\en"; # Should be \*(AqCCCCCGGGGG\*(Aq
\&
\&  # SubSeq with explicit sequence
\&  use Bio::SeqFeature::Subseq;
\&  my $subseq = Bio::SeqFeature::Amplicon\->new( 
\&      \-seq => $seq_object,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqFeature::SubSeq extends Bio::SeqFeature::Generic features to
represent a subsequence. When this feature is attached to a template sequence,
the sequence of feature is the subsequence of the template at this location. The
purpose of this class is to represent a sequence as a feature without having to
explicitly store its sequence string.
.PP
Of course, you might have reasons to explicitly set a sequence. In that case,
note that the length of the sequence is allowed to not match the position of the
feature. For example, you can set sequence of length 10 in a SubSeq feature that
spans positions 30 to 50 of the template if you so desire.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via 
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Florent Angly <florent.angly@gmail.com>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new()
\& Usage   : my $subseq = Bio::SeqFeature::SubSeq( \-start => 1, \-end => 10, \-strand => \-1);
\& Function: Instantiate a new Bio::SeqFeature::SubSeq feature object
\& Args    : \-seq      , the sequence object or sequence string of the feature (optional)
\&           \-template , attach the feature to the provided parent template sequence or feature (optional).
\&                       Note that you must specify the feature location to do this.
\&           \-start, \-end, \-location, \-strand and all other L<Bio::SeqFeature::Generic> argument can be used.
\& Returns : A Bio::SeqFeature::SubSeq object
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 7
\& Title   : seq()
\& Usage   : my $seq = $subseq\->seq();
\& Function: Get or set the sequence object of this SubSeq feature. If no sequence
\&           was provided, but the subseq is attached to a sequence, get the
\&           corresponding subsequence.
\& Returns : A sequence object or undef
\& Args    : None.
.Ve
.SS "length"
.IX Subsection "length"
.Vb 8
\& Title   : seq()
\& Usage   : my $length = $subseq\->seq();
\& Function: Get the length of the SubSeq feature. It is similar to the length()
\&           method of L<Bio::Generic::SeqFeature>, which computes length based
\&           on the location of the feature. However, if the feature was not
\&           given a location, return the length of the subsequence if possible.
\& Returns : integer or undef
\& Args    : None.
.Ve
