.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Result::ResultI 3pm"
.TH Bio::Search::Result::ResultI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Result::ResultI \- Abstract interface to Search Result objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# Bio::Search::Result::ResultI objects cannot be instantiated since this
# module defines a pure interface.
.PP
# Given an object that implements the Bio::Search::Result::ResultI  interface,
# you can do the following things with it:
.PP
.Vb 6
\&    use Bio::SearchIO;
\&    my $io = Bio::SearchIO\->new(\-format => \*(Aqblast\*(Aq,
\&                                \-file   => \*(Aqt/data/HUMBETGLOA.tblastx\*(Aq);
\&    my $result = $io\->next_result;
\&    while( $hit = $result\->next_hit()) { # enter code here for hit processing
\&    }
\&
\&    my $id = $result\->query_name();
\&
\&    my $desc = $result\->query_description();
\&
\&    my $dbname = $result\->database_name();
\&
\&    my $size = $result\->database_letters();
\&
\&    my $num_entries = $result\->database_entries();
\&
\&    my $gap_ext = $result\->get_parameter(\*(Aqgapext\*(Aq);
\&
\&    my @params = $result\->available_parameters;
\&
\&    my $kappa = $result\->get_statistic(\*(Aqkappa\*(Aq);
\&
\&    my @statnames = $result\->available_statistics;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Search::Result::ResultI objects are data structures containing
the results from the execution of a search algorithm.  As such, it may
contain various algorithm specific information as well as details of
the execution, but will contain a few fundamental elements, including
the ability to return Bio::Search::Hit::HitI objects.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Aaron Mackey <amackey@virginia.edu>  (original author)
.PP
Steve Chervitz <sac@bioperl.org>
.PP
See the \s-1FEEDBACK\s0 section  for where to send bug reports and comments.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999\-2001 Aaron Mackey, Steve Chervitz. All Rights Reserved.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.SS "next_hit"
.IX Subsection "next_hit"
.Vb 6
\& Title   : next_hit
\& Usage   : while( $hit = $result\->next_hit()) { ... }
\& Function: Returns the next available Hit object, representing potential
\&           matches between the query and various entities from the database.
\& Returns : a Bio::Search::Hit::HitI object or undef if there are no more.
\& Args    : none
.Ve
.SS "sort_hits"
.IX Subsection "sort_hits"
.Vb 10
\& Title          : sort_hits
\& Usage          : $result\->sort_hits(\e&sort_function)
\& Function       : Sorts the available hit objects by a user\-supplied function. Defaults to sort
\&                  by descending score.
\& Returns        : n/a
\& Args           : A coderef for the sort function.  See the documentation on the Perl sort() 
\&                  function for guidelines on writing sort functions.  
\& Note           : To access the special variables $a and $b used by the Perl sort() function 
\&                  the user function must access Bio::Search::Result::ResultI namespace. 
\&                  For example, use : 
\&                  $result\->sort_hits( sub{$Bio::Search::Result::ResultI::a\->length <=> 
\&                                              $Bio::Search::Result::ResultI::b\->length});
\&                   NOT $result\->sort_hits($a\->length <=>$b\->length);
.Ve
.SS "_default sort_hits"
.IX Subsection "_default sort_hits"
.Vb 6
\&  Title : _default_sort_hits
\&  Usage : Do not call directly.
\&  Function: Sort hits in descending order by score
\&  Args  : None
\&  Returns: 1 on success
\&  Note  : Used by $result\->sort_hits()
.Ve
.SS "query_name"
.IX Subsection "query_name"
.Vb 6
\& Title   : query_name
\& Usage   : $id = $result\->query_name();
\& Function: Get the string identifier of the query used by the
\&           algorithm that performed the search.
\& Returns : a string.
\& Args    : none
.Ve
.SS "query_accession"
.IX Subsection "query_accession"
.Vb 5
\& Title   : query_accession
\& Usage   : $id = $result\->query_accession();
\& Function: Get the accession (if available) for the query sequence
\& Returns : a string
\& Args    : none
.Ve
.SS "query_length"
.IX Subsection "query_length"
.Vb 6
\& Title   : query_length
\& Usage   : $id = $result\->query_length();
\& Function: Get the length of the query sequence
\&           used in the search.
\& Returns : a number
\& Args    : none
.Ve
.SS "query_description"
.IX Subsection "query_description"
.Vb 6
\& Title   : query_description
\& Usage   : $id = $result\->query_description();
\& Function: Get the description of the query sequence
\&           used in the search.
\& Returns : a string
\& Args    : none
.Ve
.SS "database_name"
.IX Subsection "database_name"
.Vb 6
\& Title   : database_name
\& Usage   : $name = $result\->database_name()
\& Function: Used to obtain the name of the database that the query was searched
\&           against by the algorithm.
\& Returns : a scalar string
\& Args    : none
.Ve
.SS "database_letters"
.IX Subsection "database_letters"
.Vb 7
\& Title   : database_letters
\& Usage   : $size = $result\->database_letters()
\& Function: Used to obtain the size of database that was searched against.
\& Returns : a scalar integer (units specific to algorithm, but probably the
\&           total number of residues in the database, if available) or undef if
\&           the information was not available to the Processor object.
\& Args    : none
.Ve
.SS "database_entries"
.IX Subsection "database_entries"
.Vb 6
\& Title   : database_entries
\& Usage   : $num_entries = $result\->database_entries()
\& Function: Used to obtain the number of entries contained in the database.
\& Returns : a scalar integer representing the number of entities in the database
\&           or undef if the information was not available.
\& Args    : none
.Ve
.SS "get_parameter"
.IX Subsection "get_parameter"
.Vb 6
\& Title   : get_parameter
\& Usage   : my $gap_ext = $result\->get_parameter(\*(Aqgapext\*(Aq)
\& Function: Returns the value for a specific parameter used
\&           when running this result
\& Returns : string
\& Args    : name of parameter (string)
.Ve
.SS "available_parameters"
.IX Subsection "available_parameters"
.Vb 5
\& Title   : available_parameters
\& Usage   : my @params = $result\->available_parameters
\& Function: Returns the names of the available parameters
\& Returns : Return list of available parameters used for this result
\& Args    : none
.Ve
.SS "get_statistic"
.IX Subsection "get_statistic"
.Vb 6
\& Title   : get_statistic
\& Usage   : my $gap_ext = $result\->get_statistic(\*(Aqkappa\*(Aq)
\& Function: Returns the value for a specific statistic available 
\&           from this result
\& Returns : string
\& Args    : name of statistic (string)
.Ve
.SS "available_statistics"
.IX Subsection "available_statistics"
.Vb 5
\& Title   : available_statistics
\& Usage   : my @statnames = $result\->available_statistics
\& Function: Returns the names of the available statistics
\& Returns : Return list of available statistics used for this result
\& Args    : none
.Ve
.SS "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $result\->algorithm
\& Function: Obtain the name of the algorithm used to obtain the Result
\& Returns : string (e.g., BLASTP)
\& Args    : [optional] scalar string to set value
.Ve
.SS "algorithm_version"
.IX Subsection "algorithm_version"
.Vb 5
\& Title   : algorithm_version
\& Usage   : my $r_version = $result\->algorithm_version
\& Function: Obtain the version of the algorithm used to obtain the Result
\& Returns : string (e.g., 2.1.2)
\& Args    : [optional] scalar string to set algorithm version value
.Ve
.SS "algorithm_reference"
.IX Subsection "algorithm_reference"
.Vb 8
\& Title   : algorithm_reference
\& Usage   : $obj\->algorithm_reference($newval)
\& Function: 
\& Returns : value of the literature reference for the algorithm
\& Args    : newvalue (optional)
\& Comments: The default implementation in ResultI returns an empty string
\&           rather than throwing a NotImplemented exception, since
\&           the ref may not always be available and is not critical.
.Ve
.SS "rid"
.IX Subsection "rid"
.Vb 10
\& Title   : rid
\& Usage   : $obj\->rid($newval)
\& Function:
\& Returns : value of the BLAST Request ID (eg. RID: ZABJ4EA7014)
\& Args    : newvalue (optional)
\& Comments: The default implementation in ResultI returns an empty string
\&           rather than throwing a NotImplemented exception, since
\&           the RID may not always be available and is not critical.
\&           See: (1) https://www.ncbi.nlm.nih.gov/Class/MLACourse/Modules/BLAST/rid.html
\&                (2) https://www.ncbi.nlm.nih.gov/staff/tao/URLAPI/new/node63.html
.Ve
.SS "num_hits"
.IX Subsection "num_hits"
.Vb 5
\& Title   : num_hits
\& Usage   : my $hitcount= $result\->num_hits
\& Function: returns the number of hits for this query result
\& Returns : integer
\& Args    : none
.Ve
.SS "hits"
.IX Subsection "hits"
.Vb 5
\& Title   : hits
\& Usage   : my @hits = $result\->hits
\& Function: Returns the HitI objects contained within this Result
\& Returns : Array of Bio::Search::Hit::HitI objects
\& Args    : none
.Ve
.PP
See Also: Bio::Search::Hit::HitI
.SS "no_hits_found"
.IX Subsection "no_hits_found"
.Vb 3
\& Usage     : $nohits = $blast\->no_hits_found();
\& Purpose   : Get boolean indicator indicating whether or not any hits
\&             were present in the report.
\&
\&             This is NOT the same as determining the number of hits via
\&             the hits() method, which will return zero hits if there were no
\&             hits in the report or if all hits were filtered out during the parse.
\&
\&             Thus, this method can be used to distinguish these possibilities
\&             for hitless reports generated when filtering.
\&
\& Returns   : Boolean
\& Argument  : none
.Ve
.SS "set_no_hits_found"
.IX Subsection "set_no_hits_found"
.Vb 5
\& Usage     : $blast\->set_no_hits_found(); 
\& Purpose   : Set boolean indicator indicating whether or not any hits
\&             were present in the report.
\& Returns   : n/a
\& Argument  : none
.Ve
