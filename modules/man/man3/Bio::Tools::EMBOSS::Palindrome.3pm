.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::EMBOSS::Palindrome 3pm"
.TH Bio::Tools::EMBOSS::Palindrome 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::EMBOSS::Palindrome \- parse EMBOSS palindrome output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # a simple script to turn palindrome output into GFF3
\&  use Bio::Tools::EMBOSS::Palindrome;
\&  use Bio::Tools::GFF;
\&
\&  my $parser = Bio::Tools::EMBOSS::Palindrome\->new(\-file => $filename);
\&  my $out    = Bio::Tools::GFF\->new(\-gff_version => 3,
\&                                   \-file => ">$filename.gff");
\&  while( my $seq = $parser\->next_seq ) {
\&     for my $feat ( $seq\->get_SeqFeatures ) {
\&        $out\->write_feature($feat);
\&     }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a parser for the \s-1EMBOSS\s0 tool 'palindrome'.  It will produce a
Bio::Seq object for each sequence analyzed.  The sequence will be
empty (but will be of the correct length) and will have attached to it
Bio::SeqFeature::FeaturePair objects which wil
.SS "\s-1FUTURE WORK\s0"
.IX Subsection "FUTURE WORK"
It may be consolidated into another framework at a later time, but for
the time being it will stay a separate modules.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : my $obj = Bio::Tools::EMBOSS::Palindrome\->new();
\& Function: Builds a new Bio::Tools::EMBOSS::Palindrome object 
\& Returns : an instance of Bio::Tools::EMBOSS::Palindrome
\& Args    : \-file/\-fh  => a filename or filehandle for
\&                         initializing the parser
.Ve
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : my $seq = $parser\->next_seq;
\& Function: Get the next feature set from the 
\& Returns : L<Bio::SeqI> object
\& Args    : none
.Ve
.SS "source_tag"
.IX Subsection "source_tag"
.Vb 5
\& Title   : source_tag
\& Usage   : $obj\->source_tag($newval)
\& Function: Get/Set Source Tag (\*(Aqpalindrome\*(Aq) by default
\& Returns : value of source_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
