.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::IO::meme 3pm"
.TH Bio::Matrix::PSM::IO::meme 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::PSM::IO::meme \- PSM meme parser implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::Matrix::PSM::IO for detailed documentation on how to use \s-1PSM\s0 parsers
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parser for meme.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Stefan Kirov"
.IX Header "AUTHOR - Stefan Kirov"
Email skirov@utk.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $psmIO =  Bio::Matrix::PSM::IO\->new(\-format=>\*(Aqmeme\*(Aq, 
\&                                                 \-file=>$file);
\& Function: Associates a file with the appropriate parser
\& Throws  : Throws if the file passed is in HTML format or 
\&           if the MEME header cannot be found.
\& Example :
\& Args    : hash
\& Returns : "Bio::Matrix::PSM::$format"\->new(@args);
.Ve
.SS "_parse_coordinates"
.IX Subsection "_parse_coordinates"
.Vb 7
\& Title   : _parse_coordinates
\& Usage   :
\& Function:
\& Throws  :
\& Example : Internal stuff
\& Returns :
\& Args    :
.Ve
.SS "header"
.IX Subsection "header"
.Vb 10
\& Title   : header
\& Usage   :  my %header=$psmIO\->header;
\& Function:  Returns the header for the MEME file
\& Throws  :
\& Example : Fetching all the sequences included in the MEME analysis, 
\&           being parsed
\&           my %header=$psmIO\->header;
\&            foreach my $seqid (@{$header{instances}}) {
\&               my $seq=$db\->get_Seq_by_acc($id);
\&               #Do something with the sequence
\&            }
\&            where $db might be Bio::DB:GenBank object, see
\& Returns : Hash with three keys: instances, weights and lengths, which
\&           should be self\-explenatory. Each value is an array
\&           reference. Each array element corresponds to the same
\&           element in the other two arrays. So $header{instances}\->[$i]
\&           will refer to the same sequence in the motif file as
\&           $header{weights}\->[$i] and $header{lengths}\->[$i]
\& Args    :  none
\& Notes   :  OBSOLETE!
.Ve
.SS "next_psm"
.IX Subsection "next_psm"
.Vb 8
\& Title   : next_psm
\& Usage   : my $psm=$psmIO\->next_psm();
\& Function: Reads the next PSM from the input file, associated with this object
\& Throws  : Throws if the format is inconsistent with the rules for MEME 3.0.4:
\&            no SUMMARY Section present or some keywords are missing/altered.
\& Example :
\& Returns : Bio::Matrix::PSM::Psm object
\& Args    : none
.Ve
.SS "_parseMatrix"
.IX Subsection "_parseMatrix"
.Vb 7
\& Title   : _parseMatrix
\& Usage   :
\& Function: Parses the next site matrix information in the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  hash as for constructing a SiteMatrix object (see SiteMatrixI)
\& Args    :  string
.Ve
.SS "_parse_logs"
.IX Subsection "_parse_logs"
.Vb 7
\& Title   : _parse_logs
\& Usage   :
\& Function: Parses the next site matrix log values in the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  array of array refs
\& Args    :  string
.Ve
.SS "_parseInstance"
.IX Subsection "_parseInstance"
.Vb 7
\& Title   : _parseInstance
\& Usage   :
\& Function:  Parses the next sites instances from the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  Bio::Matrix::PSM::InstanceSite object
\& Args    :  none
.Ve
