.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::phd 3pm"
.TH Bio::SeqIO::phd 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::phd \- phd file input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::SeqIO class.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform .phd files (from Phil Green's phred basecaller)
to and from Bio::Seq::Quality objects. The phd format is described in section 10
at this url: http://www.phrap.org/phredphrap/phred.html
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.
Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR Chad Matsalla"
.IX Header "AUTHOR Chad Matsalla"
Chad Matsalla
bioinformatics@dieselwurks.com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason@bioperl.org
Jean-Marc Frigerio, Frigerio@pierroton.inra.fr
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq()
\& Usage   : $swq = $stream\->next_seq()
\& Function: returns the next phred sequence in the stream
\& Returns : Bio::Seq::Quality object
\& Args    : NONE
.Ve
.SS "write_header"
.IX Subsection "write_header"
.Vb 8
\& Title   : write_header()
\& Usage   : $seqio\->write_header()
\& Function: Write out the header (BEGIN_COMMENTS .. END_COMMENT) part of a phd file
\& Returns : nothing
\& Args    : a Bio::Seq::Quality object
\& Notes   : These are the comments that reside in the header of a phd file
\&           at the present time. If not provided by the Bio::Seq::Quality object,
\&           the following default values will be used:
\&
\&     CHROMAT_FILE          : $swq\->id()
\&     ABI_THUMBPRINT        : 0
\&     PHRED_VERSION         : 0.980904.e
\&     CALL_METHOD           : phred
\&     QUALITY_LEVELS        : 99
\&     TIME                  : <current time>
\&     TRACE_ARRAY_MIN_INDEX : 0
\&     TRACE_ARRAY_MAX_INDEX : unknown
\&     CHEM                  : unknown
\&     DYE                   : unknown
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq()
\& Usage   : $seqio\->write_seq($swq);
\& Function: Write out a phd file.
\& Returns : Nothing.
\& Args    : a Bio::Seq::Quality object
.Ve
.SS "attribute"
.IX Subsection "attribute"
.Vb 5
\& Title   : attribute()
\& Usage   : swq\->attribute(name[,value]);
\& Function: Get/Set the name attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : a name or a pair name, value
.Ve
.SS "chromat_file"
.IX Subsection "chromat_file"
.Vb 5
\& Title   : chromat_file
\& Usage   : swq\->chromat_file([filename]);
\& Function: Get/Set the CHROMAT_FILE attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a filename
.Ve
.SS "abi_thumbprint"
.IX Subsection "abi_thumbprint"
.Vb 5
\& Title   : abi_thumbprint
\& Usage   : swq\->abi_thumbprint([value]);
\& Function: Get/Set the ABI_THUMBPRINT attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "phred_version"
.IX Subsection "phred_version"
.Vb 5
\& Title   : phred_version
\& Usage   : swq\->phred_version([value]);
\& Function: Get/Set the PHRED_VERSION attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "call_method"
.IX Subsection "call_method"
.Vb 5
\& Title   : call_method
\& Usage   : swq\->call_method([value]);
\& Function: Get/Set the CALL_METHOD attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "quality_levels"
.IX Subsection "quality_levels"
.Vb 5
\& Title   : quality_levels
\& Usage   : swq\->quality_levels([value]);
\& Function: Get/Set the quality_levels attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "trace_array_min_index"
.IX Subsection "trace_array_min_index"
.Vb 5
\& Title   : trace_array_min_index
\& Usage   : swq\->trace_array_min_index([value]);
\& Function: Get/Set the trace_array_min_index attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "trace_array_max_index"
.IX Subsection "trace_array_max_index"
.Vb 5
\& Title   : trace_array_max_index
\& Usage   : swq\->trace_array_max_index([value]);
\& Function: Get/Set the trace_array_max_index attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "chem"
.IX Subsection "chem"
.Vb 5
\& Title   : chem
\& Usage   : swq\->chem([value]);
\& Function: Get/Set the chem attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "dye"
.IX Subsection "dye"
.Vb 5
\& Title   : dye
\& Usage   : swq\->dye([value]);
\& Function: Get/Set the dye attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "time"
.IX Subsection "time"
.Vb 5
\& Title   : time
\& Usage   : swq\->time([value]);
\& Function: Get/Set the time attribute.
\& Returns : a string if 1 param, nothing else.
\& Args    : none or a value
.Ve
.SS "touch"
.IX Subsection "touch"
.Vb 5
\& Title   : touch
\& Usage   : swq\->touch();
\& Function: Set the time attribute to current time.
\& Returns : nothing
\& Args    : none
.Ve
