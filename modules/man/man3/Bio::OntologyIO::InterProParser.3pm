.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::OntologyIO::InterProParser 3pm"
.TH Bio::OntologyIO::InterProParser 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::OntologyIO::InterProParser \- Parser for InterPro xml files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # don\*(Aqt use this module directly \- use Bio::OntologyIO with instead
\&    my $ipp = Bio::OntologyIO\->new( \-format  => \*(Aqinterpro\*(Aq,
\&                                    \-file    => \*(Aqt/data/interpro.xml\*(Aq,
\&                                    \-ontology_engine => \*(Aqsimple\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\&  Use InterProParser to parse InterPro files in xml format. Typical
\&  use is the interpro.xml file published by EBI. The xml records
\&  should follow the format described in interpro.dtd, although the dtd
\&  file is not needed, and the XML file will not be validated against it.
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Peter Dimitrov"
.IX Header "AUTHOR - Peter Dimitrov"
Email dimitrov@gnf.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   :
\& Function: Initializes objects needed for parsing.
\& Example : $ipp = Bio::OntologyIO::InterProParser\->new( 
\&                                  \-file => \*(Aqt/data/interpro.xml\*(Aq,
\&                                  \-ontology_engine => \*(Aqsimple\*(Aq )
\&
\& Returns : Object of class Bio::OntologyIO::InterProParser.
\& Args    :
\&
\&  \-file            \- file name
\&  \-ontology_engine \- type of ontology engine. Should satisfy the
\&                     OntologyEngine interface requirements. Currently
\&                     the only option is \*(Aqsimple\*(Aq. In the future
\&                     Graph.pm based engine will be added to the
\&                     choices.
.Ve
.SS "parse"
.IX Subsection "parse"
.Vb 6
\& Title   : parse
\& Usage   :
\& Function: Performs the actual parsing.
\& Example : $ipp\->parse();
\& Returns : 
\& Args    :
.Ve
.SS "next_ontology"
.IX Subsection "next_ontology"
.Vb 4
\& Title   : next_ontology
\& Usage   : $ipp\->next_ontology()
\& Function: Parses the input file and returns the next InterPro ontology
\&           available.
\&
\&           Usually there will be only one ontology returned from an
\&           InterPro XML input.
\&
\& Example : $ipp\->next_ontology();
\& Returns : Returns the ontology as a Bio::Ontology::OntologyEngineI
\&           compliant object.
\& Args    :
.Ve
.PP
See Bio::Ontology::OntologyEngineI.
.SS "_is_parsed"
.IX Subsection "_is_parsed"
.Vb 6
\& Title   : _is_parsed
\& Usage   : $obj\->_is_parsed($newval)
\& Function: 
\& Example : 
\& Returns : value of _is_parsed (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "secondary_accessions_map"
.IX Subsection "secondary_accessions_map"
.Vb 10
\& Title   : secondary_accessions_map
\& Usage   : $obj\->secondary_accessions_map()
\& Function: This method is merely for convenience, and one should
\&           normally use the InterProTerm secondary_ids method to
\&           access the secondary accessions.
\& Example : $map = $interpro_parser\->secondary_accessions_map;
\& Returns : Reference to a hash that maps InterPro identifier to an
\&           array reference of secondary accessions following the 
\&           InterPro xml schema.
\& Args    : Empty hash reference
.Ve
