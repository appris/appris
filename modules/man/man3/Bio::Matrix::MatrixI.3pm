.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::MatrixI 3pm"
.TH Bio::Matrix::MatrixI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::MatrixI \- An interface for describing a Matrix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Get a Matrix object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an interface describing how one should be able to interact
with a matrix.  One can have a lot of information I suppose and this
outline won't really work for \s-1PWM\s0 or PSSMs.  We will have to derive a
particular interface for those.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "matrix_id"
.IX Subsection "matrix_id"
.Vb 5
\& Title   : matrix_id
\& Usage   : my $id = $matrix\->matrix_id
\& Function: Get the matrix ID
\& Returns : string value
\& Args    :
.Ve
.SS "matrix_name"
.IX Subsection "matrix_name"
.Vb 5
\& Title   : matrix_name
\& Usage   : my $name = $matrix\->matrix_name();
\& Function: Get the matrix name
\& Returns : string value
\& Args    :
.Ve
.SS "get_entry"
.IX Subsection "get_entry"
.Vb 6
\& Title   : get_entry
\& Usage   : my $entry = $matrix\->get_entry($rowname,$columname)
\& Function: Get the entry for a given row,column pair
\& Returns : scalar
\& Args    : $row name
\&           $column name
.Ve
.SS "get_column"
.IX Subsection "get_column"
.Vb 6
\& Title   : get_column
\& Usage   : my @row = $matrix\->get_column(\*(AqALPHA\*(Aq);
\& Function: Get a particular column
\& Returns : Array (in array context) or arrayref (in scalar context)
\&           of values
\& Args    : name of the column
.Ve
.SS "get_row"
.IX Subsection "get_row"
.Vb 6
\& Title   : get_row
\& Usage   : my @row = $matrix\->get_row(\*(AqALPHA\*(Aq);
\& Function: Get a particular row
\& Returns : Array (in array context) or arrayref (in scalar context)
\&           of values
\& Args    : name of the row
.Ve
.SS "get_diagonal"
.IX Subsection "get_diagonal"
.Vb 5
\& Title   : get_diagonal
\& Usage   : my @diagonal = $matrix\->get_diagonal; 
\& Function: Get the diagonal of the matrix
\& Returns : Array (in array context) or arrayref (in scalar context)
\& Args    : none
.Ve
.SS "column_num_for_name"
.IX Subsection "column_num_for_name"
.Vb 5
\& Title   : column_num_for_name
\& Usage   : my $num = $matrix\->column_num_for_name($name)
\& Function: Gets the column number for a particular column name
\& Returns : integer
\& Args    : string
.Ve
.SS "row_num_for_name"
.IX Subsection "row_num_for_name"
.Vb 5
\& Title   : row_num_for_name
\& Usage   : my $num = $matrix\->row_num_for_name($name)
\& Function: Gets the row number for a particular row name
\& Returns : integer
\& Args    : string
.Ve
.SS "num_rows"
.IX Subsection "num_rows"
.Vb 5
\& Title   : num_rows
\& Usage   : my $rowcount = $matrix\->num_rows;
\& Function: Get the number of rows
\& Returns : integer
\& Args    : none
.Ve
.SS "num_columns"
.IX Subsection "num_columns"
.Vb 5
\& Title   : num_columns
\& Usage   : my $colcount = $matrix\->num_columns
\& Function: Get the number of columns
\& Returns : integer
\& Args    : none
.Ve
.SS "reverse"
.IX Subsection "reverse"
.Vb 5
\& Title   : reverse
\& Usage   : my $matrix = $matrix\->reverse
\& Function: Get the reverse of a matrix
\& Returns : 
\& Args    :
.Ve
.SS "row_names"
.IX Subsection "row_names"
.Vb 5
\& Title   : row_names
\& Usage   : my @rows = $matrix\->row_names
\& Function: The names of all the rows
\& Returns : array in array context, arrayref in scalar context
\& Args    : none
.Ve
.SS "column_names"
.IX Subsection "column_names"
.Vb 5
\& Title   : column_names
\& Usage   : my @columns = $matrix\->column_names
\& Function: The names of all the columns
\& Returns : array in array context, arrayref in scalar context
\& Args    : none
.Ve
