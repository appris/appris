.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Index::SwissPfam 3pm"
.TH Bio::Index::SwissPfam 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Index::SwissPfam \- Interface for indexing swisspfam files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Bio::Index::SwissPfam;
\&    use strict;
\&
\&    my $Index_File_Name = shift;
\&    my $inx = Bio::Index::SwissPfam\->new(\*(Aq\-filename\*(Aq => $Index_File_Name, 
\&                                         \*(Aq\-write_flag\*(Aq => \*(AqWRITE\*(Aq);
\&    $inx\->make_index(@ARGV);
\&
\&    use Bio::Index::SwissPfam;
\&    use strict;
\&
\&    my $Index_File_Name = shift;
\&    my $inx = Bio::Index::SwissPfam\->new(\*(Aq\-filename\*(Aq => $Index_File_Name);
\&
\&    foreach my $id (@ARGV) {
\&        my $seq = $inx\->fetch($id); # Returns stream
\&             while( <$seq> ) {
\&                 if(/^>/) {
\&                       print;
\&                          last;
\&                 }
\&             }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SwissPfam is one of the flat files released with Pfam. This modules
provides a way of indexing this module.
.PP
Inherits functions for managing dbm files from Bio::Index::Abstract.pm, and
provides the basic funtionality for indexing SwissPfam files.  Only
retrieves FileStreams at the moment. Once we have something better
(ie, an object!), will use that. Heavily snaffled from Index::Fasta system of
James Gilbert. Note: for best results 'use strict'.
.SH "FEED_BACK"
.IX Header "FEED_BACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.SS "_index_file"
.IX Subsection "_index_file"
.Vb 8
\&  Title   : _index_file
\&  Usage   : $index\->_index_file( $file_name, $i )
\&  Function: Specialist function to index swisspfam format files.
\&            Is provided with a filename and an integer
\&            by make_index in its SUPER class.
\&  Example :
\&  Returns :
\&  Args    :
.Ve
.SS "fetch"
.IX Subsection "fetch"
.Vb 6
\&  Title   : fetch
\&  Usage   : $index\->fetch( $id )
\&  Function: Returns a Bio::Seq object from the index
\&  Example : $seq = $index\->fetch( \*(AqdJ67B12\*(Aq )
\&  Returns : Bio::Seq object
\&  Args    : ID
.Ve
