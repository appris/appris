.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::pICalculator 3pm"
.TH Bio::Tools::pICalculator 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::pICalculator \- calculate the isoelectric point of a protein
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Calculates the isoelectric point of a protein, the pH at which there
is no overall charge on the protein. Calculates the charge on a protein
at a given pH. Can use built-in sets of pK values or custom pK sets.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::Tools::pICalculator;
\&  use Bio::SeqIO;
\&
\&  my $in = Bio::SeqIO\->new( \-fh => \e*STDIN ,
\&                            \-format => \*(AqFasta\*(Aq );
\&
\&  my $calc = Bio::Tools::pICalculator\->new(\-places => 2,
\&                                           \-pKset => \*(AqEMBOSS\*(Aq);
\&
\&  while ( my $seq = $in\->next_seq ) {
\&     $calc\->seq($seq);
\&     my $iep = $calc\->iep;
\&     print sprintf( "%s\et%s\et%.2f\en",
\&                    $seq\->id,
\&                    $iep,
\&                    $calc\->charge_at_pH($iep) );
\&
\&     for( my $i = 0; $i <= 14; $i += 0.5 ){
\&        print sprintf( "pH = %.2f\etCharge = %.2f\en",
\&                       $i,
\&                       $calc\->charge_at_pH($i) );
\&     }
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://fields.scripps.edu/DTASelect/20010710\-pI\-Algorithm.pdf
http://emboss.sourceforge.net/apps/cvs/emboss/apps/iep.html
http://us.expasy.org/tools/pi_tool.html
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
There are various sources for the pK values of the amino acids. 
The set of pK values chosen will affect the pI reported.
.PP
The charge state of each residue is assumed to be independent of 
the others. Protein modifications (such as a phosphate group) that 
have a charge are ignored.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions 
preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Bugs"
.IX Subsection "Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the 
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Southern (mark_southern@merck.com). From an algorithm by David 
Tabb found at http://fields.scripps.edu/DTASelect/20010710\-pI\-Algorithm.pdf.
Modification for Bioperl, additional documentation by Brian Osborne.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, Merck & Co. Inc. All Rights Reserved. This module is
free software. It may be used, redistributed and/or modified under the terms
of the Perl Artistic License (see http://www.perl.com/perl/misc/Artistic.html)
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Private methods are usually preceded by a _.
.SS "desc"
.IX Subsection "desc"
.Vb 8
\& Title   : new
\& Usage   : Bio::Tools::pICalculator\->new
\& Function: Instantiates the Bio::Tools::pICalculator object
\& Example : $calc = Bio::Tools::pICalculator\->new( \-pKset => \e%pKvalues,
\&                                                  # a Bio::Seq object
\&                                                  \-seq => $seq,
\&                                                  \-places => 2 );
\&           or:
\&
\&           $calc = Bio::Tools::pICalculator\->new( \-pKset => \*(Aqstring\*(Aq,
\&                                                  # a Bio::Seq object
\&                                                  \-seq => $seq,
\&                                                  \-places => 1 );
\&
\&           Constructs a new pICalculator. Arguments are a flattened hash.
\&           Valid, optional keys are:
\&
\&           pKset \- A reference to a hash with key value pairs for the 
\&                   pK values of the charged amino acids. Required keys
\&                   are:
\&
\&                   N_term   C_term   K   R   H   D   E   C   Y
\&
\&           pKset \- A string ( \*(AqDTASelect\*(Aq or \*(AqEMBOSS\*(Aq ) that will 
\&                   specify an internal set of pK values to be used. The 
\&                   default is \*(AqEMBOSS\*(Aq
\&
\&           seq \- A Bio::Seq sequence object to analyze
\&
\&           places \- The number of decimal places to use in the
\&                    isoelectric point calculation. The default is 2.
\&
\& Returns : The description
\& Args    : The description or none
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 8
\& Title   : seq
\& Usage   : $calc\->seq($seqobj)
\& Function: Sets or returns the Bio::Seq used in the calculation
\& Example : $seqobj = Bio::Seq\->new(\-seq=>"gghhhmmm",\-id=>"GHM");
\&           $calc = Bio::Tools::pICalculator\->new;
\&           $calc\->seq($seqobj);
\& Returns : Bio::Seq object
\& Args    : Bio::Seq object or none
.Ve
.SS "pKset"
.IX Subsection "pKset"
.Vb 6
\& Title   : pKset
\& Usage   : $pkSet = $calc\->pKSet(\e%pKSet)
\& Function: Sets or returns the hash of pK values used in the calculation
\& Example : $calc\->pKset(\*(Aqemboss\*(Aq)
\& Returns : reference to pKset hash
\& Args    : The reference to a pKset hash, a string, or none. Examples:
\&
\&           pKset \- A reference to a hash with key value pairs for the
\&                   pK values of the charged amino acids. Required keys
\&                   are:
\&
\&                   N_term   C_term   K   R   H   D   E   C   Y
\&
\&           pKset \- A valid string ( \*(AqDTASelect\*(Aq or \*(AqEMBOSS\*(Aq ) that will 
\&                   specify an internal set of pK values to be used. The 
\&                   default is \*(AqEMBOSS\*(Aq
.Ve
.SS "iep"
.IX Subsection "iep"
.Vb 8
\& Title   : iep
\& Usage   : $calc\->iep
\& Function: Returns the isoelectric point
\& Example : $calc = Bio::Tools::pICalculator\->new(\-places => 2);
\&           $calc\->seq($seqobj);
\&           $iep = $calc\->iep;
\& Returns : The isoelectric point of the sequence in the Bio::Seq object
\& Args    : None
.Ve
.SS "charge_at_pH"
.IX Subsection "charge_at_pH"
.Vb 8
\& Title   : charge_at_pH
\& Usage   : $charge = $calc\->charge_at_pH($pH)
\& Function: Sets or gets the description of the sequence
\& Example : $calc = Bio::Tools::pICalculator\->new(\-places => 2);
\&           $calc\->seq($seqobj);
\&           $charge = $calc\->charge_at_ph("7");
\& Returns : The predicted charge at the given pH
\& Args    : pH
.Ve
