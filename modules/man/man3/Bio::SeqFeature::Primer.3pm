.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Primer 3pm"
.TH Bio::SeqFeature::Primer 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::Primer \- Primer Generic SeqFeature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::SeqFeature::Primer;
\&
\&  # Primer object with explicitly\-defined sequence object or sequence string
\&  my $primer = Bio::SeqFeature::Primer\->new( \-seq => \*(AqACGTAGCT\*(Aq );
\&  $primer\->display_name(\*(Aqtest_id\*(Aq);
\&  print "These are the details of the primer:\en".
\&        "Name:     ".$primer\->display_name."\en".  
\&        "Tag:      ".$primer\->primary_tag."\en".   # always \*(AqPrimer\*(Aq
\&        "Sequence: ".$primer\->seq\->seq."\en".
\&        "Tm:       ".$primer\->Tm."\en\en";            # melting temperature
\&
\&  # Primer object with implicit sequence object
\&  # It is a lighter approach for when the primer location on a template is known
\&  use Bio::Seq;
\&  my $template = Bio::Seq\->new( \-seq => \*(AqACGTAGCTCTTTTCATTCTGACTGCAACG\*(Aq );
\&  $primer   = Bio::SeqFeature::Primer\->new( \-start => 1, \-end =>5, \-strand => 1 );
\&  $template\->add_SeqFeature($primer);
\&  print "Primer sequence is: ".$primer\->seq\->seq."\en";
\&  # Primer sequence is \*(AqACGTA\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module handles \s-1PCR\s0 primer sequences. The Bio::SeqFeature::Primer object
is a Bio::SeqFeature::Subseq object that can additionally contain a primer
sequence and its coordinates on a template sequence. The \fBprimary_tag()\fR for this
object is 'Primer'. A method is provided to calculate the melting temperature Tm
of the primer. Bio::SeqFeature::Primer objects are useful to build
Bio::Seq::PrimedSeq amplicon objects such as the ones returned by
Bio::Tools::Primer3.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Edwards, redwards@utmem.edu
.PP
The original concept and much of the code was written by
Chad Matsalla, bioinformatics1@dieselwurks.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "\fBnew()\fP"
.IX Subsection "new()"
.Vb 6
\& Title   : new()
\& Usage   : my $primer = Bio::SeqFeature::Primer( \-seq => $seq_object );
\& Function: Instantiate a new Bio::SeqFeature::Primer object
\& Returns : A Bio::SeqFeature::Primer object
\& Args    : \-seq , a sequence object or a sequence string (optional)
\&           \-id  , the ID to give to the primer sequence, not feature (optional)
.Ve
.SS "\fBTm()\fP"
.IX Subsection "Tm()"
.Vb 10
\& Title   : Tm()
\& Usage   : my $tm = $primer\->Tm(\-salt => 0.05, \-oligo => 0.0000001);
\& Function: Calculate the Tm (melting temperature) of the primer
\& Returns : A scalar containing the Tm.
\& Args    : \-salt  : set the Na+ concentration on which to base the calculation
\&                    (default=0.05 molar).
\&         : \-oligo : set the oligo concentration on which to base the
\&                    calculation (default=0.00000025 molar).
\& Notes   : Calculation of Tm as per Allawi et. al Biochemistry 1997
\&           36:10581\-10594. Also see documentation at
\&           http://www.idtdna.com/Scitools/Scitools.aspx as they use this
\&           formula and have a couple nice help pages. These Tm values will be
\&           about are about 0.5\-3 degrees off from those of the idtdna web tool.
\&           I don\*(Aqt know why.
\&
\&           This was suggested by Barry Moore (thanks!). See the discussion on
\&           the bioperl\-l with the subject "Bio::SeqFeature::Primer Calculating
\&           the PrimerTM"
.Ve
.SS "Tm_estimate"
.IX Subsection "Tm_estimate"
.Vb 7
\& Title   : Tm_estimate
\& Usage   : my $tm = $primer\->Tm_estimate(\-salt => 0.05);
\& Function: Estimate the Tm (melting temperature) of the primer
\& Returns : A scalar containing the Tm.
\& Args    : \-salt set the Na+ concentration on which to base the calculation.
\& Notes   : This is only an estimate of the Tm that is kept in for comparative
\&           reasons. You should probably use Tm instead!
\&
\&           This Tm calculations are taken from the Primer3 docs: They are
\&           based on Bolton and McCarthy, PNAS 84:1390 (1962) 
\&           as presented in Sambrook, Fritsch and Maniatis,
\&           Molecular Cloning, p 11.46 (1989, CSHL Press).
\&
\&           Tm = 81.5 + 16.6(log10([Na+])) + .41*(%GC) \- 600/length
\&
\&           where [Na+] is the molar sodium concentration, %GC is the
\&           %G+C of the sequence, and length is the length of the sequence.
\&
\&           However.... I can never get this calculation to give me the same result
\&           as primer3 does. Don\*(Aqt ask why, I never figured it out. But I did 
\&           want to include a Tm calculation here because I use these modules for 
\&           other things besides reading primer3 output.
\&
\&           The primer3 calculation is saved as \*(AqPRIMER_LEFT_TM\*(Aq or \*(AqPRIMER_RIGHT_TM\*(Aq
\&           and this calculation is saved as $primer\->Tm so you can get both and
\&           average them!
.Ve
.SS "primary_tag, source_tag, location, start, end, strand..."
.IX Subsection "primary_tag, source_tag, location, start, end, strand..."
The documentation of Bio::SeqFeature::Generic describes all the methods that
Bio::SeqFeature::Primer object inherit.
