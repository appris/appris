.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::erpin 3pm"
.TH Bio::SearchIO::erpin 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SearchIO::erpin \- SearchIO\-based ERPIN parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # do not call this module directly. Use Bio::SearchIO.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an experimental SearchIO-based parser for output from
the erpin program.  It currently parses erpin output for \s-1ERPIN\s0
versions 4.2.5 and above; older versions may work but will not be supported.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Chris Fields"
.IX Header "AUTHOR - Chris Fields"
Email cjfields-at-uiuc-dot-edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::SearchIO::infernal\->new();
\& Function: Builds a new Bio::SearchIO::infernal object 
\& Returns : Bio::SearchIO::infernal
\& Args    : \-fh/\-file     => cmsearch (infernal) filename
\&           \-format       => \*(Aqerpin\*(Aq
\&           \-algorithm    => algorithm (default \*(AqInfernal\*(Aq)
\&           \-query_acc    => query accession, eg. Rfam accession (default undef)
\&           \-hsp_minscore => minimum HSP score cutoff
\&           \-version      => ERPIN version (not reported in output)
.Ve
.SS "next_result"
.IX Subsection "next_result"
.Vb 5
\& Title   : next_result
\& Usage   : my $hit = $searchio\->next_result;
\& Function: Returns the next Result from a search
\& Returns : Bio::Search::Result::ResultI object
\& Args    : none
.Ve
.SS "start_element"
.IX Subsection "start_element"
.Vb 5
\& Title   : start_element
\& Usage   : $eventgenerator\->start_element
\& Function: Handles a start element event
\& Returns : none
\& Args    : hashref with at least 2 keys \*(AqData\*(Aq and \*(AqName\*(Aq
.Ve
.SS "end_element"
.IX Subsection "end_element"
.Vb 5
\& Title   : start_element
\& Usage   : $eventgenerator\->end_element
\& Function: Handles an end element event
\& Returns : none
\& Args    : hashref with at least 2 keys, \*(AqData\*(Aq and \*(AqName\*(Aq
.Ve
.SS "element"
.IX Subsection "element"
.Vb 5
\& Title   : element
\& Usage   : $eventhandler\->element({\*(AqName\*(Aq => $name, \*(AqData\*(Aq => $str});
\& Function: Convenience method that calls start_element, characters, end_element
\& Returns : none
\& Args    : Hash ref with the keys \*(AqName\*(Aq and \*(AqData\*(Aq
.Ve
.SS "element_hash"
.IX Subsection "element_hash"
.Vb 8
\& Title   : element
\& Usage   : $eventhandler\->element_hash({\*(AqHsp_hit\-from\*(Aq => $start,
\&                                        \*(AqHsp_hit\-to\*(Aq   => $end,
\&                                        \*(AqHsp_score\*(Aq    => $lastscore});
\& Function: Convenience method that takes multiple simple data elements and
\&           maps to appropriate parameters
\& Returns : none
\& Args    : Hash ref with the mapped key (in %MAPPING) and value
.Ve
.SS "characters"
.IX Subsection "characters"
.Vb 5
\& Title   : characters
\& Usage   : $eventgenerator\->characters($str)
\& Function: Send a character events
\& Returns : none
\& Args    : string
.Ve
.SS "within_element"
.IX Subsection "within_element"
.Vb 7
\& Title   : within_element
\& Usage   : if( $eventgenerator\->within_element($element) ) {}
\& Function: Test if we are within a particular element
\&           This is different than \*(Aqin\*(Aq because within can be tested
\&           for a whole block.
\& Returns : boolean
\& Args    : string element name
.Ve
.SS "in_element"
.IX Subsection "in_element"
.Vb 7
\& Title   : in_element
\& Usage   : if( $eventgenerator\->in_element($element) ) {}
\& Function: Test if we are in a particular element
\&           This is different than \*(Aqwithin\*(Aq because \*(Aqin\*(Aq only 
\&           tests its immediate parent.
\& Returns : boolean
\& Args    : string element name
.Ve
.SS "start_document"
.IX Subsection "start_document"
.Vb 5
\& Title   : start_document
\& Usage   : $eventgenerator\->start_document
\& Function: Handle a start document event
\& Returns : none
\& Args    : none
.Ve
.SS "end_document"
.IX Subsection "end_document"
.Vb 5
\& Title   : end_document
\& Usage   : $eventgenerator\->end_document
\& Function: Handles an end document event
\& Returns : Bio::Search::Result::ResultI object
\& Args    : none
.Ve
.SS "result_count"
.IX Subsection "result_count"
.Vb 5
\& Title   : result_count
\& Usage   : my $count = $searchio\->result_count
\& Function: Returns the number of results we have processed
\& Returns : integer
\& Args    : none
.Ve
.SS "query_accession"
.IX Subsection "query_accession"
.Vb 6
\& Title   : query_accession
\& Usage   : my $acc = $parser\->query_accession();
\& Function: Get/Set query (model) accession; Infernal currently does not output
\&           the accession number (Rfam accession #)
\& Returns : String (accession)
\& Args    : [optional] String (accession)
.Ve
.SS "hsp_minscore"
.IX Subsection "hsp_minscore"
.Vb 5
\& Title   : hsp_minscore
\& Usage   : my $cutoff = $parser\->hsp_minscore();
\& Function: Get/Set min bit score cutoff (for generating Hits/HSPs)
\& Returns : score (number)
\& Args    : [optional] score (number)
.Ve
.SS "algorithm_version"
.IX Subsection "algorithm_version"
.Vb 5
\& Title   : algorithm_version
\& Usage   : my $ver = $parser\->algorithm_version();
\& Function: Get/Set algorithm version (not defined in RNAMotif output)
\& Returns : String (accession)
\& Args    : [optional] String (accession)
.Ve
