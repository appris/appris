.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::Scoring 3pm"
.TH Bio::Matrix::Scoring 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::Scoring \- Object which can hold scoring matrix information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Matrix::Scoring;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An object which can handle \s-1AA\s0 or \s-1NT\s0 scoring matrix information.  Some
transformation properties are available too.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Matrix::Scoring\->new();
\& Function: Builds a new Bio::Matrix::Scoring object 
\& Returns : an instance of Bio::Matrix::Scoring
\& Args    :
.Ve
.SS "entropy"
.IX Subsection "entropy"
.Vb 6
\& Title   : entropy
\& Usage   : $obj\->entropy($newval)
\& Function: 
\& Example : 
\& Returns : value of entropy (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "expected_score"
.IX Subsection "expected_score"
.Vb 6
\& Title   : expected_score
\& Usage   : $obj\->expected_score($newval)
\& Function: 
\& Example : 
\& Returns : value of expected (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "scale"
.IX Subsection "scale"
.Vb 6
\& Title   : scale
\& Usage   : $obj\->scale($newval)
\& Function: 
\& Example : 
\& Returns : value of scale (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "scale_value"
.IX Subsection "scale_value"
.Vb 6
\& Title   : scale_value
\& Usage   : $obj\->scale_value($newval)
\& Function: 
\& Example : 
\& Returns : value of scale_value (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "description"
.IX Subsection "description"
.Vb 6
\& Title   : description
\& Usage   : $obj\->description($newval)
\& Function: 
\& Example : 
\& Returns : value of description (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "database"
.IX Subsection "database"
.Vb 6
\& Title   : database
\& Usage   : $obj\->database($newval)
\& Function: 
\& Example : 
\& Returns : value of database (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "lowest_score"
.IX Subsection "lowest_score"
.Vb 6
\& Title   : lowest_score
\& Usage   : $obj\->lowest_score($newval)
\& Function: 
\& Example : 
\& Returns : value of lowest_score (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "highest_score"
.IX Subsection "highest_score"
.Vb 6
\& Title   : highest_score
\& Usage   : $obj\->highest_score($newval)
\& Function: 
\& Example : 
\& Returns : value of highest_score (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "lambda"
.IX Subsection "lambda"
.Vb 6
\& Title   : lambda
\& Usage   : $obj\->lambda($newval)
\& Function: 
\& Example : 
\& Returns : value of lambda (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "H"
.IX Subsection "H"
.Vb 6
\& Title   : H
\& Usage   : $obj\->H($newval)
\& Function: 
\& Example : 
\& Returns : value of H (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
