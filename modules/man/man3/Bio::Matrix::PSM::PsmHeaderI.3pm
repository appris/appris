.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::PsmHeaderI 3pm"
.TH Bio::Matrix::PSM::PsmHeaderI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::PSM::PsmHeaderI \- handles the header data from a PSM file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Bio::Matrix::PSM::IO;
\& #Obtain an Bio::Matrix::PSM::IO object:
\& my $psmIO= Bio::Matrix::PSM::IO\->new(\-file=>$file, \-format=>\*(Aqmast\*(Aq);
\&
\& #Get some general data about the file you are parsing:
\& my $release=$psmIO\->release;
\& my $version=$psmIO\->version;
\&
\& print "This analysis was performed using MAST version $version, release $release\en";
\&
\& #Now let\*(Aqs see what are the consensus sequences of the motifs fed as an input:
\& my %seq=$psmIO\->seq;
\&
\& #let\*(Aqs cycle through all consensus sequences now:
\&
\& foreach my $id ($psmIO\->hid) {
\&   print "Motif $id is \et",$seq{$id},"\en";
\& }
\&
\&  #Finally look at the stuff we do not parse:
\&  my @inputfile=grep(/datafile/i,$psmIO\->unstructured);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generally you should not use this object directly, you can access the
information through a \s-1PSM\s0 driver (See Bio::Matrix::PSM::IO). It is
handling the header data from a \s-1PSM\s0 file which may be very
different. This means that some of the methods will return undef
naturally, because this information is not present in the file which
is parsed. Some important data might be left over in the unstructured
part, and you might have to parse it yourself. I will try to
\&'structure' this header more in the near future.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Stefan Kirov"
.IX Header "AUTHOR - Stefan Kirov"
Email skirov@utk.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $header= Bio::Matrix::PSM::PsmHeader\->new
\&            ( \-seq=>\e%seq, \-mid=>\e%mid, \-width=>\e%width,
\&              \-instances=>\e%instances, \-header=>\e@header, \-type=>\*(Aqmast\*(Aq);
\& Function: Creates a new Bio::Matrix::PSM::PsmHeader object
\& Throws  :
\& Example :
\& Returns :  Bio::Matrix::PSM::PsmHeaderI object
\& Args    :  hash
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 10
\& Title   : seq
\& Usage   : my %seq= $header\->seq();
\& Function: Returns the sequence data as a hash, indexed by a 
\&           sequence ID (motif id or accession number)
\&           In case the input data is a motif it would return the 
\&           consenus seq for each of them (mast).
\& Throws  :
\& Example :
\& Returns :  hash
\& Args    :
.Ve
.SS "hid"
.IX Subsection "hid"
.Vb 7
\& Title   : hid
\& Usage   : my @ids= $header\->hid();
\& Function: Returns array with the motif/instance ids
\& Throws  :
\& Example :
\& Returns :  array
\& Args    :
.Ve
.SS "length"
.IX Subsection "length"
.Vb 8
\& Title   : length
\& Usage   : my %length= $header\->length();
\& Function: Returns the length of the input sequence or motifs as a hash, indexed
\&           by a sequence ID (motif id or accession number)
\& Throws  :
\& Example :
\& Returns :  hash
\& Args    :
.Ve
.SS "instances"
.IX Subsection "instances"
.Vb 8
\& Title   : instances
\& Usage   : my %instances= $header\->length();
\& Function: Returns the instance, used  as a hash, indexed
\&           by a sequence ID (motif id or accession number)
\& Throws  :
\& Example :
\& Returns :  hash of Bio::Matrix::PSM::InstanceSite objects
\& Args    :
.Ve
.SS "weights"
.IX Subsection "weights"
.Vb 8
\& Title   : weights
\& Usage   : my %weights= $header\->weights();
\& Function: Returns the weights of the input sequence as a hash, indexed
\&           by a sequence ID
\& Throws  :
\& Example :
\& Returns :  hash
\& Args    :
.Ve
.SS "unstuctured"
.IX Subsection "unstuctured"
.Vb 8
\& Title   : unstuctured
\& Usage   : my @unstructured= $header\->unstuctured();
\& Function: Returns the unstructured data in the header as an array, one line per
\&           array element, all control symbols are removed with \eW
\& Throws  :
\& Example :
\& Returns :   array
\& Args    :
.Ve
.SS "version"
.IX Subsection "version"
.Vb 7
\& Title   : version
\& Usage   : my $version= $header\->version;
\& Function: Returns the version of the file being parsed if such exists
\& Throws  :
\& Example :
\& Returns :  string
\& Args    :
.Ve
.SS "revision"
.IX Subsection "revision"
.Vb 7
\& Title   : revision
\& Usage   : my $revision= $header\->revision;
\& Function: Returns the revision of the file being parsed if such exists
\& Throws  :
\& Example :
\& Returns :  string
\& Args    :
.Ve
.SS "_check"
.IX Subsection "_check"
.Vb 7
\& Title   : _check
\& Usage   : if ($self\->_check(\*(Aqweights\*(Aq) { #do something} else {return 0;}
\& Function: Checks if the method called is aplicable to the file format
\& Throws  :
\& Example :
\& Returns :  boolean
\& Args    :  string
.Ve
