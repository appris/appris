.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Seq::BaseSeqProcessor 3pm"
.TH Bio::Seq::BaseSeqProcessor 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Seq::BaseSeqProcessor \- Base implementation for a SequenceProcessor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # you need to derive your own processor from this one
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This provides just a basic framework for implementations of
Bio::Factory::SequenceProcessorI.
.PP
Essentially what it does is support a parameter to \fBnew()\fR to set
sequence factory and source stream, and a \fBnext_seq()\fR implementation
that will use a queue to be filled by a class overriding
\&\fBprocess_seq()\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::Seq::BaseSeqProcessor\->new();
\& Function: Builds a new Bio::Seq::BaseSeqProcessor object 
\& Returns : an instance of Bio::Seq::BaseSeqProcessor
\& Args    : Named parameters. Currently supported are
\&             \-seqfactory  the Bio::Factory::SequenceFactoryI object to use
\&             \-source_stream the Bio::Factory::SequenceStreamI object to
\&                          which we are chained
.Ve
.SH "Bio::Factory::SequenceProcessorI methods"
.IX Header "Bio::Factory::SequenceProcessorI methods"
.SS "source_stream"
.IX Subsection "source_stream"
.Vb 4
\& Title   : source_stream
\& Usage   : $obj\->source_stream($newval)
\& Function: Get/set the source sequence stream for this sequence
\&           processor.
\&
\& Example : 
\& Returns : A Bio::Factory::SequenceStreamI compliant object
\& Args    : on set, new value (a Bio::Factory::SequenceStreamI compliant
\&           object)
.Ve
.SH "Bio::Factory::SequenceStreamI methods"
.IX Header "Bio::Factory::SequenceStreamI methods"
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 3
\& Title   : next_seq
\& Usage   : $seq = stream\->next_seq
\& Function: Reads the next sequence object from the stream and returns it.
\&
\&           This implementation will obtain objects from the source
\&           stream as necessary and pass them to process_seq() for
\&           processing. This method will return the objects one at a
\&           time that process_seq() returns.
\&
\& Returns : a Bio::Seq sequence object
\& Args    : none
.Ve
.PP
See Bio::Factory::SequenceStreamI::next_seq
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 4
\& Title   : write_seq
\& Usage   : $stream\->write_seq($seq)
\& Function: Writes the result(s) of processing the sequence object into
\&           the stream.
\&
\&           You need to override this method in order not to alter
\&           (process) sequence objects before output.
\&
\& Returns : 1 for success and 0 for error. The method stops attempting
\&           to write objects after the first error returned from the
\&           source stream. Otherwise the return value is the value
\&           returned from the source stream from writing the last
\&           object resulting from processing the last sequence object
\&           given as argument.
\&
\& Args    : Bio::SeqI object, or an array of such objects
.Ve
.SS "sequence_factory"
.IX Subsection "sequence_factory"
.Vb 5
\& Title   : sequence_factory
\& Usage   : $seqio\->sequence_factory($seqfactory)
\& Function: Get the Bio::Factory::SequenceFactoryI
\& Returns : Bio::Factory::SequenceFactoryI
\& Args    : none
.Ve
.SS "object_factory"
.IX Subsection "object_factory"
.Vb 7
\& Title   : object_factory
\& Usage   : $obj\->object_factory($newval)
\& Function: This is an alias to sequence_factory with a more generic name.
\& Example : 
\& Returns : a L<Bio::Factory::ObjectFactoryI> compliant object
\& Args    : on set, new value (a L<Bio::Factory::ObjectFactoryI> 
\&           compliant object or undef, optional)
.Ve
.SS "close"
.IX Subsection "close"
.Vb 7
\& Title   : close
\& Usage   :
\& Function: Closes the stream. We override this here in order to cascade
\&           to the source stream.
\& Example :
\& Returns : 
\& Args    : none
.Ve
.SH "To be overridden by a derived class"
.IX Header "To be overridden by a derived class"
.SS "process_seq"
.IX Subsection "process_seq"
.Vb 5
\& Title   : process_seq
\& Usage   :
\& Function: This is the method that is supposed to do the actual
\&           processing. It needs to be overridden to do what you want
\&           it to do.
\&
\&           Generally, you do not have to override or implement any other
\&           method to derive your own sequence processor.
\&
\&           The implementation provided here just returns the unaltered
\&           input sequence and hence is not very useful other than
\&           serving as a neutral default processor.
\&
\& Example :
\& Returns : An array of zero or more Bio::PrimarySeqI (or derived
\&           interface) compliant object as the result of processing the
\&           input sequence.
\& Args    : A Bio::PrimarySeqI (or derived interface) compliant object
\&           to be processed.
.Ve
