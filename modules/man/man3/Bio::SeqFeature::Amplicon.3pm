.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Amplicon 3pm"
.TH Bio::SeqFeature::Amplicon 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::Amplicon \- Amplicon feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # Amplicon with explicit sequence
\&  use Bio::SeqFeature::Amplicon;
\&  my $amplicon = Bio::SeqFeature::Amplicon\->new( 
\&      \-seq        => $seq_object,
\&      \-fwd_primer => $primer_object_1,
\&      \-rev_primer => $primer_object_2,
\&  );
\&
\&  # Amplicon with implicit sequence
\&  use Bio::Seq;
\&  my $template = Bio::Seq\->new( \-seq => \*(AqAAAAACCCCCGGGGGTTTTT\*(Aq );
\&  $amplicon = Bio::SeqFeature::Amplicon\->new(
\&      \-start => 6,
\&      \-end   => 15,
\&  );
\&  $template\->add_SeqFeature($amplicon);
\&  print "Amplicon start   : ".$amplicon\->start."\en";
\&  print "Amplicon end     : ".$amplicon\->end."\en";
\&  print "Amplicon sequence: ".$amplicon\->seq\->seq."\en";
\&  # Amplicon sequence should be \*(AqCCCCCGGGGG\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqFeature::Amplicon extends Bio::SeqFeature::Subseq to represent an
amplicon sequence and optional primer sequences.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via 
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Florent Angly <florent.angly@gmail.com>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new()
\& Usage   : my $amplicon = Bio::SeqFeature::Amplicon( \-seq => $seq_object );
\& Function: Instantiate a new Bio::SeqFeature::Amplicon object
\& Args    : \-seq        , the sequence object or sequence string of the amplicon (optional)
\&           \-fwd_primer , a Bio::SeqFeature primer object with specified location on amplicon (optional)
\&           \-rev_primer , a Bio::SeqFeature primer object with specified location on amplicon (optional)
\& Returns : A Bio::SeqFeature::Amplicon object
.Ve
.SS "fwd_primer"
.IX Subsection "fwd_primer"
.Vb 8
\& Title   : fwd_primer
\& Usage   : my $primer = $feat\->fwd_primer();
\& Function: Get or set the forward primer. When setting it, the primary tag
\&           \*(Aqfwd_primer\*(Aq is added to the primer and its start, stop and strand
\&           attributes are set if needed, assuming that the forward primer is
\&           at the beginning of the amplicon and the reverse primer at the end.
\& Args    : A Bio::SeqFeature::Primer object (optional)
\& Returns : A Bio::SeqFeature::Primer object
.Ve
.SS "rev_primer"
.IX Subsection "rev_primer"
.Vb 6
\& Title   : rev_primer
\& Usage   : my $primer = $feat\->rev_primer();
\& Function: Get or set the reverse primer. When setting it, the primary tag
\&          \*(Aqrev_primer\*(Aq is added to the primer.
\& Args    : A Bio::SeqFeature::Primer object (optional)
\& Returns : A Bio::SeqFeature::Primer object
.Ve
