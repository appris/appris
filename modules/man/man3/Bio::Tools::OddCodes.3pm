.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::OddCodes 3pm"
.TH Bio::Tools::OddCodes 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::OddCodes \- Object holding alternative alphabet coding for
one protein sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # Take a sequence object from eg, an inputstream, and creates an
\&  # object for the purposes of rewriting that sequence in another
\&  # alphabet.  These are abbreviated amino acid sequence alphabets,
\&  # designed to simplify the statistical aspects of analysing protein
\&  # sequences, by reducing the combinatorial explosion of the
\&  # 20\-letter alphabet.  These abbreviated alphabets range in size
\&  # from 2 to 8.
\&
\&  # Creating the OddCodes object, eg:
\&
\&        my $inputstream = Bio::SeqIO\->new( \*(Aq\-file\*(Aq => "seqfile",
\&                                           \*(Aq\-format\*(Aq => \*(AqFasta\*(Aq);
\&        my $seqobj = $inputstream\->next_seq();
\&        my $oddcode_obj = Bio::Tools::Oddcodes\->new(\-seq => $seqobj);
\&
\&  # or:
\&
\&        my $seqobj = Bio::PrimarySeq\->new
\&              (\-seq=>\*(Aq[cut and paste a sequence here]\*(Aq,
\&               \-alphabet => \*(Aqprotein\*(Aq,
\&               \-id => \*(Aqtest\*(Aq);
\&        my $oddcode_obj  =  Bio::Tools::OddCodes\->new(\-seq => $seqobj);
\&
\&  # do the alternative coding, returning the answer as a reference to
\&  # a string
\&
\&        my $output = $oddcode_obj\->structural();
\&        my $output = $oddcode_obj\->chemical();
\&        my $output = $oddcode_obj\->functional();
\&        my $output = $oddcode_obj\->charge();
\&        my $output = $oddcode_obj\->hydrophobic();
\&        my $output = $oddcode_obj\->Dayhoff();
\&        my $output = $oddcode_obj\->Sneath();
\&        my $output = $oddcode_obj\->Stanfel();
\&
\&
\&  # display sequence in new form, eg:
\&
\&        my $new_coding = $$output;
\&        print "\en$new_coding";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Tools::Oddcodes is a welterweight object for rewriting a protein
sequence in an alternative alphabet.  Eight of these are provided, ranging
from the the 2\-letter hydrophobic alphabet, to the 8\-letter chemical
alphabet.  These are useful for the statistical analysis of protein
sequences since they can partially avoid the combinatorial explosion
produced by the full 20\-letter alphabet (eg. 400 dimers, 8000 trimers
etc.)
.PP
The objects will print out a warning if the input sequence is not a
protein. If you know what you are doing, you can silence the warning
by setting \fBverbose()\fR to a negative value.
.PP
See \s-1SYNOPSIS\s0 above for object creation code.
.SH "REFERENCES"
.IX Header "REFERENCES"
Stanfel \s-1LE\s0 (1996) A new approach to clustering the amino acids.  J. theor.
Biol. 183, 195\-205.
.PP
Karlin S, Ost F and Blaisdell \s-1BE\s0 (1989)  Patterns in \s-1DNA\s0 and amino acid
sequences and their statistical significance.  Chapter 6 of: Mathematical
Methods for \s-1DNA\s0 Sequences.  Waterman \s-1MS\s0 (ed.)  \s-1CRC\s0 Press, Boca Raton , \s-1FL.\s0
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Derek Gatherer
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "structural"
.IX Subsection "structural"
.Vb 7
\& Title   : structural
\& Usage   : $output = $oddcode_obj\->structural();
\& Function: turns amino acid sequence into 3\-letter structural alphabet
\&         : A (ambivalent), E (external), I (internal)
\& Example : a sequence ACDEFGH will become AAEEIAE
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "functional"
.IX Subsection "functional"
.Vb 7
\& Title   : functional
\& Usage   : $output = $oddcode_obj\->functional();
\& Function: turns amino acid sequence into 4\-letter functional alphabet
\&         : A (acidic), C (basic), H (hydrophobic), P (polar)
\& Example : a sequence ACDEFGH will become HPAAHHC
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "hydrophobic"
.IX Subsection "hydrophobic"
.Vb 7
\& Title   : hydrophobic
\& Usage   : $output = $oddcode_obj\->hydrophobic();
\& Function: turns amino acid sequence into 2\-letter hydrophobicity alphabet
\&         : O (hydrophobic), I (hydrophilic)
\& Example : a sequence ACDEFGH will become OIIIOII
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "Dayhoff"
.IX Subsection "Dayhoff"
.Vb 8
\& Title   : Dayhoff
\& Usage   : $output = $oddcode_obj\->Dayhoff();
\& Function: turns amino acid sequence into 6\-letter Dayhoff alphabet
\& Example : a sequence ACDEFGH will become CADDGCE
\&         : A (=C),   C (=AGPST), D (=DENQ),
\&         : E (=HKR), F (=ILMV),  G (=FWY)
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "Sneath"
.IX Subsection "Sneath"
.Vb 8
\& Title   : Sneath
\& Usage   : $output = $oddcode_obj\->Sneath();
\& Function: turns amino acid sequence into 7\-letter Sneath alphabet
\& Example : a sequence ACDEFGH will become CEFFHCF
\&         : A (=ILV), C (=AGP), D (=MNQ), E (=CST),
\&         : F (=DE),  G (=KR),  H (=FHWY)
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "Stanfel"
.IX Subsection "Stanfel"
.Vb 7
\& Title   : Stanfel
\& Usage   : $output = $oddcode_obj\->Stanfel();
\& Function: turns amino acid sequence into 4\-letter Stanfel alphabet
\& Example : a sequence ACDEFGH will become AACCDAE
\&         : A (=ACGILMPSTV), C (=DENQ), D (=FWY), E (=HKR)
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "chemical"
.IX Subsection "chemical"
.Vb 8
\& Title   : chemical
\& Usage   : $output = $oddcode_obj\->chemical();
\& Function: turns amino acid sequence into 8\-letter chemical alphabet
\&         : A (acidic), L (aliphatic), M (amide), R (aromatic)
\&         : C (basic),  H (hydroxyl),  I (imino), S (sulphur)
\& Example : a sequence ACDEFGH will become LSAARAC
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
.SS "charge"
.IX Subsection "charge"
.Vb 7
\& Title   : charge
\& Usage   : $output = $oddcode_obj\->charge();
\& Function: turns amino acid sequence into 3\-letter charge alphabet
\& Example : a sequence ACDEFGH will become NNAANNC
\&         : A (negative; NOT anode), C (positive; NOT cathode), N (neutral)
\& Returns : Reference to the new sequence string
\& Args    : none
.Ve
