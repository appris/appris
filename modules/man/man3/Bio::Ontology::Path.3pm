.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::Path 3pm"
.TH Bio::Ontology::Path 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Ontology::Path \- a path for an ontology term graph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  $path = Bio::Ontology::Path\->new( \-identifier     => "16847",
\&                                    \-subject_term   => $subj,
\&                                    \-object_term    => $obj,
\&                                    \-predicate_term => $pred,
\&                                    \-distance       => 3 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a basic implementation of Bio::Ontology::PathI.
.PP
Essiantially this is a very thin extension of
Bio::Ontology::Relationship. It basically adds a method \fBdistance()\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& Hilmar Lapp <hlapp@gmx.net>
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $rel = Bio::Ontology::Path\->new(\-identifier   => "16847",
\&                                           \-subject_term => $subject,
\&                                           \-object_term  => $object,
\&                                           \-predicate_term => $type );
\&                                           \-distance     => 3 );
\& Function: Creates a new Bio::Ontology::Path.
\& Returns : A new Bio::Ontology::Path object.
\& Args    : \-identifier     => the identifier of this relationship [scalar]
\&           \-subject_term   => the subject term [Bio::Ontology::TermI]
\&           \-object_term    => the object term [Bio::Ontology::TermI]  
\&           \-predicate_term => the predicate term [Bio::Ontology::TermI]
\&           \-distance       => the distance between subject and object
.Ve
.SS "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $rel\->init();   
\& Function: Initializes this Path to all undef.
\& Returns : 
\& Args    :
.Ve
.SS "distance"
.IX Subsection "distance"
.Vb 4
\& Title   : distance
\& Usage   : $obj\->distance($newval)
\& Function: Get/set the distance between the two terms connected
\&           by this path.
\&
\&           Note that modifying the distance may not be meaningful. The
\&           implementation here is not connected to any graph engine,
\&           so changing an existing value may simply render the
\&           attribute\*(Aqs value wrong.
\&
\& Example : 
\& Returns : value of distance (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 5
\& Title   : to_string()
\& Usage   : print $rel\->to_string();
\& Function: to_string method for Path.
\& Returns : A string representation of this Path.
\& Args    :
.Ve
