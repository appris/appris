.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::game 3pm"
.TH Bio::SeqIO::game 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::game \-\- a class for parsing and writing game\-XML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is not used directly, use SeqIO.
.PP
.Vb 1
\& use Bio::SeqIO;
\&
\& my $in = Bio::SeqIO\->new ( \-file    => \*(Aqfile.xml\*(Aq, 
\&                            \-format  =>  \*(Aqgame\*(Aq,
\&                            \-verbose => 1 );
\&
\& my $seq = $in\->next_seq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqIO::game will parse game \s-1XML\s0 (version 1.2) or write game \s-1XML\s0 from 
a Bio::SeqI implementing object.  The \s-1XML\s0 is readable by the genome 
annotation editor 'Apollo' (www.gmod.org).  It is not backwards compatible 
with the previous version of game \s-1XML.\s0  The \s-1XML\s0 format currently used by 
Apollo contains a single 'main' annotated sequence, so we will only get a 
single annotated sequence in the stream when parsing a game-XML record.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.
.PP
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution.
.PP
Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sheldon McKay"
.IX Header "AUTHOR - Sheldon McKay"
Email mckays@cshl.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : my $seq = $seqio\->next_seq;
\& Function: get the main sequence object
\& Returns : a Bio::Seq::RichSeq object
\& Args    : none
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $seqio\->write_seq($seq)
\& Function: writes a sequence object as game XML
\& Returns : nothing
\& Args    : a Bio::SeqI compliant object
.Ve
.SS "_getseqs"
.IX Subsection "_getseqs"
.Vb 6
\& Title   : _getseqs
\& Usage   : $self\->_getseqs
\& Function: An internal method to invoke the PerlSAX XML handler and get
\&           the sequence objects
\& Returns : an reference to an array with sequence object and annotations
\& Args    : none
.Ve
.SS "_hide_dna"
.IX Subsection "_hide_dna"
.Vb 5
\& Title   : _hide_dna
\& Usage   : $seqio\->_hide_dna
\& Function: Hide the DNA for really huge sequences
\& Returns : nothing 
\& Args    : none
.Ve
