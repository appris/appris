.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::SimilarityPair 3pm"
.TH Bio::SeqFeature::SimilarityPair 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::SimilarityPair \- Sequence feature based on the similarity
                  of two sequences.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $sim_pair = Bio::SeqFeature::SimilarityPair\->from_searchResult($blastHit);
\&
\&  $sim = $sim_pair\->query(); # a Bio::SeqFeature::Similarity object \- the query
\&  $sim = $sim_pair\->hit();   # dto \- the hit.
\&
\&  # some properties for the similarity pair
\&  $expect = $sim_pair\->significance();
\&  $score = $sim_pair\->score();
\&  $bitscore = $sim_pair\->bits();
\&
\&  # this will not write the description for the sequence (only its name)
\&  print $sim_pair\->query()\->gff_string(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Lightweight similarity search result as a pair of Similarity
features. This class inherits off Bio::SeqFeature::FeaturePair and
therefore implements Bio::SeqFeatureI, whereas the two features of the
pair are descendants of Bio::SeqFeature::Generic, with better support
for representing similarity search results in a cleaner way.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net or hilmar.lapp@pharma.novartis.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $similarityPair = Bio::SeqFeature::SimilarityPair\->new
\&                                 (\-hit   => $hit,
\&                                  \-query => $query,
\&                                  \-source => \*(Aqblastp\*(Aq);
\& Function: Initializes a new SimilarityPair object
\& Returns : Bio::SeqFeature::SimilarityPair
\& Args    : \-query => The query in a Feature pair 
\&           \-hit   => (formerly \*(Aq\-subject\*(Aq) the subject/hit in a Feature pair
.Ve
.SS "query"
.IX Subsection "query"
.Vb 6
\& Title   : query
\& Usage   : $query_feature = $obj\->query();
\&           $obj\->query($query_feature);
\& Function: The query object for this similarity pair
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] Bio::SeqFeature::Similarity
.Ve
.PP
See Bio::SeqFeature::Similarity, Bio::SeqFeature::FeaturePair
.SS "subject"
.IX Subsection "subject"
.Vb 6
\& Title   : subject
\& Usage   : $sbjct_feature = $obj\->subject();
\&           $obj\->subject($sbjct_feature);
\& Function: Get/Set Subject for a SimilarityPair 
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] Bio::SeqFeature::Similarity
.Ve
.SS "hit"
.IX Subsection "hit"
.Vb 6
\& Title   : hit
\& Usage   : $sbjct_feature = $obj\->hit();
\&           $obj\->hit($sbjct_feature);
\& Function: Get/Set Hit for a SimilarityPair 
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] Bio::SeqFeature::Similarity
.Ve
.SS "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $source = $obj\->source_tag(); # i.e., program
\&           $obj\->source_tag($evalue);
\& Function: Gets the source tag (program name typically) for a feature 
\& Returns : string
\& Args    : [optional] string
.Ve
.SS "significance"
.IX Subsection "significance"
.Vb 6
\& Title   : significance
\& Usage   : $evalue = $obj\->significance();
\&           $obj\->significance($evalue);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.SS "score"
.IX Subsection "score"
.Vb 6
\& Title   : score
\& Usage   : $score = $obj\->score();
\&           $obj\->score($value);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.SS "bits"
.IX Subsection "bits"
.Vb 6
\& Title   : bits
\& Usage   : $bits = $obj\->bits();
\&           $obj\->bits($value);
\& Function: 
\& Returns : 
\& Args    :
.Ve
