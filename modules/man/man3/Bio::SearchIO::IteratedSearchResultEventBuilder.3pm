.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::IteratedSearchResultEventBuilder 3pm"
.TH Bio::SearchIO::IteratedSearchResultEventBuilder 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SearchIO::IteratedSearchResultEventBuilder \- Event Handler for
SearchIO events.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# Do not use this object directly, this object is part of the SearchIO
# event based parsing system.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object handles Search Events generated by the SearchIO classes
and build appropriate Bio::Search::* objects from them.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Steve Chervitz"
.IX Header "AUTHOR - Steve Chervitz"
Email sac\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Parts of code based on SearchResultEventBuilder by Jason Stajich
jason@bioperl.org
.PP
Sendu Bala, bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::SearchIO::IteratedSearchResultEventBuilder\->new();
\& Function: Builds a new Bio::SearchIO::IteratedSearchResultEventBuilder object
\& Returns : Bio::SearchIO::IteratedSearchResultEventBuilder
\& Args    : \-hsp_factory    => Bio::Factory::ObjectFactoryI
\&           \-hit_factory    => Bio::Factory::ObjectFactoryI
\&           \-result_factory => Bio::Factory::ObjectFactoryI
\&           \-iteration_factory => Bio::Factory::ObjectFactoryI
\&           \-inclusion_threshold => e\-value threshold for inclusion in the
\&                                   PSI\-BLAST score matrix model (blastpgp)
\&           \-signif      => float or scientific notation number to be used
\&                           as a P\- or Expect value cutoff
\&           \-score       => integer or scientific notation number to be used
\&                           as a blast score value cutoff
\&           \-bits        => integer or scientific notation number to be used
\&                           as a bit score value cutoff
\&           \-hit_filter  => reference to a function to be used for
\&                           filtering hits based on arbitrary criteria.
.Ve
.PP
See Bio::SearchIO::SearchResultEventBuilder for more information
.SS "will_handle"
.IX Subsection "will_handle"
.Vb 5
\& Title   : will_handle
\& Usage   : if( $handler\->will_handle($event_type) ) { ... }
\& Function: Tests if this event builder knows how to process a specific event
\& Returns : boolean
\& Args    : event type name
.Ve
.SS "\s-1SAX\s0 methods"
.IX Subsection "SAX methods"
.SS "start_result"
.IX Subsection "start_result"
.Vb 5
\& Title   : start_result
\& Usage   : $handler\->start_result($resulttype)
\& Function: Begins a result event cycle
\& Returns : none
\& Args    : Type of Report
.Ve
.SS "start_iteration"
.IX Subsection "start_iteration"
.Vb 5
\& Title   : start_iteration
\& Usage   : $handler\->start_iteration()
\& Function: Starts an Iteration event cycle
\& Returns : none
\& Args    : type of event and associated hashref
.Ve
.SS "end_iteration"
.IX Subsection "end_iteration"
.Vb 5
\& Title   : end_iteration
\& Usage   : $handler\->end_iteration()
\& Function: Ends an Iteration event cycle
\& Returns : Bio::Search::Iteration object
\& Args    : type of event and associated hashref
.Ve
