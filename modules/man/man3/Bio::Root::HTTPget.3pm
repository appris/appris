.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Root::HTTPget 3pm"
.TH Bio::Root::HTTPget 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Root::HTTPget \- module for fallback HTTP get operations when 
LWP:: is unavailable
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Root::HTTPget;
\& my $web = Bio::Root::HTTPget\->new();
\&
\& my $response = $web\->get(\*(Aqhttp://localhost\*(Aq);
\& $response    = $web\->get(\*(Aqhttp://localhost/images\*(Aq);
\&
\& $response    = eval { $web\->get(\*(Aqhttp://fred:secret@localhost/ladies_only/\*(Aq)
\&                     } or warn $@;
\&
\& $response    = eval { $web\->get(\*(Aqhttp://jeff:secret@localhost/ladies_only/\*(Aq)
\&                     } or warn $@;
\&
\& $response    = $web\->get(\*(Aqhttp://localhost/images/navauthors.gif\*(Aq);
\& $response    = $web\->get(\-url=>\*(Aqhttp://www.google.com\*(Aq,
\&                                    \-proxy=>\*(Aqhttp://www.modperl.com\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is basically an last-chance module for doing network \s-1HTTP\s0 get
requests in situations where more advanced external \s-1CPAN\s0 modules such
as \s-1LWP::\s0 are not installed.
.PP
The particular reason this module was developed was so that the Open
Bio Database Access code can fallback to fetching the default registry
files from http://open\-bio.org/registry/ without having to depend on
external dependencies like Bundle::LWP for network \s-1HTTP\s0 access.
.PP
The core of this module was written by Lincoln Stein. It can handle proxies
and HTTP-based proxy authentication.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
# Please direct questions and support issues to \fIbioperl\-l@bioperl.org\fR
.PP
.Vb 1
\& Cared for by Chris Dagdigian <dag@sonsorol.org>
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "get"
.IX Subsection "get"
.Vb 9
\& Title   : get
\& Usage   : my $resp = get(\-url => $url);
\& Function: 
\& Returns : string
\& Args    : \-url     => URL to HTTPGet
\&           \-proxy   => proxy to use
\&           \-user    => username for proxy or authentication
\&           \-pass    => password for proxy or authentication
\&           \-timeout => timeout
.Ve
.SS "getFH"
.IX Subsection "getFH"
.Vb 6
\& Title   : getFH
\& Usage   : 
\& Function:
\& Example :
\& Returns : string
\& Args    :
.Ve
.SS "_http_parse_url"
.IX Subsection "_http_parse_url"
.Vb 6
\& Title   :
\& Usage   : 
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_http_connect"
.IX Subsection "_http_connect"
.Vb 6
\& Title   :
\& Usage   : 
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_encode_base64"
.IX Subsection "_encode_base64"
.Vb 6
\& Title   :
\& Usage   : 
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "proxy"
.IX Subsection "proxy"
.Vb 10
\& Title   : proxy
\& Usage   : $httpproxy = $db\->proxy(\*(Aqhttp\*(Aq)  or 
\&           $db\->proxy([\*(Aqhttp\*(Aq,\*(Aqftp\*(Aq], \*(Aqhttp://myproxy\*(Aq )
\& Function: Get/Set a proxy for use of proxy. Defaults to environment variable
\&           http_proxy if present.
\& Returns : a string indicating the proxy
\& Args    : $protocol : string for the protocol to set/get
\&           $proxyurl : url of the proxy to use for the specified protocol
\&           $username : username (if proxy requires authentication)
\&           $password : password (if proxy requires authentication)
.Ve
.SS "clear_proxy"
.IX Subsection "clear_proxy"
.Vb 5
\& Title   : clear_proxy
\& Usage   : my $old_prozy = $db\->clear_proxy(\*(Aqhttp\*(Aq)
\& Function: Unsets (clears) the proxy for the protocol indicated 
\& Returns : a string indicating the old proxy value
\& Args    : $protocol : string for the protocol to clear
.Ve
.SS "authentication"
.IX Subsection "authentication"
.Vb 5
\& Title   : authentication
\& Usage   : $db\->authentication($user,$pass)
\& Function: Get/Set authentication credentials
\& Returns : Array of user/pass 
\& Args    : Array or user/pass
.Ve
