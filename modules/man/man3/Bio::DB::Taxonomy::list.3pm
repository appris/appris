.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::DB::Taxonomy::list 3pm"
.TH Bio::DB::Taxonomy::list 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Taxonomy::list \- An implementation of Bio::DB::Taxonomy
that accepts lists of words to build a database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::Taxonomy;
\&
\&  my $db = Bio::DB::Taxonomy\->new( \-source => \*(Aqlist\*(Aq );
\&
\&  my @ranks = (\*(Aqsuperkingdom\*(Aq, \*(Aqclass\*(Aq, \*(Aqgenus\*(Aq, \*(Aqspecies\*(Aq);
\&  my @names = (\*(AqEukaryota\*(Aq, \*(AqMammalia\*(Aq, \*(AqHomo\*(Aq, \*(AqHomo sapiens\*(Aq);
\&  $db\->add_lineage(\-names => \e@names, \-ranks => \e@ranks);
\&
\&  @names = (\*(AqEukaryota\*(Aq, \*(AqMammalia\*(Aq, \*(AqMus\*(Aq, \*(AqMus musculus\*(Aq);
\&  $db\->add_lineage(\-names => \e@names, \-ranks => \e@ranks);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation which uses supplied lists of words to create a
database from which you can extract Bio::Taxon objects.
.SH "TODO"
.IX Header "TODO"
It is possible this module could do something like store the data it builds
up to disc. Would that be useful?
At any rate, this is why the module is called 'list' and not 'in_memory' or
similar.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::DB::Taxonomy::list\->new();
\& Function: Builds a new Bio::DB::Taxonomy::list object 
\& Returns : an instance of Bio::DB::Taxonomy::list
\& Args    : optional, as per the add_lineage() method.
.Ve
.SS "add_lineage"
.IX Subsection "add_lineage"
.Vb 11
\& Title   : add_lineage
\& Usage   : my @names = (\*(AqEukaryota\*(Aq, \*(AqMammalia\*(Aq, \*(AqHomo\*(Aq, \*(AqHomo sapiens\*(Aq);
\&           my @ranks = (\*(Aqsuperkingdom\*(Aq, \*(Aqclass\*(Aq, \*(Aqgenus\*(Aq, \*(Aqspecies\*(Aq);
\&           $db\->add_lineage( \-names => \e@names, \-ranks => \e@ranks );
\& Function: Add a lineage to the database, where the lineage is described by
\&           a list of scientific names in the order root\->leaf. The rank of each
\&           name can optionally be described by supplying an additional list
\&           of rank names in the same order (eg. superkingdom\->species).
\& Returns : 1 for success
\& Args    : \-names => [] : array ref of scientific names, REQUIRED
\&           \-ranks => [] : array ref of rank names, same order as above, OPTIONAL
.Ve
.SS "Bio::DB::Taxonomy Interface implementation"
.IX Subsection "Bio::DB::Taxonomy Interface implementation"
.SS "get_num_taxa"
.IX Subsection "get_num_taxa"
.Vb 5
\& Title   : get_num_taxa
\& Usage   : my $num = $db\->get_num_taxa();
\& Function: Get the number of taxa stored in the database.
\& Returns : A number
\& Args    : None
.Ve
.SS "get_taxon"
.IX Subsection "get_taxon"
.Vb 10
\& Title   : get_taxon
\& Usage   : my $taxon = $db\->get_taxon(\-taxonid => $taxonid)
\& Function: Get a Bio::Taxon object from the database.
\& Returns : Bio::Taxon object
\& Args    : A single value which is the ID of the taxon to retrieve
\&             OR named args, as follows:
\&           \-taxonid => Taxonomy ID (NB: these are not NCBI taxonomy ids but
\&                       \*(Aqlist\*(Aq pre\-fixed ids unique to the list database).
\&             OR
\&           \-name    => String (to query by a taxonomy name). A given taxon name
\&                       can match different taxonomy objects. When that is the
\&                       case, a warning is displayed and the first matching taxon
\&                       is reported. See get_taxonids() to get all matching taxon
\&                       IDs.
\&             OR
\&           \-names   => Array ref of lineage names, like in add_lineage(). To
\&                       overcome the limitations of \-name, you can use \-names to
\&                       provide the full lineage of the taxon you want and get a
\&                       unique, unambiguous taxon object.
.Ve
.SS "get_taxonids"
.IX Subsection "get_taxonids"
.Vb 7
\& Title   : get_taxonids
\& Usage   : my @taxonids = $db\->get_taxonids(\*(AqHomo sapiens\*(Aq);
\& Function: Searches for a taxonid (generated by the list module) based on a
\&           query string. Note that multiple taxonids can match to the same
\&           supplied name.
\& Returns : array of integer ids in list context, one of these in scalar context
\& Args    : string representing taxon\*(Aqs name
.Ve
.SS "ancestor"
.IX Subsection "ancestor"
.Vb 6
\& Title   : ancestor
\& Usage   : my $ancestor_taxon = $db\->ancestor($taxon)
\& Function: Retrieve the full ancestor taxon of a supplied Taxon from the
\&           database. 
\& Returns : Bio::Taxon
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 6
\& Title   : each_Descendent
\& Usage   : my @taxa = $db\->each_Descendent($taxon);
\& Function: Get all the descendents of the supplied Taxon (but not their
\&           descendents, ie. not a recursive fetchall).
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
