.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::Target 3pm"
.TH Bio::Annotation::Target 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Annotation::Target \- Provides an object which represents a target (ie, a
similarity hit) from one object to something in another database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&   $target1 = Bio::Annotation::Target\->new(\-target_id  => \*(AqF321966.1\*(Aq,
\&                                          \-start      => 1,
\&                                          \-end        => 200,
\&                                          \-strand     => 1,   # or \-1
\&                                         );
\&
\&   # or
\&
\&   $target2 = Bio::Annotation::Target\->new();
\&   $target2\->target_id(\*(AqQ75IM5\*(Aq);
\&   $target2\->start(7);
\&   # ... etc ...
\&
\&   # Target is\-a Bio::AnnotationI object, can be added to annotation
\&   # collections, e.g. the one on features or seqs
\&   $feat\->annotation\->add_Annotation(\*(AqTarget\*(Aq, $target2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an object which represents a target (ie, a similarity hit) from
one object to something in another database without prescribing what is
in the other database
.SH "AUTHOR \- Scott Cain"
.IX Header "AUTHOR - Scott Cain"
Scott Cain \- cain@cshl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "AnnotationI implementing functions"
.IX Header "AnnotationI implementing functions"
.SS "as_text"
.IX Subsection "as_text"
.Vb 6
\& Title   : as_text
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "display_text"
.IX Subsection "display_text"
.Vb 4
\& Title   : display_text
\& Usage   : my $str = $ann\->display_text();
\& Function: returns a string. Unlike as_text(), this method returns a string
\&           formatted as would be expected for te specific implementation.
\&
\&           One can pass a callback as an argument which allows custom text
\&           generation; the callback is passed the current instance and any text
\&           returned
\& Example :
\& Returns : a string
\& Args    : [optional] callback
.Ve
.SS "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj\->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
\&
\&           Setting this is optional. If set, it obviates the need to
\&           provide a tag to Bio::AnnotationCollectionI when adding
\&           this object. When obtaining an AnnotationI object from the
\&           collection, the collection will set the value to the tag
\&           under which it was stored unless the object has a tag
\&           stored already.
\&
\& Example :
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SH "Specific accessors for Targets"
.IX Header "Specific accessors for Targets"
.SS "target_id"
.IX Subsection "target_id"
.IP "Usage" 4
.IX Item "Usage"
.Vb 2
\&  $obj\->target_id()        #get existing value
\&  $obj\->target_id($newval) #set new value
.Ve
.IP "Function" 4
.IX Item "Function"
.PD 0
.IP "Returns" 4
.IX Item "Returns"
.PD
value of target_id (a scalar)
.IP "Arguments" 4
.IX Item "Arguments"
new value of target_id (to set)
