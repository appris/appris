.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::fasta 3pm"
.TH Bio::SeqIO::fasta 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::fasta \- fasta sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::SeqIO class.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Seq objects to and from fasta flat
file databases.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS \- Ewan Birney & Lincoln Stein"
.IX Header "AUTHORS - Ewan Birney & Lincoln Stein"
Email: birney@ebi.ac.uk
       lstein@cshl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : $seq = $stream\->next_seq()
\& Function: returns the next sequence in the stream
\& Returns : Bio::Seq object, or nothing if no more available
\& Args    : NONE
.Ve
.SS "next_seq_fast"
.IX Subsection "next_seq_fast"
.Vb 6
\& Title   : next_seq_fast
\& Usage   : $seq = $stream\->next_seq_fast()
\& Function: returns the next sequence in the stream
\&           Favors speed over perfection.
\& Returns : Bio::Seq object, or nothing if no more available
\& Args    : NONE
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $stream\->write_seq(@seq)
\& Function: Writes the $seq object into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Array of 1 or more Bio::PrimarySeqI objects
.Ve
.SS "width"
.IX Subsection "width"
.Vb 5
\& Title   : width
\& Usage   : $obj\->width($newval)
\& Function: Get/Set the line width for FASTA output (not counting whitespace).
\& Returns : value of width
\& Args    : newvalue (optional)
.Ve
.SS "block"
.IX Subsection "block"
.Vb 8
\& Title   : block
\& Usage   : $obj\->block($newval)
\& Function: Get/Set the length of each block for FASTA output. Sequence blocks
\&           will be split with a space. Configuring block, to a value of 10 for
\&           example, allows one to easily identify a position in a sequence by eye.
\& Default : same value used for width.
\& Returns : value of block
\& Args    : newvalue (optional)
.Ve
.SS "preferred_id_type"
.IX Subsection "preferred_id_type"
.Vb 10
\& Title   : preferred_id_type
\& Usage   : $obj\->preferred_id_type(\*(Aqaccession\*(Aq)
\& Function: Get/Set the preferred type of identifier to use in the ">ID" position
\&           for FASTA output.
\& Returns : string, one of values defined in @Bio::SeqIO::fasta::SEQ_ID_TYPES.
\& Default : display
\& Args    : string when setting. This must be one of values defined in
\&           @Bio::SeqIO::fasta::SEQ_ID_TYPES. Allowable values:
\&           accession, accession.version, display, primary
\& Throws  : fatal exception if the supplied id type is not in @SEQ_ID_TYPES.
.Ve
