.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Tools::IDHandler 3pm"
.TH Bio::SeqFeature::Tools::IDHandler 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::Tools::IDHandler \- maps $seq_feature\->primary_tag
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::SeqIO;
\&  use Bio::SeqFeature::Tools::IDHandler;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class to map \f(CW$seq_feature\fR\->primary_tag
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Chris Mungall"
.IX Header "AUTHOR - Chris Mungall"
Email:  cjm@fruitfly.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $unflattener = Bio::SeqFeature::Tools::IDHandler\->new();
\& Function: constructor
\& Example : 
\& Returns : a new Bio::SeqFeature::Tools::IDHandler
\& Args    : see below
.Ve
.SS "\fBset_ParentIDs_from_hierarchy()\fP"
.IX Subsection "set_ParentIDs_from_hierarchy()"
.Vb 6
\& Title   : set_ParentIDs_from_hierarchy()
\& Usage   : $idhandler\->set_ParentIDs_from_hierarchy($fholder)
\& Function: populates tags Parent and ID via holder hierarchy
\& Example :
\& Returns : 
\& Args    : Bio::featureHolderI (either a SeqFeature or a Seq)
.Ve
.PP
This is mainly for \s-1GFF3\s0 export
.PP
\&\s-1GFF3\s0 uses the tags \s-1ID\s0 and Parent to represent the feature containment
hierarchy; it does \s-1NOT\s0 use the feature holder tree
.PP
This method sets Parent (and \s-1ID\s0 for any parents not set) based on
feature holder/containement hierarchy, ready for \s-1GFF3\s0 output
.SS "create_hierarchy_from_ParentIDs"
.IX Subsection "create_hierarchy_from_ParentIDs"
.Vb 6
\& Title   : create_hierarchy_from_ParentIDs
\& Usage   : $idhandler\->set_ParentIDs_from_hierarchy($fholder)
\& Function: inverse of set_ParentIDs_from_hierarchy
\& Example :
\& Returns : list of top SeqFeatures
\& Args    :
.Ve
.SS "generate_unique_persistent_id"
.IX Subsection "generate_unique_persistent_id"
.Vb 6
\& Title   : generate_unique_persistent_id
\& Usage   :
\& Function: generates a unique and persistent identifier for this
\& Example :
\& Returns : value of primary_id (a scalar)
\& Args    :
.Ve
.PP
Will generate an \s-1ID,\s0 \fBand\fR set \fBprimary_id()\fR (see above)
.PP
The \s-1ID\s0 is a string generated from
.PP
.Vb 4
\&  seq_id
\&  primary_tag
\&  start
\&  end
.Ve
.PP
There are three underlying assumptions: that all the above accessors
are set; that seq_id is a persistent and unique identifier for the
sequence containing this feature; and that
.PP
.Vb 1
\&  (seq_id, primary_tag, start, end)
.Ve
.PP
is a \*(L"unique constraint\*(R" over features
.PP
The \s-1ID\s0 is persistent, so long as none of these values change \- if they
do, it is considered a separate entity
