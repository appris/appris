.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::IO::mast 3pm"
.TH Bio::Matrix::PSM::IO::mast 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::PSM::IO::mast \- PSM mast parser implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::Matrix::PSM::IO for detailed documentation on how to 
use \s-1PSM\s0 parsers
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parser for mast. This driver unlike meme or transfac for example is
dedicated more to \s-1PSM\s0 sequence matches, than to \s-1PSM\s0 themselves.
.SH "TO DO"
.IX Header "TO DO"
Section \s-1III\s0 should be parsed too, otherwise no real sequence is
available, so we supply '\s-1NNNNN....\s0' as a seq which is not right.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Stefan Kirov"
.IX Header "AUTHOR - Stefan Kirov"
Email skirov@utk.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $psmIO =  Bio::Matrix::PSM::IO\->new(\-format=>\*(Aqmast\*(Aq, 
\&                                                                               \-file=>$file);
\& Function: Associates a file with the appropriate parser
\& Throws  : Throws if the file passed is in HTML format or if 
\&           some criteria for the file
\&           format are not met.
\& Example :
\& Returns : psm object, associated with a file with matrix file
\& Args    : hash
\& return  : "Bio::Matrix::PSM::$format"\->new(@args);
.Ve
.SS "next_psm"
.IX Subsection "next_psm"
.Vb 8
\& Title   : next_psm
\& Usage   : my $psm=$psmIO\->next_psm();
\& Function: Reads the next PSM from the input file, associated with this object
\& Throws  : Throws if there ara format violations in the input file (checking is not
\&            very strict with all drivers).
\& Example :
\& Returns : Bio::Matrix::PSM::Psm object
\& Args    : none
.Ve
.SS "write_psm"
.IX Subsection "write_psm"
.Vb 10
\& Title   : write_psm
\& Usage   : #Get SiteMatrix object somehow (see Bio::Matrix::PSM::SiteMatrix)
\&            my $matrix=$psmin\->next_matrix;
\&            #Create the stream
\&            my $psmio=new(\-file=>">psms.mast",\-format=>\*(Aqmast\*(Aq);
\&            $psmio\->write_psm($matrix);
\&            #Will warn if only PFM data is contained in $matrix, recalculate the PWM
\&            #based on normal distribution (A=>0.25, C=>0.25, etc)
\& Function: writes pwm in mast format
\& Throws  :
\& Example : 
\& Args    : SiteMatrix object
\& Returns :
.Ve
