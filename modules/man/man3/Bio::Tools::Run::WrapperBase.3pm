.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::WrapperBase 3pm"
.TH Bio::Tools::Run::WrapperBase 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::WrapperBase \- A Base object for wrappers around executables
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # do not use this object directly, it provides the following methods
\&  # for its subclasses
\&
\&  my $errstr = $obj\->error_string();
\&  my $exe    = $obj\->executable();
\&  $obj\->save_tempfiles($booleanflag)
\&  my $outfile= $obj\->outfile_name();
\&  my $tempdir= $obj\->tempdir(); # get a temporary dir for executing
\&  my $io     = $obj\->io;  # Bio::Root::IO object
\&  my $cleanup= $obj\->cleanup(); # remove tempfiles
\&
\&  $obj\->run({\-arg1 => $value});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a basic module from which to build executable wrapper modules.
It has some basic methods to help when implementing new modules.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track of
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala, bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "run"
.IX Subsection "run"
.Vb 6
\& Title   : run
\& Usage   : $wrapper\->run({ARGS HERE});
\& Function: Support generic running with args passed in
\&           as a hashref
\& Returns : Depends on the implementation, status OR data
\& Args    : hashref of named arguments
.Ve
.SS "error_string"
.IX Subsection "error_string"
.Vb 5
\& Title   : error_string
\& Usage   : $obj\->error_string($newval)
\& Function: Where the output from the last analysis run is stored.
\& Returns : value of error_string
\& Args    : newvalue (optional)
.Ve
.SS "arguments"
.IX Subsection "arguments"
.Vb 5
\& Title   : arguments
\& Usage   : $obj\->arguments($newval)
\& Function: Commandline parameters
\& Returns : value of arguments
\& Args    : newvalue (optional)
.Ve
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 8
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function: Get/set the choice of if tempfiles in the temp dir (see tempdir())
\&           are kept or cleaned up. Default is \*(Aq0\*(Aq, ie. delete temp files.
\&           NB: This must be set to the desired value PRIOR to first creating
\&           a temp dir with tempdir(). Any attempt to set this after tempdir creation will get a warning.
\& Returns : boolean
\& Args    : none to get, boolean to set
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $wrapper\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $wrapper\->cleanup();
\& Function: Will cleanup the tempdir directory
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function: Gets a Bio::Root::IO object
\& Returns : Bio::Root::IO object
\& Args    : none
.Ve
.SS "version"
.IX Subsection "version"
.Vb 5
\& Title   : version
\& Usage   : $version = $wrapper\->version()
\& Function: Returns the program version (if available)
\& Returns : string representing version of the program
\& Args    : [Optional] value to (re)set version string
.Ve
.SS "executable"
.IX Subsection "executable"
.Vb 6
\& Title   : executable
\& Usage   : my $exe = $factory\->executable();
\& Function: Finds the full path to the executable
\& Returns : string representing the full path to the exe
\& Args    : [optional] name of executable to set path to
\&           [optional] boolean flag whether or not warn when exe is not found
.Ve
.SS "program_path"
.IX Subsection "program_path"
.Vb 5
\& Title   : program_path
\& Usage   : my $path = $factory\->program_path();
\& Function: Builds path for executable
\& Returns : string representing the full path to the exe
\& Args    : none
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 6
\& Title   : program_dir
\& Usage   : my $dir = $factory\->program_dir();
\& Function: Abstract get method for dir of program. To be implemented
\&           by wrapper.
\& Returns : string representing program directory
\& Args    : none
.Ve
.SS "program_name"
.IX Subsection "program_name"
.Vb 6
\& Title   : program_name
\& Usage   : my $name = $factory\->program_name();
\& Function: Abstract get method for name of program. To be implemented
\&           by wrapper.
\& Returns : string representing program name
\& Args    : none
.Ve
.SS "quiet"
.IX Subsection "quiet"
.Vb 7
\& Title   : quiet
\& Usage   : $factory\->quiet(1);
\&           if ($factory\->quiet()) { ... }
\& Function: Get/set the quiet state. Can be used by wrappers to control if
\&           program output is printed to the console or not.
\& Returns : boolean
\& Args    : none to get, boolean to set
.Ve
.SS "\fB_setparams()\fP"
.IX Subsection "_setparams()"
.Vb 10
\& Title   : _setparams
\& Usage   : $params = $self\->_setparams(\-params => [qw(window evalue_cutoff)])
\& Function: For internal use by wrapper modules to build parameter strings
\&           suitable for sending to the program being wrapped. For each method
\&           name supplied, calls the method and adds the method name (as modified
\&           by optional things) along with its value (unless a switch) to the
\&           parameter string
\& Example : $params = $self\->_setparams(\-params => [qw(window evalue_cutoff)],
\&                                       \-switches => [qw(simple large all)],
\&                                       \-double_dash => 1,
\&                                       \-underscore_to_dash => 1);
\&           If window() and simple() had not been previously called, but
\&           evalue_cutoff(0.5), large(1) and all(0) had been called, $params
\&           would be \*(Aq \-\-evalue\-cutoff 0.5 \-\-large\*(Aq
\& Returns : parameter string
\& Args    : \-params => [] or {}  # array ref of method names to call,
\&                                  or hash ref where keys are method names and
\&                                  values are how those names should be output
\&                                  in the params string
\&           \-switches => [] or {}# as for \-params, but no value is printed for
\&                                  these methods
\&           \-join => string      # define how parameters and their values are
\&                                  joined, default \*(Aq \*(Aq. (eg. could be \*(Aq=\*(Aq for
\&                                  param=value)
\&           \-lc => boolean       # lc() method names prior to output in string
\&           \-dash => boolean     # prefix all method names with a single dash
\&           \-double_dash => bool # prefix all method names with a double dash
\&           \-mixed_dash => bool  # prefix single\-character method names with a
\&                                # single dash, and multi\-character method names
\&                                # with a double\-dash
\&           \-underscore_to_dash => boolean # convert all underscores in method
\&                                            names to dashes
.Ve
