.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::PrositeScan 3pm"
.TH Bio::Tools::PrositeScan 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::PrositeScan \- Parser for ps_scan result
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::PrositeScan;
\&
\&  my $factory = Bio::Tools::PrositeScan\->new(
\&      \-file   => \*(Aqout.PrositeScan\*(Aq,
\&      \-format => \*(Aqfasta\*(Aq
\&  );
\&
\&  while(my $match = $factory\->next_prediction){
\&      #  $match is a Bio::SeqFeature::FeaturePair
\&
\&      # Sequence ID
\&      my $seq_id = $match\->seq_id;
\&
\&      # PROSITE accession number
\&      my $psac = $match\->hseq_id;
\&
\&      # Coordinates
\&      my @coords = ( $match\->start, $match\->end );
\&
\&      # Subsequence
\&      my $seq = $match\->feature1\->seq;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a parser of the output of the ps_scan program. It takes either a file
handle or a file name, and returns a Bio::SeqFeature::FeaturePair object.
.PP
Note that the current implementation parses the entire file at once.
.SH "AUTHOR"
.IX Header "AUTHOR"
Juguang Xiao, juguang@tll.org.sg
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
ps_scan software <ftp://ftp.expasy.org/databases/prosite/ps_scan>
.IP "\(bu" 4
\&\s-1PROSITE\s0 User Manual <http://prosite.expasy.org/prosuser.html>
.SS "new"
.IX Subsection "new"
.Vb 6
\&  Title   : new
\&  Usage   : Bio::Tools::PrositeScan\->new(\-file => \*(Aqout.PrositeScan\*(Aq);
\&            Bio::Tools::PrositeScan\->new(\-fh => \e*FH);
\&  Returns : L<Bio::Tools::PrositeScan>
\&  Args    : \-format => string representing the format type for the
\&                       ps_scan output, REQUIRED
.Ve
.PP
The \f(CW\*(C`\-format\*(C'\fR argument must currently be set to \f(CW\*(C`fasta\*(C'\fR since this is the
only parser implemented. This corresponds with using the ps_scan arguments
\&\f(CW\*(C`\-o fasta\*(C'\fR.
.SS "next_prediction"
.IX Subsection "next_prediction"
.Vb 5
\&  Title   : new
\&  Usage   :
\&      while($result = $factory\->next_prediction){
\&          ;
\&      }
\&
\&  Returns : a Bio::SeqFeature::FeaturePair object where
\&            feature1 is the matched subsequence and
\&            feature2 is the PROSITE accession number.
\&            See <http://prosite.expasy.org/prosuser.html#conv_ac>.
.Ve
