.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::AlignIO::maf 3pm"
.TH Bio::AlignIO::maf 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::AlignIO::maf \- Multiple Alignment Format sequence input stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& Do not use this module directly.  Use it via the Bio::AlignIO class.
\&
\& use Bio::AlignIO;
\&
\& my $alignio = Bio::AlignIO\->new(\-fh => \e*STDIN, \-format => \*(Aqmaf\*(Aq);
\&
\& while(my $aln = $alignio\->next_aln()){
\&   my $match_line = $aln\->match_line;
\&
\&   print $aln, "\en";
\&
\&   print $aln\->length, "\en";
\&   print $aln\->num_residues, "\en";
\&   print $aln\->is_flush, "\en";
\&   print $aln\->num_sequences, "\en";
\&
\&   $aln\->splice_by_seq_pos(1);
\&
\&   print $aln\->consensus_string(60), "\en";
\&   print $aln\->get_seq_by_pos(1)\->seq, "\en";
\&   print $aln\->match_line(), "\en";
\&
\&   print "\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class constructs Bio::SimpleAlign objects from an MAF-format
multiple alignment file.
.PP
Writing in \s-1MAF\s0 format is currently unimplemented.
.PP
Spec of \s-1MAF\s0 format is here:
  http://genome.ucsc.edu/FAQ/FAQformat
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS \- Allen Day"
.IX Header "AUTHORS - Allen Day"
Email: allenday@ucla.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $alignio = Bio::AlignIO\->new(\-format => \*(Aqmaf\*(Aq
\&                                          \-file   => \*(Aq>file\*(Aq,
\&                                          \-idlength => 10,
\&                                          \-idlinebreak => 1);
\& Function: Initialize a new L<Bio::AlignIO::maf> reader
\& Returns : L<Bio::AlignIO> object
\& Args    :
.Ve
.SS "next_aln"
.IX Subsection "next_aln"
.Vb 7
\& Title   : next_aln
\& Usage   : $aln = $stream\->next_aln()
\& Function: returns the next alignment in the stream.
\&           Throws an exception if trying to read in PHYLIP
\&           sequential format.
\& Returns : L<Bio::SimpleAlign> object
\& Args    :
.Ve
