.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Pseudowise 3pm"
.TH Bio::Tools::Pseudowise 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Pseudowise \- Results of one Pseudowise run
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Pseudowise;
\&
\&  my $parser = Bio::Tools::Pseudowise\->new(\-file=>"pw.out");
\&  while(my $feat = $parser\->next_result){
\&      push @feat, $feat;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pseudowise is a pseudogene prediction program written by Ewan Birney
as part of the Wise Package. This module is the parser for the output
of the program.
.PP
http://www.sanger.ac.uk/software/wise2
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Previous committed by the Fugu Team
.PP
Re-written by Jason Stajich jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. 
Internal methods are usually preceded with a _
.SS "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $pseudowise\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /pseudowise/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : $seqfeature = $obj\->next_feature();
\& Function: Returns the next feature available in the analysis result, or
\&           undef if there are no more features.
\& Example :
\& Returns : A Bio::SeqFeatureI implementing object, or undef if there are no
\&           more features.
\& Args    : none
.Ve
.PP
See Also  Bio::SeqFeatureI
.SS "next_prediction"
.IX Subsection "next_prediction"
.Vb 6
\& Title   : next_prediction
\& Usage   : while($gene = $pseudowise\->next_prediction()) {
\&                  # do something
\&           }
\& Function: Returns the gene of the Pseudowise result
\&           file. Call this method repeatedly until FALSE is returned.
\&
\& Example :
\& Returns : a Bio::SeqFeature::Generic 
\& Args    : none
.Ve
.PP
See Also Bio::SeqFeature::Generic
.SS "_parse_predictions"
.IX Subsection "_parse_predictions"
.Vb 6
\& Title   : _parse_predictions()
\& Usage   : $obj\->_parse_predictions()
\& Function: Parses the prediction section. Automatically called by
\&           next_prediction() if not yet done.
\& Example :
\& Returns :
.Ve
.SH "_prediction"
.IX Header "_prediction"
.Vb 5
\& Title   : _prediction()
\& Usage   : $gene = $obj\->_prediction()
\& Function: internal
\& Example :
\& Returns :
.Ve
.SS "_add_prediction"
.IX Subsection "_add_prediction"
.Vb 5
\& Title   : _add_prediction()
\& Usage   : $obj\->_add_prediction($gene)
\& Function: internal
\& Example :
\& Returns :
.Ve
.SS "_predictions_parsed"
.IX Subsection "_predictions_parsed"
.Vb 5
\& Title   : _predictions_parsed
\& Usage   : $obj\->_predictions_parsed
\& Function: internal
\& Example :
\& Returns : TRUE or FALSE
.Ve
