.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::PathI 3pm"
.TH Bio::Ontology::PathI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Ontology::PathI \- Interface for a path between ontology terms
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # see documentation of methods and an implementation, e.g.,
\&    # Bio::Ontology::Path
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the minimal interface for a path between two terms in
an ontology. Ontology engines may use this.
.PP
Essentially this is a very thin extension of the
Bio::Ontology::RelationshipI interface. It basically adds an
attribute \fBdistance()\fR. For a RelationshipI, you can think of distance as
equal to zero (subject == object) or 1 (subject != object).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "distance"
.IX Subsection "distance"
.Vb 4
\& Title   : distance
\& Usage   : $obj\->distance($newval)
\& Function: Get (and set if the implementation allows it) the distance
\&           between the two terms connected by this path.
\&
\& Example : 
\& Returns : value of distance (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SH "Bio::Ontology::RelationshipI Methods"
.IX Header "Bio::Ontology::RelationshipI Methods"
.SS "subject_term"
.IX Subsection "subject_term"
.Vb 3
\& Title   : subject_term
\& Usage   : $subj = $rel\->subject_term();
\& Function: Set/get for the subject term of this Relationship.
\&
\&           The common convention for ontologies is to express
\&           relationships between terms as triples (subject, predicate,
\&           object).
\&
\& Returns : The subject term [Bio::Ontology::TermI].
\& Args    :
.Ve
.SS "object_term"
.IX Subsection "object_term"
.Vb 3
\& Title   : object_term
\& Usage   : $object = $rel\->object_term();
\& Function: Set/get for the object term of this Relationship.
\&
\&           The common convention for ontologies is to express
\&           relationships between terms as triples (subject, predicate,
\&           object).
\&
\& Returns : The object term [Bio::Ontology::TermI].
\& Args    :
.Ve
.SS "predicate_term"
.IX Subsection "predicate_term"
.Vb 3
\& Title   : predicate_term
\& Usage   : $type = $rel\->predicate_term();
\& Function: Set/get for the predicate of this relationship.
\&
\&           For a path the predicate (relationship type) is defined as
\&           the greatest common denominator of all predicates
\&           (relationship types) encountered along the path. I.e., if
\&           predicate A is\-a predicate B, the greatest common
\&           denominator for a path containing both predicates A and B is B
\&
\& Returns : The predicate term [Bio::Ontology::TermI].
\& Args    :
.Ve
.SS "ontology"
.IX Subsection "ontology"
.Vb 6
\& Title   : ontology
\& Usage   : $ont = $obj\->ontology()
\& Function: Get the ontology that defined this relationship.
\& Example : 
\& Returns : an object implementing Bio::Ontology::OntologyI
\& Args    :
.Ve
.PP
See Bio::Ontology::OntologyI.
