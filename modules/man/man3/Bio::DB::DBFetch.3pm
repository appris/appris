.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::DB::DBFetch 3pm"
.TH Bio::DB::DBFetch 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::DBFetch \- Database object for retrieving using the dbfetch script
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #do not use this module directly
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows the dynamic retrieval of entries from databases using the
dbfetch script at \s-1EBI:\s0
http://www.ebi.ac.uk/cgi\-bin/dbfetch.
.PP
In order to make changes transparent we have host type (currently only
ebi) and location (defaults to ebi) separated out.  This allows later
additions of more servers in different geographical locations.
.PP
This is a superclass which is called by instantiable subclasses with
correct parameters.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email Heikki Lehvaslaiho <heikki\-at\-bioperl\-dot\-org>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "Routines from Bio::DB::WebDBSeqI"
.IX Header "Routines from Bio::DB::WebDBSeqI"
.SS "get_request"
.IX Subsection "get_request"
.Vb 5
\& Title   : get_request
\& Usage   : my $url = $self\->get_request
\& Function: returns a HTTP::Request object
\& Returns :
\& Args    : %qualifiers = a hash of qualifiers (ids, format, etc)
.Ve
.SS "postprocess_data"
.IX Subsection "postprocess_data"
.Vb 8
\& Title   : postprocess_data
\& Usage   : $self\->postprocess_data ( \*(Aqtype\*(Aq => \*(Aqstring\*(Aq,
\&                                     \*(Aqlocation\*(Aq => \e$datastr);
\& Function: process downloaded data before loading into a Bio::SeqIO
\& Returns : void
\& Args    : hash with two keys \- \*(Aqtype\*(Aq can be \*(Aqstring\*(Aq or \*(Aqfile\*(Aq
\&                              \- \*(Aqlocation\*(Aq either file location or string
\&                                           reference containing data
.Ve
.SS "default_format"
.IX Subsection "default_format"
.Vb 5
\& Title   : default_format
\& Usage   : my $format = $self\->default_format
\& Function: Returns default sequence format for this module
\& Returns : string
\& Args    : none
.Ve
.SH "Bio::DB::DBFetch specific routines"
.IX Header "Bio::DB::DBFetch specific routines"
.SS "get_Stream_by_id"
.IX Subsection "get_Stream_by_id"
.Vb 9
\&  Title   : get_Stream_by_id
\&  Usage   : $seq = $db\->get_Stream_by_id($ref);
\&  Function: Retrieves Seq objects from the server \*(Aqen masse\*(Aq, rather than one
\&            at a time.  For large numbers of sequences, this is far superior
\&            than get_Stream_by_[id/acc]().
\&  Example :
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : either an array reference, a filename, or a filehandle
\&            from which to get the list of unique ids/accession numbers.
.Ve
.PP
\&\s-1NOTE:\s0 for backward compatibility, this method is also called
get_Stream_by_batch.
.SS "get_Seq_by_version"
.IX Subsection "get_Seq_by_version"
.Vb 6
\& Title   : get_Seq_by_version
\& Usage   : $seq = $db\->get_Seq_by_version(\*(AqX77802.1\*(Aq);
\& Function: Gets a Bio::Seq object by accession number
\& Returns : A Bio::Seq object
\& Args    : version number (as a string)
\& Throws  : "version does not exist" exception
.Ve
.SS "request_format"
.IX Subsection "request_format"
.Vb 9
\& Title   : request_format
\& Usage   : my ($req_format, $ioformat) = $self\->request_format;
\&           $self\->request_format("genbank");
\&           $self\->request_format("fasta");
\& Function: Get/Set sequence format retrieval. The get\-form will normally not
\&           be used outside of this and derived modules.
\& Returns : Array of two strings, the first representing the format for
\&           retrieval, and the second specifying the corresponding SeqIO format.
\& Args    : $format = sequence format
.Ve
.SS "servertype"
.IX Subsection "servertype"
.Vb 6
\& Title   : servertype
\& Usage   : my $servertype = $self\->servertype
\&            $self\->servertype($servertype);
\& Function: Get/Set server type
\& Returns : string
\& Args    : server type string [optional]
.Ve
.SS "hostlocation"
.IX Subsection "hostlocation"
.Vb 6
\& Title   : hostlocation
\& Usage   : my $location = $self\->hostlocation()
\&          $self\->hostlocation($location)
\& Function: Set/Get Hostlocation
\& Returns : string representing hostlocation
\& Args    : string specifying hostlocation [optional]
.Ve
.SS "location_url"
.IX Subsection "location_url"
.Vb 5
\& Title   : location
\& Usage   : my $url = $self\->location_url()
\& Function: Get host url
\& Returns : string representing url
\& Args    : none
.Ve
.SH "Bio::DB::DBFetch routines"
.IX Header "Bio::DB::DBFetch routines"
These methods allow subclasses to pass parameters.
.SS "hosts"
.IX Subsection "hosts"
.Vb 5
\& Title   : hosts
\& Usage   : 
\& Function: get/set for host hash 
\& Returns : 
\& Args    : optional hash
.Ve
.SS "formatmap"
.IX Subsection "formatmap"
.Vb 5
\& Title   : formatmap
\& Usage   : 
\& Function: get/set for format hash
\& Returns : 
\& Args    : optional hash
.Ve
