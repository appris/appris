.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::CollectionI 3pm"
.TH Bio::SeqFeature::CollectionI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::CollectionI \- An interface for a collection of SeqFeatureI objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# get a Bio::SeqFeature::CollectionI somehow
# perhaps a Bio::SeqFeature::Collection
.PP
.Vb 3
\&    use Bio::SeqFeature::Collection;
\&    my $collection = Bio::SeqFeature::Collection\->new();
\&    $collection\->add_features(\e@featurelist);
\&
\&
\&    $collection\->features(\-attributes => 
\&                          [ { \*(Aqlocation\*(Aq => Bio::Location::Simple\->new
\&                                  (\-start=> 1, \-end => 300) ,
\&                                  \*(Aqoverlaps\*(Aq }]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface describes the basic methods needed for a collection of Sequence Features.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "add_features"
.IX Subsection "add_features"
.Vb 5
\& Title   : add_features
\& Usage   : $collection\->add_features(\e@features);
\& Function:
\& Returns : number of features added
\& Args    : arrayref of Bio::SeqFeatureI objects to index
.Ve
.SS "features"
.IX Subsection "features"
.Vb 5
\& Title   : features
\& Usage   : my @f = $collection\->features(@args);
\& Returns : a list of Bio::SeqFeatureI objects
\& Args    : see below
\& Status  : public
.Ve
.PP
This routine will retrieve features associated with this collection
object.  It can be used to return all features, or a subset based on
their type, location, or attributes.
.PP
.Vb 3
\&  \-types     List of feature types to return.  Argument is an array
\&             of Bio::Das::FeatureTypeI objects or a set of strings
\&             that can be converted into FeatureTypeI objects.
\&
\&  \-callback   A callback to invoke on each feature.  The subroutine
\&              will be passed to each Bio::SeqFeatureI object in turn.
\&
\&  \-attributes A hash reference containing attributes to match.
.Ve
.PP
The \-attributes argument is a hashref containing one or more attributes
to match against:
.PP
.Vb 2
\&  \-attributes => { Gene => \*(Aqabc\-1\*(Aq,
\&                   Note => \*(Aqconfirmed\*(Aq }
.Ve
.PP
Attribute matching is simple exact string matching, and multiple
attributes are ANDed together.  See Bio::DB::ConstraintsI for a
more sophisticated take on this.
.PP
If one provides a callback, it will be invoked on each feature in
turn.  If the callback returns a false value, iteration will be
interrupted.  When a callback is provided, the method returns undef.
