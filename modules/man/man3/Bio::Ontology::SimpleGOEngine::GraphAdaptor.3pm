.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::SimpleGOEngine::GraphAdaptor 3pm"
.TH Bio::Ontology::SimpleGOEngine::GraphAdaptor 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Ontology::SimpleGOEngine::GraphAdaptor \- Graph adaptor for
Bio::Ontology::SimpleGOEngine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Ontology::SimpleGOEngine::GraphAdaptor;
\&
\&  my $graph = Bio::Ontology::SimpleGOEngine::GraphAdaptor;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an adaptor to simplify use of versions of the standard \s-1CPAN\s0 Graph module
(old is versions 0.2x; new is 0.5x and beyond) within
Bio::Ontology::SimpleGOEngine. Prior versions of this module supported Graph
version older than 0.5, however we are removing support for these older version
post BioPerl 1.6.901. If you absolutely require an old version of Graph, please
use an older version of BioPerl.
.PP
This module implements only those Graph methods used by SimpleGOEngine. It is
far from a complete compatibility layer! It also implements workarounds for
certain performance problems in the current versions of Graph v0.5x.
.PP
This class provides implementations for the required graph methods using the new
version of Graph. In most cases, these are simple pass-throughs
.PP
The methods implemented here or in the subclasses are listed below.
In all cases, we implemented the Graph v0.5x interface.  Consult the
Graph v0.5x man page for details.
.PP
.Vb 10
\&  add_vertex
\&  has_vertex
\&  add_edge
\&  has_edge
\&  vertices
\&  edges
\&  edges_at
\&  predecessors
\&  successors
\&  set_vertex_attribute
\&  get_vertex_attribute
\&  set_edge_attribute
\&  get_edge_attribute
\&  source_vertices
\&  sink_vertices
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Nat Goodman
.PP
Email: natg at shore.net
.PP
Address:
.PP
.Vb 3
\&  Institute for Systems Biology
\&  1441 N 34th St
\&  Seattle, WA 98103\-8904
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $graph = Bio::Ontology::SimpleGOEngine::GraphAdaptor\->new()
\& Function: Creates a new graph
\& Returns : Bio::Ontology::SimpleGOEngine::GraphAdaptor02 or
\&           Bio::Ontology::SimpleGOEngine::GraphAdaptor05 object,
\&           depending on which Graph version is available
\& Args    : none
.Ve
.SS "_graph"
.IX Subsection "_graph"
.Vb 5
\& Title   : _graph
\& Usage   : $self\->_graph();
\& Function: Internal method to access \*(Aqreal\*(Aq graph
\& Returns : Graph::Directed object
\& Args    : none
.Ve
.SS "_vertex_attributes"
.IX Subsection "_vertex_attributes"
.Vb 5
\& Title   : _vertex_attributes
\& Usage   : $self\->vertex_attributes();
\& Function: Internal method to access HASH used to store vertex attributes
\& Returns : Graph::Directed object
\& Args    : none
.Ve
.SS "_edge_attributes"
.IX Subsection "_edge_attributes"
.Vb 5
\& Title   : _edge_attributes
\& Usage   : $self\->edge_attributes();
\& Function: Internal method to access HASH used to store edge attributes
\& Returns : Graph::Directed object
\& Args    : none
.Ve
.SS "_vertex2attributes"
.IX Subsection "_vertex2attributes"
.Vb 6
\& Title   : _vertex2attributes
\& Usage   : $value=$graph\->_vertex2attributes($v_\->{ATTRIBUTE};
\&           $graph\->_vertex2attributes($v)\->{ATTRIBUTE}=$value;
\& Function: Internal method to access attributes for a specific vertex
\& Returns : HASH
\& Args    : none
.Ve
.SS "_edge2attributes"
.IX Subsection "_edge2attributes"
.Vb 6
\& Title   : _edge2attributes
\& Usage   : $value=$graph\->_edge2attributes($u,$v)\->{ATTRIBUTE};
\&           $graph\->_edge2attributes($u,$v)\->{ATTRIBUTE}=$value;
\& Function: Internal method to access HASH used to store edge attributes
\& Returns : HASH
\& Args    : none
.Ve
