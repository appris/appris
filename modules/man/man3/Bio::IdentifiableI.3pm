.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::IdentifiableI 3pm"
.TH Bio::IdentifiableI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::IdentifiableI \- interface for objects with identifiers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # to test this is an identifiable object
\&
\&    $obj\->isa("Bio::IdentifiableI") ||
\&      $obj\->throw("$obj does not implement the Bio::IdentifiableI interface");
\&
\&    # Accessors
\&
\&    $object_id = $obj\->object_id();
\&    $namespace = $obj\->namespace();
\&    $authority = $obj\->authority();
\&    $version   = $obj\->version();
\&    # Gets authority:namespace:object_id
\&    $lsid = $obj\->lsid_string();
\&    # Gets namespace:object_id.version
\&    $ns_string = $obj\->namespace_string();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface describes methods expected on identifiable objects, i.e.
ones which have identifiers expected to make sense across a number of
instances and/or domains. This interface is modeled after pretty much
ubiquitous ideas for names in bioinformatics being
.PP
.Vb 1
\& databasename:object_id.version
.Ve
.PP
Example:
.PP
.Vb 1
\& swissprot:P012334.2
.Ve
.PP
or:
.PP
.Vb 1
\& GO:0007048
.Ve
.PP
The object will also work with \s-1LSID\s0 proposals which adds the concept of an
authority, being the \s-1DNS\s0 name of the organisation assigning the namespace.
See <http://lsid.sourceforge.net/>.
.PP
Helper functions are provided to make useful strings:
.PP
.Vb 1
\&  lsid_string \- string complying to the LSID standard
\&
\&  namespace_string \- string complying to the usual convention of
\&                     namespace:object_id.version
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "Implementation Specific Functions"
.IX Header "Implementation Specific Functions"
These functions are the ones that a specific implementation must
define.
.SS "object_id"
.IX Subsection "object_id"
.Vb 7
\& Title   : object_id
\& Usage   : $string    = $obj\->object_id()
\& Function: a string which represents the stable primary identifier
\&           in this namespace of this object. For DNA sequences this
\&           is its accession_number, similarly for protein sequences
\& Returns : A scalar
\& Status  : Virtual
.Ve
.SS "version"
.IX Subsection "version"
.Vb 8
\& Title   : version
\& Usage   : $version    = $obj\->version()
\& Function: a number which differentiates between versions of
\&           the same object. Higher numbers are considered to be
\&           later and more relevant, but a single object described
\&           the same identifier should represent the same concept
\& Returns : A number
\& Status  : Virtual
.Ve
.SS "authority"
.IX Subsection "authority"
.Vb 7
\& Title   : authority
\& Usage   : $authority    = $obj\->authority()
\& Function: a string which represents the organisation which
\&           granted the namespace, written as the DNS name for
\&           organisation (eg, wormbase.org)
\& Returns : A scalar
\& Status  : Virtual
.Ve
.SS "namespace"
.IX Subsection "namespace"
.Vb 7
\& Title   : namespace
\& Usage   : $string    = $obj\->namespace()
\& Function: A string representing the name space this identifier
\&           is valid in, often the database name or the name
\&           describing the collection
\& Returns : A scalar
\& Status  : Virtual
.Ve
.SH "Implementation optional functions"
.IX Header "Implementation optional functions"
These functions are helper functions that are provided by
the interface but can be overridden if so wished
.SS "lsid_string"
.IX Subsection "lsid_string"
.Vb 4
\& Title   : lsid_string
\& Usage   : $string   = $obj\->lsid_string()
\& Function: a string which gives the LSID standard
\&           notation for the identifier of interest
\&
\&
\& Returns : A scalar
.Ve
.SS "namespace_string"
.IX Subsection "namespace_string"
.Vb 5
\& Title   : namespace_string
\& Usage   : $string   = $obj\->namespace_string()
\& Function: a string which gives the common notation of
\&           namespace:object_id.version
\& Returns : A scalar
.Ve
