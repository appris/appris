.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::Handler::GenericRichSeqHandler 3pm"
.TH Bio::SeqIO::Handler::GenericRichSeqHandler 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::Handler::GenericRichSeqHandler \- Bio::HandlerI\-based
data handler for GenBank/EMBL/UniProt (and other) sequence data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # MyHandler is a GenericRichSeqHandler object.
\&  # inside a parser (driver) constructor....
\&
\&  $self\->seq_handler($handler || MyHandler\->new(\-format => \*(Aqgenbank\*(Aq));
\&
\&  # in next_seq() in driver...
\&
\&  $hobj = $self\->seqhandler();
\&
\&  # roll data up into hashref chunks, pass off into Handler for processing...
\&
\&  $hobj\->data_handler($data);
\&
\&  # or retrieve Handler methods and pass data directly to Handler methods...
\&
\&  my $hmeth = $hobj\->handler_methods;
\&
\&  if ($hmeth\->{ $data\->{NAME} }) {
\&      my $mth = $hmeth\->{ $data\->{NAME} };
\&      $hobj\->$mth($data);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an experimental implementation of a sequence-based HandlerBaseI parser
and may change over time. It is possible (nay, likely) that the way handler
methods are set up will change over development to allow more flexibility.
Release pumpkins, please do not add this to a release until the \s-1API\s0 has settled.
It is also likely that \fBwrite_seq()\fR will not work properly for some data.
.PP
Standard Developer caveats:
.PP
Do not use for production purposes.
Not responsible for destroying (your data|computer|world).
Do not stare directly at GenericRichSeqHandler.
If GenericRichSeqHandler glows, back slowly away and call for help.
.PP
Consider yourself warned!
.PP
This class acts as a demonstration on how to handle similar data chunks derived
from Bio::SeqIO::gbdriver, Bio::SeqIO::embldriver, and Bio::SeqIO::swissdriver
using similar (or the same) handler methods.
.PP
The modules currently pass all previous tests in t/genbank.t, t/embl.t, and
t/swiss.t yet all use the same handler methods (the collected tests for handlers
can be found in t/Handler.t). Some tweaking of the methods themselves is
probably in order over the long run to ensure that data is consistently handled
for each parser.  Round-trip tests are probably in order here...
.PP
Though a Bio::Seq::SeqBuilder is employed for building sequence objects no
bypassing of data based on builder slots has been implemented (yet); this is
planned in the near future.
.PP
As a reminder: this is the current Annotation data chunk (via Data::Dumper):
.PP
.Vb 8
\&  $VAR1 = {
\&            \*(AqNAME\*(Aq => \*(AqREFERENCE\*(Aq,
\&            \*(AqDATA\*(Aq => \*(Aq1  (bases 1 to 10001)\*(Aq
\&            \*(AqAUTHORS\*(Aq => \*(AqInternational Human Genome Sequencing Consortium.\*(Aq
\&            \*(AqTITLE\*(Aq => \*(AqThe DNA sequence of Homo sapiens\*(Aq
\&            \*(AqJOURNAL\*(Aq => \*(AqUnpublished (2003)\*(Aq
\&          };
\&  ...
.Ve
.PP
This is the current SeqFeature data chunk (again via Data::Dumper):
.PP
.Vb 10
\&  $VAR1 = {
\&            \*(Aqmol_type\*(Aq => \*(Aqgenomic DNA\*(Aq,
\&            \*(AqLOCATION\*(Aq => \*(Aq<1..>10001\*(Aq,
\&            \*(AqNAME\*(Aq => \*(AqFEATURES\*(Aq,
\&            \*(AqFEATURE_KEY\*(Aq => \*(Aqsource\*(Aq,
\&            \*(Aqnote\*(Aq => \*(AqAccession AL451081 sequenced by The Sanger Centre\*(Aq,
\&            \*(Aqdb_xref\*(Aq => \*(Aqtaxon:9606\*(Aq,
\&            \*(Aqclone\*(Aq => \*(AqRP11\-302I18\*(Aq,
\&            \*(Aqorganism\*(Aq => \*(AqHomo sapiens\*(Aq
\&          };
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Chris Fields"
.IX Header "AUTHOR - Chris Fields"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   :  new
\& Usage   :  
\& Function:  
\& Returns :  
\& Args    :  \-format    Sequence format to be mapped for handler methods
\&            \-builder   Bio::Seq::SeqBuilder object (normally defined in
\&                       SequenceStreamI object implementation constructor)
\& Throws  :  On undefined \*(Aq\-format\*(Aq sequence format parameter
\& Note    :  Still under heavy development
.Ve
.SH "Bio::HandlerBaseI implementing methods"
.IX Header "Bio::HandlerBaseI implementing methods"
.SS "handler_methods"
.IX Subsection "handler_methods"
.Vb 11
\& Title   :  handler_methods
\& Usage   :  $handler\->handler_methods(\*(AqGenBank\*(Aq)
\&            %handlers = $handler\->handler_methods();
\& Function:  Retrieve the handler methods used for the current format() in
\&            the handler.  This assumes the handler methods are already
\&            described in the HandlerI\-implementing class.
\& Returns :  a hash reference with the data type handled and the code ref
\&            associated with it.
\& Args    :  [optional] String representing the sequence format.  If set here
\&            this will also set sequence_format()
\& Throws  :  On unimplemented sequence format in %HANDLERS
.Ve
.SS "data_handler"
.IX Subsection "data_handler"
.Vb 5
\& Title   :  data_handler
\& Usage   :  $handler\->data_handler($data)
\& Function:  Centralized method which accepts all data chunks, then distributes
\&            to the appropriate methods for processing based on the chunk name
\&            from within the HandlerBaseI object.
\&
\&            One can also use 
\& Returns :  None
\& Args    :  an hash ref containing a data chunk.
.Ve
.SS "reset_parameters"
.IX Subsection "reset_parameters"
.Vb 6
\& Title   :  reset_parameters
\& Usage   :  $handler\->reset_parameters()
\& Function:  Resets the internal cache of data (normally object parameters for
\&            a builder or factory)
\& Returns :  None
\& Args    :  None
.Ve
.SS "format"
.IX Subsection "format"
.Vb 9
\& Title   :  format
\& Usage   :  $handler\->format(\*(AqGenBank\*(Aq)
\& Function:  Get/Set the format for the report/record being parsed. This can be
\&            used to set handlers in classes which are capable of processing
\&            similar data chunks from multiple driver modules.
\& Returns :  String with the sequence format
\& Args    :  [optional] String with the sequence format
\& Note    :  The format may be used to set the handlers (as in the
\&            current GenericRichSeqHandler implementation)
.Ve
.SS "get_params"
.IX Subsection "get_params"
.Vb 8
\& Title   :  get_params
\& Usage   :  $handler\->get_params(\*(Aq\-species\*(Aq)
\& Function:  Convenience method used to retrieve the specified
\&            parameters from the internal parameter cache
\& Returns :  Hash ref containing parameters requested and data as
\&            key\-value pairs.  Note that some parameter values may be 
\&            objects, arrays, etc.
\& Args    :  List (array) representing the parameters requested
.Ve
.SS "set_params"
.IX Subsection "set_params"
.Vb 5
\& Title   :  set_params
\& Usage   :  $handler\->set_param({\*(Aq\-species\*(Aq)
\& Function:  Convenience method used to set specific parameters
\& Returns :  None
\& Args    :  Hash ref containing the data to be passed as key\-value pairs
.Ve
.SH "Methods unique to this implementation"
.IX Header "Methods unique to this implementation"
.SS "seqbuilder"
.IX Subsection "seqbuilder"
.Vb 7
\& Title   :  seqbuilder
\& Usage   :  
\& Function:  
\& Returns :  
\& Args    :
\& Throws  :
\& Note    :
.Ve
.SS "build_sequence"
.IX Subsection "build_sequence"
.Vb 7
\& Title   :  build_sequence
\& Usage   :  
\& Function:  
\& Returns :  
\& Args    :
\& Throws  :
\& Note    :
.Ve
.SS "location_factory"
.IX Subsection "location_factory"
.Vb 7
\& Title   :  location_factory
\& Usage   :  
\& Function:  
\& Returns :  
\& Args    :
\& Throws  :
\& Note    :
.Ve
.SS "annotation_collection"
.IX Subsection "annotation_collection"
.Vb 7
\& Title   :  annotation_collection
\& Usage   :  
\& Function:  
\& Returns :  
\& Args    :
\& Throws  :
\& Note    :
.Ve
