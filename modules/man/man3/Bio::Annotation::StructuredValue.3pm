.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::StructuredValue 3pm"
.TH Bio::Annotation::StructuredValue 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Annotation::StructuredValue \- A scalar with embedded structured
information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Bio::Annotation::StructuredValue;
\&   use Bio::Annotation::Collection;
\&
\&   my $col = Bio::Annotation::Collection\->new();
\&   my $sv = Bio::Annotation::StructuredValue\->new(\-value => \*(Aqsomeval\*(Aq);
\&   $col\->add_Annotation(\*(Aqtagname\*(Aq, $sv);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Scalar value annotation object.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
or the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp\-at\-gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : my $sv = Bio::Annotation::StructuredValue\->new();
\& Function: Instantiate a new StructuredValue object
\& Returns : Bio::Annotation::StructuredValue object
\& Args    : \-value => $value to initialize the object data field [optional]
\&           \-tagname => $tag to initialize the tagname [optional]
.Ve
.SH "AnnotationI implementing functions"
.IX Header "AnnotationI implementing functions"
.SS "as_text"
.IX Subsection "as_text"
.Vb 5
\& Title   : as_text
\& Usage   : my $text = $obj\->as_text
\& Function: return the string "Value: $v" where $v is the value
\& Returns : string
\& Args    : none
.Ve
.SS "display_text"
.IX Subsection "display_text"
.Vb 4
\& Title   : display_text
\& Usage   : my $str = $ann\->display_text();
\& Function: returns a string. Unlike as_text(), this method returns a string
\&           formatted as would be expected for te specific implementation.
\&
\&           One can pass a callback as an argument which allows custom text
\&           generation; the callback is passed the current instance and any text
\&           returned
\& Example :
\& Returns : a string
\& Args    : [optional] callback
.Ve
.SS "hash_tree"
.IX Subsection "hash_tree"
.Vb 6
\& Title   : hash_tree
\& Usage   : my $hashtree = $value\->hash_tree
\& Function: For supporting the AnnotationI interface just returns the value
\&           as a hashref with the key \*(Aqvalue\*(Aq pointing to the value
\& Returns : hashrf
\& Args    : none
.Ve
.SS "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj\->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
\&
\&           Setting this is optional. If set, it obviates the need to provide
\&           a tag to AnnotationCollection when adding this object.
\& Example :
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SH "Specific accessors for StructuredValue"
.IX Header "Specific accessors for StructuredValue"
.SS "value"
.IX Subsection "value"
.Vb 3
\& Title   : value
\& Usage   : $obj\->value($newval)
\& Function: Get/set the value for this annotation.
\&
\&           Set mode is here only to retain compatibility with
\&           SimpleValue. It is equivalent to calling
\&           add_value([0], $newval).
\&
\&           In get mode, this implementation allows one to pass additional
\&           parameters that control how the structured annotation
\&           components will be joined together to form a
\&           string. Recognized are presently
\&               \-joins     a reference to an array of join strings, the
\&                          elements at index i applying to joining
\&                          annotations at dimension i. The last element
\&                          will be re\-used for dimensions higher than i.
\&                          Defaults to [\*(Aq; \*(Aq].
\&               \-brackets  a reference to an array of two strings
\&                          denoting the opening and closing brackets for
\&                          the elements of one dimension, if there is
\&                          more than one element in the dimension.
\&                          Defaults to [\*(Aq(\*(Aq,\*(Aq)\*(Aq].
\&
\& Returns : value of value
\& Args    : newvalue (optional)
.Ve
.SS "get_values"
.IX Subsection "get_values"
.Vb 8
\& Title   : get_values
\& Usage   :
\& Function: Get the top\-level array of values. Each of the elements will
\&           recursively be a reference to an array or a scalar, depending
\&           on the depth of this structured value annotation.
\& Example :
\& Returns : an array
\& Args    : none
.Ve
.SS "get_all_values"
.IX Subsection "get_all_values"
.Vb 7
\& Title   : get_all_values
\& Usage   :
\& Function: Flattens all values in this structured annotation and
\&           returns them as an array.
\& Example :
\& Returns : the (flat) array of values
\& Args    : none
.Ve
.SS "add_value"
.IX Subsection "add_value"
.Vb 4
\& Title   : add_value
\& Usage   :
\& Function: Adds the given value to the structured annotation at the
\&           given index.
\&
\&           The index is multi\-dimensional, with the first dimension
\&           applying to the first level, and so forth. If a particular
\&           dimension or a particular index does not exist yet, it will
\&           be created. If it does exist and adding the value would
\&           mean replacing a scalar with an array reference, we throw
\&           an exception to prevent unintended damage. An index of \-1
\&           at any dimension means append.
\&
\&           If an array of values is to be added, it will create an
\&           additional dimension at the index specified, unless the
\&           last index value is \-1, in which case they will all be
\&           appended to the last dimension.
\&
\& Example :
\& Returns : none
\& Args    : the index at which to add (a reference to an array)
\&           the value(s) to add
.Ve
