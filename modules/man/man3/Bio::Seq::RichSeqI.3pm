.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Seq::RichSeqI 3pm"
.TH Bio::Seq::RichSeqI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Seq::RichSeqI \- interface for sequences from rich data sources, mostly databases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    @secondary   = $richseq\->get_secondary_accessions;
\&    $division    = $richseq\->division;
\&    $mol         = $richseq\->molecule;
\&    @dates       = $richseq\->get_dates;
\&    $seq_version = $richseq\->seq_version;
\&    $pid         = $richseq\->pid;
\&    @keywords    = $richseq\->get_keywords;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface extends the Bio::SeqI interface to give additional
functionality to sequences with richer data sources, in particular from database
sequences (\s-1EMBL,\s0 GenBank and Swissprot). For a general implementation, please
see the documentation for Bio::Seq::RichSeq.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with a _
.SS "get_secondary_accessions"
.IX Subsection "get_secondary_accessions"
.Vb 3
\& Title   : get_secondary_accessions
\& Usage   : 
\& Function: Get the secondary accessions for a sequence.
\&
\&           An implementation that allows modification of this array
\&           property should provide the methods add_secondary_accession
\&           and remove_secondary_accessions, with obvious purpose.
\&
\& Example :
\& Returns : an array of strings
\& Args    : none
.Ve
.SS "division"
.IX Subsection "division"
.Vb 4
\& Title   : division
\& Usage   :
\& Function: Get (and set, depending on the implementation) the division for
\&           a sequence.
\&
\&           Examples from GenBank are PLN (plants), PRI (primates), etc.
\& Example :
\& Returns : a string
\& Args    :
.Ve
.SS "molecule"
.IX Subsection "molecule"
.Vb 4
\& Title   : molecule
\& Usage   :
\& Function: Get (and set, depending on the implementation) the molecule
\&           type for the sequence.
\&
\&           This is not necessarily the same as Bio::PrimarySeqI::alphabet(),
\&           because it is databank\-specific.
\& Example :
\& Returns : a string
\& Args    :
.Ve
.SS "pid"
.IX Subsection "pid"
.Vb 7
\& Title   : pid
\& Usage   :
\& Function: Get (and set, depending on the implementation) the PID property
\&           for the sequence.
\& Example :
\& Returns : a string
\& Args    :
.Ve
.SS "get_dates"
.IX Subsection "get_dates"
.Vb 4
\& Title   : get_dates
\& Usage   :
\& Function: Get (and set, depending on the implementation) the dates the
\&           databank entry specified for the sequence
\&
\&           An implementation that allows modification of this array
\&           property should provide the methods add_date and
\&           remove_dates, with obvious purpose.
\&
\& Example :
\& Returns : an array of strings
\& Args    :
.Ve
.SS "seq_version"
.IX Subsection "seq_version"
.Vb 11
\& Title   : seq_version
\& Usage   :
\& Function: Get (and set, depending on the implementation) the version string
\&           of the sequence.
\& Example :
\& Returns : a string
\& Args    :
\& Note    : this differs from Bio::PrimarySeq version() in that this explicitly
\&           refers to the sequence record version one would find in a typical
\&           sequence file.  It is up to the implementation whether this is set
\&           separately or falls back to the more generic Bio::Seq::version()
.Ve
.SS "get_keywords"
.IX Subsection "get_keywords"
.Vb 3
\& Title   : get_keywords
\& Usage   : $obj\->get_keywords()
\& Function: Get the keywords for this sequence object.
\&
\&           An implementation that allows modification of this array
\&           property should provide the methods add_keyword and
\&           remove_keywords, with obvious purpose.
\&
\& Returns : an array of strings
\& Args    :
.Ve
