.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Prediction::Gene 3pm"
.TH Bio::Tools::Prediction::Gene 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Prediction::Gene \- a predicted gene structure feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #See documentation of methods.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A feature representing a predicted gene structure. This class actually
inherits off Bio::SeqFeature::Gene::Transcript and therefore has all that
functionality, plus a few methods supporting predicted sequence features,
like a predicted \s-1CDS\s0 and a predicted translation.
.PP
Exons held by an instance of this class will usually be instances of
Bio::Tools::Prediction::Exon, although they do not have to be. Refer to the
documentation of the class that produced the instance.
.PP
Normally, you will not want to create an instance of this class yourself.
Instead, classes representing the results of gene structure prediction
programs will do that.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp\-at\-gmx.net or hilmar.lapp\-at\-pharma.novartis.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "predicted_cds"
.IX Subsection "predicted_cds"
.Vb 4
\& Title   : predicted_cds
\& Usage   : $predicted_cds_dna = $gene\->predicted_cds();
\&           $gene\->predicted_cds($predicted_cds_dna);
\& Function: Get/Set the CDS (coding sequence) as predicted by a program.
\&
\&           This method is independent of an attached_seq. There is no
\&           guarantee whatsoever that the returned CDS has anything to do
\&           (e.g., matches) with the sequence covered by the exons as annotated
\&           through this object.
\&
\& Example :
\& Returns : A Bio::PrimarySeqI implementing object holding the DNA sequence
\&           defined as coding by a prediction of a program.
\& Args    : On set, a Bio::PrimarySeqI implementing object holding the DNA 
\&           sequence defined as coding by a prediction of a program.
.Ve
.SS "predicted_protein"
.IX Subsection "predicted_protein"
.Vb 4
\& Title   : predicted_protein
\& Usage   : $predicted_protein_seq = $gene\->predicted_protein();
\&           $gene\->predicted_protein($predicted_protein_seq);
\& Function: Get/Set the protein translation as predicted by a program.
\&
\&           This method is independent of an attached_seq. There is no
\&           guarantee whatsoever that the returned translation has anything to
\&           do with the sequence covered by the exons as annotated
\&           through this object, or the sequence returned by predicted_cds(),
\&           although it should usually be just the standard translation.
\&
\& Example :
\& Returns : A Bio::PrimarySeqI implementing object holding the protein 
\&           translation as predicted by a program.
\& Args    : On set, a Bio::PrimarySeqI implementing object holding the protein 
\&           translation as predicted by a program.
.Ve
