.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::DB::UpdateableSeqI 3pm"
.TH Bio::DB::UpdateableSeqI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::UpdateableSeqI \- An interface for writing to a database of sequences.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # get a Bio::DB::UpdateableSeqI somehow
\&    eval {
\&        my ( @updatedseqs, @newseqs, @deadseqs);
\&        my $seq = $db\->get_Seq_by_id(\*(AqROA1_HUMAN\*(Aq);
\&        $seq\->desc(\*(Aqa new description\*(Aq);
\&
\&        push @updatedseqs, $seq;
\&
\&        $db\->write_seq(\e@updatedseqs, \e@newseqs, \e@deadseqs);
\&    };
\&    if( $@ ) {
\&        print STDERR "an error when trying to write seq : $@\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module seeks to provide a simple method for pushing sequence changes 
back to a Sequence Database \- which can be an \s-1SQL\s0 compliant database, a file 
based database, AceDB, etc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Stajich <jason@bioperl.org>
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 9
\&  Title   : write_seq
\&  Usage   : write_seq(\e@updatedseqs, \e@addedseqs, \e@deadseqs)
\&  Function: updates sequences in first array,
\&            adds sequences in the second array,
\&            and removes sequences in the third array.
\&  Example :
\&  Returns :
\&  Args    : arrays of sequence objects that must be obtained from
\&            Bio::DB::UpdateableSeqI.
.Ve
.SS "_add_seq"
.IX Subsection "_add_seq"
.Vb 7
\& Title   : _add_seq
\& Usage   : _add_seq($seq)
\& Function: Adds a new sequence
\& Example : 
\& Returns : will throw an exception if
\&           sequences accession number already exists
\& Args    : a new seq object \- should have an accession number
.Ve
.SS "_remove_seq"
.IX Subsection "_remove_seq"
.Vb 7
\& Title   : _remove_seq
\& Usage   : _remove_seq($seq)
\& Function: Removes an existing sequence
\& Example : 
\& Returns : will throw an exception if
\&           sequence does not exists for the primary_id
\& Args    : a seq object that was retrieved from Bio::DB::UpdateableSeqI
.Ve
.SS "_update_seq"
.IX Subsection "_update_seq"
.Vb 7
\& Title   : _update_seq
\& Usage   : _update_seq($seq)
\& Function: Updates a sequence
\& Example : 
\& Returns : will throw an exception if
\&           sequence is out of sync from expected val.
\& Args    : a seq object that was retrieved from Bio::DB::UpdateableSeqI
.Ve
.SH "Methods inherieted from Bio::DB::RandomAccessI"
.IX Header "Methods inherieted from Bio::DB::RandomAccessI"
.SS "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 6
\& Title   : get_Seq_by_id
\& Usage   : $seq = $db\->get_Seq_by_id(\*(AqROA1_HUMAN\*(Aq)
\& Function: Gets a Bio::Seq object by its name
\& Returns : a Bio::Seq object
\& Args    : the id (as a string) of a sequence
\& Throws  : "id does not exist" exception
.Ve
.SS "get_Seq_by_acc"
.IX Subsection "get_Seq_by_acc"
.Vb 6
\& Title   : get_Seq_by_acc
\& Usage   : $seq = $db\->get_Seq_by_acc(\*(AqX77802\*(Aq);
\& Function: Gets a Bio::Seq object by accession number
\& Returns : A Bio::Seq object
\& Args    : accession number (as a string)
\& Throws  : "acc does not exist" exception
.Ve
.SH "Methods inheirited from Bio::DB::SeqI"
.IX Header "Methods inheirited from Bio::DB::SeqI"
.SS "get_PrimarySeq_stream"
.IX Subsection "get_PrimarySeq_stream"
.Vb 6
\& Title   : get_PrimarySeq_stream
\& Usage   : $stream = get_PrimarySeq_stream
\& Function: Makes a Bio::DB::SeqStreamI compliant object
\&           which provides a single method, next_primary_seq
\& Returns : Bio::DB::SeqStreamI
\& Args    : none
.Ve
.SS "get_all_primary_ids"
.IX Subsection "get_all_primary_ids"
.Vb 11
\& Title   : get_all_ids
\& Usage   : @ids = $seqdb\->get_all_primary_ids()
\& Function: gives an array of all the primary_ids of the 
\&           sequence objects in the database. These
\&           maybe ids (display style) or accession numbers
\&           or something else completely different \- they
\&           *are not* meaningful outside of this database
\&           implementation.
\& Example :
\& Returns : an array of strings
\& Args    : none
.Ve
.SS "get_Seq_by_primary_id"
.IX Subsection "get_Seq_by_primary_id"
.Vb 6
\& Title   : get_Seq_by_primary_id
\& Usage   : $seq = $db\->get_Seq_by_primary_id($primary_id_string);
\& Function: Gets a Bio::Seq object by the primary id. The primary
\&           id in these cases has to come from $db\->get_all_primary_ids.
\&           There is no other way to get (or guess) the primary_ids
\&           in a database.
\&
\&           The other possibility is to get Bio::PrimarySeqI objects
\&           via the get_PrimarySeq_stream and the primary_id field
\&           on these objects are specified as the ids to use here.
\& Returns : A Bio::Seq object
\& Args    : accession number (as a string)
\& Throws  : "acc does not exist" exception
.Ve
