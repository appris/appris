.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Signalp 3pm"
.TH Bio::Tools::Signalp 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Signalp \- parser for Signalp output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Bio::Tools::Signalp;
\&
\& my $parser = Bio::Tools::Signalp\->new(\-fh =>$filehandle );
\&
\& while( my $sp_feat = $parser\->next_result ) {
\&   if ($sp_feat\->score > 0.9) {
\&      push @likely_sigpep, $sp_feat;
\&   }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`SignalP\*(C'\fR predicts the presence and location of signal peptide
cleavage sites in amino acid sequences.
.PP
Bio::Tools::Signalp parses the output of \f(CW\*(C`SignalP\*(C'\fR to provide a 
Bio::SeqFeature::Generic object describing the signal peptide
found, if any. It returns a variety of tags extracted from the \s-1NN\s0 and \s-1HMM\s0
analysis. Most importantly, the \f(CW\*(C`score()\*(C'\fR attribute contains the
\&\s-1NN\s0 probability of this being a true signal peptide.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
.Vb 3
\& User feedback is an integral part of the evolution of this and other
\& Bioperl modules. Send your comments and suggestions preferably to
\& the Bioperl mailing list.  Your participation is much appreciated.
\&
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted va the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
# Please direct questions and support issues to \fIbioperl\-l@bioperl.org\fR
.PP
Based on the EnsEMBL module Bio::EnsEMBL::Pipeline::Runnable::Protein::Signalp
originally written by Marc Sohrmann (ms2_AT_sanger.ac.uk). Written in BioPipe by
Balamurugan Kumarasamy savikalpa_AT_fugu\-sg.org. Cared for by the Fugu
Informatics team (fuguteam_AT_fugu\-sg.org)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Torsten Seemann \- torsten.seemann \s-1AT\s0 infotech.monash.edu.au
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Signalp\->new();
\& Function: Builds a new Bio::Tools::Signalp object
\& Returns : Bio::Tools::Signalp
\& Args    : \-fh/\-file => $val, # for initing input, see Bio::Root::IO
.Ve
.SS "next_result"
.IX Subsection "next_result"
.Vb 5
\& Title   : next_result
\& Usage   : my $feat = $signalp\->next_result
\& Function: Get the next result set from parser data
\& Returns : Bio::SeqFeature::Generic
\& Args    : none
.Ve
.SS "_parse_hmm_result"
.IX Subsection "_parse_hmm_result"
.Vb 5
\& Title   : _parse_hmm_result
\& Usage   : $self\->_parse_hmm_result(\e%feature)
\& Function: Internal (not to be used directly)
\& Returns : hash of feature values
\& Args    : hash of more feature values
.Ve
.SS "_create_feature"
.IX Subsection "_create_feature"
.Vb 5
\& Title   : _create_feature
\& Usage   : $self\->create_feature(\e%feature)
\& Function: Internal (not to be used directly)
\& Returns : hash of feature values
\& Args    : hash of more feature values
.Ve
.SS "_seqname"
.IX Subsection "_seqname"
.Vb 5
\& Title   : _seqname
\& Usage   : $self\->_seqname($name)
\& Function: Internal (not to be used directly)
\& Returns :
\& Args    :
.Ve
.SS "_fact1"
.IX Subsection "_fact1"
.Vb 5
\& Title   : _fact1
\& Usage   : $self\->fact1($fact1)
\& Function: Internal (not to be used directly)
\& Returns : 
\& Args    :
.Ve
