.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Index::AbstractSeq 3pm"
.TH Bio::Index::AbstractSeq 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Index::AbstractSeq \- base class for AbstractSeq
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Make a new sequence file indexing package
\&
\&  package MyShinyNewIndexer;
\&
\&  use base qw(Bio::Index::AbstractSeq);
\&
\&  # Now provide the necessary methods...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a common base class for multiple sequence files built using 
the Bio::Index::Abstract system, and provides a Bio::DB::SeqI 
interface.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions 
preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. 
Internal methods are usually preceded with a _
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Index::Abstract, which provides dbm indexing for flat files of 
any type, containing sequence or not. Bio::Index::AbstractSeq inherits 
from Bio::Index::Abstract
.SS "_file_format"
.IX Subsection "_file_format"
.Vb 8
\& Title   : _file_format
\& Usage   : $self\->_file_format
\& Function: Derived classes should override this
\&           method (it throws an exception here)
\&           to give the file format of the files used
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "fetch"
.IX Subsection "fetch"
.Vb 6
\&  Title   : fetch
\&  Usage   : $index\->fetch( $id )
\&  Function: Returns a Bio::Seq object from the index
\&  Example : $seq = $index\->fetch( \*(AqdJ67B12\*(Aq )
\&  Returns : Bio::Seq object
\&  Args    : ID
.Ve
.SS "_get_SeqIO_object"
.IX Subsection "_get_SeqIO_object"
.Vb 6
\&  Title   : _get_SeqIO_object
\&  Usage   : $index\->_get_SeqIO_object( $file )
\&  Function: Returns a Bio::SeqIO object for the file
\&  Example : $seq = $index\->_get_SeqIO_object( 0 )
\&  Returns : Bio::SeqIO object
\&  Args    : File number (an integer)
.Ve
.SS "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 6
\& Title   : get_Seq_by_id
\& Usage   : $seq = $db\->get_Seq_by_id()
\& Function: retrieves a sequence object, identically to
\&           \->fetch, but here behaving as a Bio::DB::BioSeqI
\& Returns : new Bio::Seq object
\& Args    : string represents the id
.Ve
.SS "get_Seq_by_acc"
.IX Subsection "get_Seq_by_acc"
.Vb 6
\& Title   : get_Seq_by_acc
\& Usage   : $seq = $db\->get_Seq_by_acc()
\& Function: retrieves a sequence object, identically to
\&           \->fetch, but here behaving as a Bio::DB::BioSeqI
\& Returns : new Bio::Seq object
\& Args    : string represents the accession number
.Ve
.SS "get_PrimarySeq_stream"
.IX Subsection "get_PrimarySeq_stream"
.Vb 6
\& Title   : get_PrimarySeq_stream
\& Usage   : $stream = get_PrimarySeq_stream
\& Function: Makes a Bio::DB::SeqStreamI compliant object
\&           which provides a single method, next_primary_seq
\& Returns : Bio::DB::SeqStreamI
\& Args    : none
.Ve
.SS "get_all_primary_ids"
.IX Subsection "get_all_primary_ids"
.Vb 11
\& Title   : get_all_primary_ids
\& Usage   : @ids = $seqdb\->get_all_primary_ids()
\& Function: gives an array of all the primary_ids of the 
\&           sequence objects in the database. These
\&           maybe ids (display style) or accession numbers
\&           or something else completely different \- they
\&           *are not* meaningful outside of this database
\&           implementation.
\& Example :
\& Returns : an array of strings
\& Args    : none
.Ve
.SS "get_Seq_by_primary_id"
.IX Subsection "get_Seq_by_primary_id"
.Vb 6
\& Title   : get_Seq_by_primary_id
\& Usage   : $seq = $db\->get_Seq_by_primary_id($primary_id_string);
\& Function: Gets a Bio::Seq object by the primary id. The primary
\&           id in these cases has to come from $db\->get_all_primary_ids.
\&           There is no other way to get (or guess) the primary_ids
\&           in a database.
\&
\&           The other possibility is to get Bio::PrimarySeqI objects
\&           via the get_PrimarySeq_stream and the primary_id field
\&           on these objects are specified as the ids to use here.
\& Returns : A Bio::Seq object
\& Args    : primary id (as a string)
\& Throws  : "acc does not exist" exception
.Ve
