.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::TargetP 3pm"
.TH Bio::Tools::TargetP 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::TargetP \- Results of one TargetP run
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Bio::Tools::TargetP;
\&
\&   #filename for  TargetP result :
\&   $targetp = Bio::Tools::TargetP\->new(\-file => \*(Aqtargetp.out\*(Aq);
\&
\&   # filehandle for TargetP :
\&   $targetp = Bio::Tools::TargetP\->new( \-fh  => \e*INPUT );
\&
\&   ### targetp v1.1 prediction results ##################################
\&   #Number of query sequences:  11
\&   #Cleavage site predictions included.
\&   #Using NON\-PLANT networks.
\&   #
\&   #Name                  Len            mTP     SP  other  Loc  RC  TPlen
\&   #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   #swall|Q9LIP3|C72Y_AR  500          0.245  0.935  0.009   S    2     22
\&   #swall|Q52813|AAPQ_RH  400          0.170  0.462  0.577   _    5      \-
\&   #swall|O86459|AAT_RHI  400          0.346  0.046  0.660   _    4      \-
\&
\&
\&
\&   # parse the results
\&   while($feature = $targetp\->next_prediction()) {
\&
\&           #$feature is a Bio::SeqFeature::Generic object
\&           my $method     = $targetp\->analysis_method();
\&           my $vesion     = $targetp\->analysis_method_version() || $feature\->source();
\&           my $seqid      = $feature\->seq_id();
\&           # ...
\&     }
\&
\&   # essential if you gave a filename at initialization (otherwise the file
\&   # will stay open)
\&   $targetp\->close();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TargetP modules will provides parsed information about protein
localization.  It reads in a targetp output file.  It parses the
results, and returns a Bio::SeqFeature::Generic object for each
seqeunces found to have a subcellular localization
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS \- Emmanuel Quevillon"
.IX Header "AUTHORS - Emmanuel Quevillon"
Email emmanuel.quevillon@versailles.inra.fr
.PP
Describe contact details here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. 
Internal methods are usually preceded with a _
.SH "analysis_method"
.IX Header "analysis_method"
.Vb 4
\& Usage     : $self\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\& Returns   : String
\& Argument  : n/a
.Ve
.SH "network"
.IX Header "network"
.Vb 6
\&  Title   : network
\&  Usage   : $self\->network($network)
\&  Function: This method Get/Set the network used for the analysis (PLANT or NON\-PLANT)
\&  Example :
\&  Returns : string
\&  Arguments: On set, the network used
.Ve
.SH "cleavage"
.IX Header "cleavage"
.Vb 6
\&  Title    :  cleavage
\&  Usage    : $self\->cleavage($cleavage)
\&  Function : This method Get/Set if SignalP program was used to run TargetP
\&  Example  :
\&  Returns  : 1 or 0
\&  Arguments: On set, the cleavage used or not
.Ve
.SH "next_prediction"
.IX Header "next_prediction"
.Vb 4
\&  Usage    : $targetp\->next_prediction()
\&  Purpose  : Returns the next TargetP prediction
\&  Returns  : A Bio::SeqFeature::Generic object
\&  Arguments: n/a
.Ve
.SH "create_feature"
.IX Header "create_feature"
.Vb 6
\&  Title     : create_feature
\&  Usage     : $self\->create_feature(\e%hash);
\&  Function  : This method creates a new Bio::SeqFeature::Generic object
\&  Example   : 
\&  Returns   : Bio::SeqFeature::Generic
\&  Arguments : hash reference
.Ve
.SS "\s-1PRIVATE METHODS\s0"
.IX Subsection "PRIVATE METHODS"
.SS "_initialize_state"
.IX Subsection "_initialize_state"
.Vb 8
\& Title   : _initialize_state
\& Usage   : n/a; usually called by _initialize() itself called by new()
\& Function: This method is supposed to reset the state such that any \*(Aqhistory\*(Aq
\&           is lost. State information that does not change during object
\&           lifetime is not considered as history, e.g. parent, name, etc shall
\&           not be reset. An inheriting object should only be concerned with
\&           state information it introduces itself, and for everything else
\&           call SUPER::_initialize_state(@args).
\&
\&           The argument syntax is the same as for new() and _initialize(),
\&           i.e., named parameters following the \-name=>$value convention.
\&           The following parameters are dealt with by the implementation
\&           provided here:
\&              \-INPUT, \-FH, \-FILE
\&           (tags are case\-insensitive).
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_predictions"
.IX Subsection "_predictions"
.Vb 4
\&  Usage    : $targetp\->_prediction()
\&  Purpose  : Returns the number of TargetP predictions
\&  Returns  : A scalar (number)
\&  Arguments: n/a
.Ve
.SS "_parsed"
.IX Subsection "_parsed"
.Vb 7
\& Title     : _parsed
\& Usage     : $targetp\->_parsed(1)
\& Function  : This method is used to know if the output result is parsed or not
\&             For internal use only
\& Example   :
\& Returns   : 1/0
\& Arguments : 1/0 for setting
.Ve
.SS "_parse_results"
.IX Subsection "_parse_results"
.Vb 7
\&  Title    : _parse_results
\&  Usage    : $self\->_parse_results()
\&  Function : This method parses a TargetP output
\&             For internal use only
\&  Example  :
\&  Returns  : n/a
\&  Arguments: none
.Ve
.SS "_parse_line"
.IX Subsection "_parse_line"
.Vb 7
\& Title    : _parse_line
\& Usage    : $self\->_parse_line($line)
\& Function : This method parses the line result
\&            For internal use only
\& Example  :
\& Returns  : Hash reference
\& Arguemnts: line to parse
.Ve
.SS "_add_feature"
.IX Subsection "_add_feature"
.Vb 7
\& Title    : _add_feature
\& Usage    : $self\->_add_feature($feature)
\& Function : This method stores a feature object
\&            For internal use only
\& Example  :
\& Returns  : n/a
\& Arguments: Bio::SeqFeature::Generic
.Ve
.SS "_toString_location"
.IX Subsection "_toString_location"
.Vb 8
\& Title    : _toString_location
\& Usage    : $self\->_toString_location($key)
\& Function : This method convert the \*(Aqone letter code\*(Aq location to 
\&            the corresponding definition
\&            For internal use only
\& Example  :
\& Returns  : Location or undef
\& Arguments: String
.Ve
