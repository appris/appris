.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Gene::Transcript 3pm"
.TH Bio::SeqFeature::Gene::Transcript 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::Gene::Transcript \- A feature representing a transcript
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # See documentation of methods.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A feature representing a transcript.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.  Bug reports can be submitted via the
 web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.SS "promoters"
.IX Subsection "promoters"
.Vb 3
\& Title   : promoters()
\& Usage   : @proms = $transcript\->promoters();
\& Function: Get the promoter features/sites of this transcript. 
\&
\&           Note that OO\-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
\&
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           promoter regions or sites.
\& Args    :
.Ve
.SS "add_promoter"
.IX Subsection "add_promoter"
.Vb 3
\& Title   : add_promoter()
\& Usage   : $transcript\->add_promoter($feature);
\& Function: Add a promoter feature/site to this transcript.
\&
\&
\&           Note that OO\-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
\&
\& Returns : 
\& Args    : A Bio::SeqFeatureI implementing object.
.Ve
.SS "flush_promoters"
.IX Subsection "flush_promoters"
.Vb 3
\& Title   : flush_promoters()
\& Usage   : $transcript\->flush_promoters();
\& Function: Remove all promoter features/sites from this transcript.
\&
\&           Note that OO\-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
\&
\& Returns : the removed features as a list
\& Args    : none
.Ve
.SS "exons"
.IX Subsection "exons"
.Vb 5
\& Title   : exons()
\& Usage   : @exons = $gene\->exons();
\&           ($inital_exon) = $gene\->exons(\*(AqInitial\*(Aq);
\& Function: Get all exon features or all exons of specified type of this 
\&           transcript.
\&
\&           Exon type is treated as a case\-insensitive regular expression and 
\&           is optional. For consistency, use only the following types: 
\&           initial, internal, terminal.
\&
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects.
\& Args    : An optional string specifying the primary_tag of the feature.
.Ve
.SS "exons_ordered"
.IX Subsection "exons_ordered"
.Vb 5
\& Title   : exons_ordered
\& Usage   : @exons = $gene\->exons_ordered();
\&           @exons = $gene\->exons_ordered("Internal");
\& Function: Get an ordered list of all exon features or all exons of specified
\&           type of this transcript.
\&
\&           Exon type is treated as a case\-insensitive regular expression and 
\&           is optional. For consistency, use only the following types:
\&
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects.
\& Args    : An optional string specifying the primary_tag of the feature.
.Ve
.SS "add_exon"
.IX Subsection "add_exon"
.Vb 3
\& Title   : add_exon()
\& Usage   : $transcript\->add_exon($exon,\*(Aqinitial\*(Aq);
\& Function: Add a exon feature to this transcript.
\&
\&           The second argument denotes the type of exon. Mixing exons with and
\&           without a type is likely to cause trouble in exons(). Either
\&           leave out the type for all exons or for none.
\&
\&           Presently, the following types are known: initial, internal, 
\&           terminal, utr, utr5prime, and utr3prime (all case\-insensitive).
\&           UTR should better be added through utrs()/add_utr().
\&
\&           If you wish to use other or additional types, you will almost
\&           certainly have to call exon_type_sortorder() in order to replace
\&           the default sort order, or mrna(), cds(), protein(), and exons()
\&           may yield unexpected results.
\&
\& Returns : 
\& Args    : A Bio::SeqFeature::Gene::ExonI implementing object.
\&           A string indicating the type of the exon (optional).
.Ve
.SS "flush_exons"
.IX Subsection "flush_exons"
.Vb 4
\& Title   : flush_exons()
\& Usage   : $transcript\->flush_exons();
\&           $transcript\->flush_exons(\*(Aqterminal\*(Aq);
\& Function: Remove all or a certain type of exon features from this transcript.
\&
\&           See add_exon() for documentation about types.
\&
\&           Calling without a type will not flush UTRs. Call flush_utrs() for
\&           this purpose.
\& Returns : the deleted features as a list
\& Args    : A string indicating the type of the exon (optional).
.Ve
.SS "introns"
.IX Subsection "introns"
.Vb 3
\& Title   : introns()
\& Usage   : @introns = $gene\->introns();
\& Function: Get all intron features this gene structure.
\&
\&           Note that this implementation generates these features
\&           on\-the\-fly, that is, it simply treats all regions between
\&           exons as introns, assuming that exons do not overlap. A
\&           consequence is that a consistent correspondence between the
\&           elements in the returned array and the array that exons()
\&           returns will exist only if the exons are properly sorted
\&           within their types (forward for plus\- strand and reverse
\&           for minus\-strand transcripts). To ensure correctness the
\&           elements in the array returned will always be sorted.
\&
\& Returns : An array of Bio::SeqFeature::Gene::Intron objects representing
\&           the intron regions.
\& Args    :
.Ve
.SS "poly_A_site"
.IX Subsection "poly_A_site"
.Vb 7
\& Title   : poly_A_site()
\& Usage   : $polyAsite = $transcript\->poly_A_site();
\& Function: Get/set the poly\-adenylation feature/site of this transcript.
\& Returns : A Bio::SeqFeatureI implementing object representing the
\&           poly\-adenylation region.
\& Args    : A Bio::SeqFeatureI implementing object on set, or FALSE to flush
\&           a previously set object.
.Ve
.SS "utrs"
.IX Subsection "utrs"
.Vb 6
\& Title   : utrs()
\& Usage   : @utr_sites = $transcript\->utrs(\*(Aqutr3prime\*(Aq);
\&           @utr_sites = $transcript\->utrs(\*(Aqutr5prime\*(Aq);
\&           @utr_sites = $transcript\->utrs();
\& Function: Get the features representing untranslated regions (UTR) of this
\&           transcript.
\&
\&           You may provide an argument specifying the type of UTR. Currently
\&           the following types are recognized: utr5prime utr3prime for UTR on the
\&           5\*(Aq and 3\*(Aq end of the CDS, respectively.
\&
\& Returns : An array of Bio::SeqFeature::Gene::UTR objects
\&           representing the UTR regions or sites.
\& Args    : Optionally, either utr3prime, or utr5prime for the the type of UTR
\&           feature.
.Ve
.SS "add_utr"
.IX Subsection "add_utr"
.Vb 4
\& Title   : add_utr()
\& Usage   : $transcript\->add_utr($utrobj, \*(Aqutr3prime\*(Aq);
\&           $transcript\->add_utr($utrobj);
\& Function: Add a UTR feature/site to this transcript.
\&
\&           The second parameter is optional and denotes the type of the UTR
\&           feature. Presently recognized types include \*(Aqutr5prime\*(Aq and \*(Aqutr3prime\*(Aq
\&           for UTR on the 5\*(Aq and 3\*(Aq end of a gene, respectively.
\&
\&           Calling this method is the same as calling 
\&           add_exon($utrobj, \*(Aqutr\*(Aq.$type). In this sense a UTR object is a
\&           special exon object, which is transcribed, not spliced out, but
\&           not translated.
\&
\&           Note that the object supplied should return FALSE for is_coding().
\&           Otherwise cds() and friends will become confused.
\&
\& Returns : 
\& Args    : A Bio::SeqFeature::Gene::UTR implementing object.
.Ve
.SS "flush_utrs"
.IX Subsection "flush_utrs"
.Vb 5
\& Title   : flush_utrs()
\& Usage   : $transcript\->flush_utrs();
\&           $transcript\->flush_utrs(\*(Aqutr3prime\*(Aq);
\& Function: Remove all or a specific type of UTR features/sites from this
\&           transcript.
\&
\&           Cf. add_utr() for documentation about recognized types.
\& Returns : a list of the removed features
\& Args    : Optionally a string denoting the type of UTR feature.
.Ve
.SS "sub_SeqFeature"
.IX Subsection "sub_SeqFeature"
.Vb 3
\& Title   : sub_SeqFeature
\& Usage   : @feats = $transcript\->sub_SeqFeature();
\& Function: Returns an array of all subfeatures.
\&
\&           This method is defined in Bio::SeqFeatureI. We override this here
\&           to include the exon etc features.
\&
\& Returns : An array Bio::SeqFeatureI implementing objects.
\& Args    : none
.Ve
.SS "flush_sub_SeqFeature"
.IX Subsection "flush_sub_SeqFeature"
.Vb 4
\& Title   : flush_sub_SeqFeature
\& Usage   : $transcript\->flush_sub_SeqFeature();
\&           $transcript\->flush_sub_SeqFeature(1);
\& Function: Removes all subfeatures.
\&
\&           This method is overridden from Bio::SeqFeature::Generic to flush
\&           all additional subfeatures like exons, promoters, etc., which is
\&           almost certainly not what you want. To remove only features added
\&           through $transcript\->add_sub_SeqFeature($feature) pass any
\&           argument evaluating to TRUE.
\&
\& Example :
\& Returns : none
\& Args    : Optionally, an argument evaluating to TRUE will suppress flushing
\&           of all transcript\-specific subfeatures (exons etc.).
.Ve
.SS "cds"
.IX Subsection "cds"
.Vb 4
\& Title   : cds
\& Usage   : $seq = $transcript\->cds();
\& Function: Returns the CDS (coding sequence) as defined by the exons
\&           of this transcript and the attached sequence.
\&
\&           If no sequence is attached this method will return false.
\&
\&           Note that the implementation provided here returns a
\&           concatenation of all coding exons, thereby assuming that
\&           exons do not overlap.
\&
\&           Note also that you cannot set the CDS via this method. Set
\&           a single CDS feature as a single exon, or derive your own
\&           class if you want to store a predicted CDS.
\&
\& Example :
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.SS "protein"
.IX Subsection "protein"
.Vb 3
\& Title   : protein()
\& Usage   : $protein = $transcript\->protein();
\& Function: Get the protein encoded by the transcript as a sequence object.
\&
\&           The implementation provided here simply calls translate() on the
\&           object returned by cds().
\&
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.SS "mrna"
.IX Subsection "mrna"
.Vb 3
\& Title   : mrna()
\& Usage   : $mrna = $transcript\->mrna();
\& Function: Get the mRNA of the transcript as a sequence object.
\&
\&           The difference to cds() is that the sequence object returned by
\&           this methods will also include UTR and the poly\-adenylation site,
\&           but not promoter sequence (TBD).
\&
\&           HL: do we really need this method?
\&
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.SS "features"
.IX Subsection "features"
.Vb 5
\& Title   : features
\& Usage   : my @features=$transcript\->features;
\& Function: returns all the features associated with this transcript
\& Returns : a list of SeqFeatureI implementing objects
\& Args    : none
.Ve
.SS "features_ordered"
.IX Subsection "features_ordered"
.Vb 6
\& Title   : features_ordered
\& Usage   : my @features=$transcript\->features_ordered;
\& Function: returns all the features associated with this transcript,
\&           in order by feature start, according to strand
\& Returns : a list of SeqFeatureI implementing objects
\& Args    : none
.Ve
