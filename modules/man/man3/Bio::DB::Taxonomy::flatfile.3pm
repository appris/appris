.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::DB::Taxonomy::flatfile 3pm"
.TH Bio::DB::Taxonomy::flatfile 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Taxonomy::flatfile \- Use the NCBI taxonomy from local indexed flat files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::Taxonomy;
\&
\&  my $db = Bio::DB::Taxonomy\->new(\-source    => \*(Aqflatfile\*(Aq ,
\&                                  \-nodesfile => \*(Aqnodes.dmp\*(Aq,
\&                                  \-namesfile => \*(Aqnames.dmp\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation of Bio::DB::Taxonomy which stores and accesses the
\&\s-1NCBI\s0 taxonomy using flat files stored locally on disk and indexed using the
DB_File module \s-1RECNO\s0 data structure for fast retrieval.
.PP
The required database files, nodes.dmp and names.dmp can be obtained from
ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala: bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::DB::Taxonomy::flatfile\->new();
\& Function: Builds a new Bio::DB::Taxonomy::flatfile object 
\& Returns : an instance of Bio::DB::Taxonomy::flatfile
\& Args    : \-directory => name of directory where index files should be created
\&           \-nodesfile => name of file containing nodes (nodes.dmp from NCBI)
\&           \-namesfile => name of the file containing names(names.dmp from NCBI)
\&           \-force     => 1 to replace current indexes even if they exist
.Ve
.SS "Bio::DB::Taxonomy interface implementation"
.IX Subsection "Bio::DB::Taxonomy interface implementation"
.SS "get_num_taxa"
.IX Subsection "get_num_taxa"
.Vb 5
\& Title   : get_num_taxa
\& Usage   : my $num = $db\->get_num_taxa();
\& Function: Get the number of taxa stored in the database.
\& Returns : A number
\& Args    : None
.Ve
.SS "get_taxon"
.IX Subsection "get_taxon"
.Vb 9
\& Title   : get_taxon
\& Usage   : my $taxon = $db\->get_taxon(\-taxonid => $taxonid)
\& Function: Get a Bio::Taxon object from the database.
\& Returns : Bio::Taxon object
\& Args    : just a single value which is the database id, OR named args:
\&           \-taxonid => taxonomy id (to query by taxonid)
\&            OR
\&           \-name    => string (to query by a taxonomy name: common name, 
\&                               scientific name, etc)
.Ve
.SS "get_taxonids"
.IX Subsection "get_taxonids"
.Vb 7
\& Title   : get_taxonids
\& Usage   : my @taxonids = $db\->get_taxonids(\*(AqHomo sapiens\*(Aq);
\& Function: Searches for a taxonid (typically ncbi_taxon_id) based on a query
\&           string. Note that multiple taxonids can match to the same supplied
\&           name.
\& Returns : array of integer ids in list context, one of these in scalar context
\& Args    : string representing taxon\*(Aqs name
.Ve
.SS "get_Children_Taxids"
.IX Subsection "get_Children_Taxids"
.Vb 6
\& Title   : get_Children_Taxids
\& Usage   : my @childrenids = $db\->get_Children_Taxids 
\& Function: Get the ids of the children of a node in the taxonomy
\& Returns : Array of Ids
\& Args    : Bio::Taxon or a taxon_id
\& Status  : deprecated (use each_Descendent())
.Ve
.SS "ancestor"
.IX Subsection "ancestor"
.Vb 6
\& Title   : ancestor
\& Usage   : my $ancestor_taxon = $db\->ancestor($taxon)
\& Function: Retrieve the full ancestor taxon of a supplied Taxon from the
\&           database. 
\& Returns : Bio::Taxon
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 6
\& Title   : each_Descendent
\& Usage   : my @taxa = $db\->each_Descendent($taxon);
\& Function: Get all the descendents of the supplied Taxon (but not their
\&           descendents, ie. not a recursive fetchall).
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "Helper methods"
.IX Subsection "Helper methods"
.SS "index_directory"
.IX Subsection "index_directory"
.Vb 6
\& Title   : index_directory
\& Function : Get/set the location that index files are stored. (this module
\&           will index the supplied database)
\& Usage   : $obj\->index_directory($newval)
\& Returns : value of index_directory (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
