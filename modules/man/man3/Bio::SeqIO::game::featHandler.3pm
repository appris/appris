.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::game::featHandler 3pm"
.TH Bio::SeqIO::game::featHandler 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::game::featHandler \-\- a class for handling feature elements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is not used directly
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqIO::game::featHandler converts game \s-1XML\s0 <annotation>
elements into flattened Bio::SeqFeature::Generic objects to be added
to the sequence
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.
.PP
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sheldon McKay"
.IX Header "AUTHOR - Sheldon McKay"
Email mckays@cshl.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $featHandler = Bio::SeqIO::game::featHandler\->new($seq, $seq_h, $ann_l)
\& Function: creates an object to deal with sequence features 
\& Returns : a handler object
\& Args    : $seq   \-\- a Bio::SeqI compliant object
\&           $seq_h \-\- ref. to a hash of other sequences associated 
\&                     with the main sequence (proteins, etc)
\&           $ann_l \-\- ref. to a list of annotations
.Ve
.SS "add_source"
.IX Subsection "add_source"
.Vb 5
\& Title   : add_source
\& Usage   : $featHandler\->add_source($seq\->length, \e%tags);
\& Function: creates a source feature
\& Returns : a Bio::SeqFeature::Generic object 
\& Args    : sequence length and a ref. to a hash of tag/value attributes
.Ve
.SS "has_gene"
.IX Subsection "has_gene"
.Vb 8
\& Title   : has_gene
\& Usage   : my $gene = $self\->_has_gene($gene, $gname, $id)
\& Function: method to get/set the current gene feature
\& Returns : a Bio::SeqFeature::Generic object (if there is a gene)
\& Args    : (optional)
\&           $gene  \-\- an XML element for the annotation
\&           $gname \-\- gene name
\&           $id    \-\- gene ID (not always the same as the name)
.Ve
.SS "_has_CDS"
.IX Subsection "_has_CDS"
.Vb 5
\& Title   : _has_CDS
\& Usage   : my $cds = $self\->_has_CDS
\& Function: internal getter/setter for CDS features
\& Returns : a Bio::SeqFeature::Generic transcript object (or nothing)
\& Args    : a Bio::SeqFeature::Generic transcript feature
.Ve
.SS "add_annotation"
.IX Subsection "add_annotation"
.Vb 9
\& Title   : add_annotation
\& Usage   : $featHandler\->add_annotation($seq, $type, $id, $tags, $feats)
\& Function: converts a containment hierarchy into an ordered list of flat features
\& Returns : nothing
\& Args    : $seq   \-\- a Bio::SeqI compliant object
\&           $type  \-\- the annotation type
\&           $id    \-\- the anotation ID
\&           $tags  \-\- ref. to a hash of tag/value attributes
\&           $feats \-\- ref to an array of Bio::SeqFeature::Generic objects
.Ve
.SS "_add_generic_annotation"
.IX Subsection "_add_generic_annotation"
.Vb 9
\& Title   : _add_generic_annotation
\& Usage   : $self\->_add_generic_annotation($seq, $type, $id, $tags, $feats)
\& Function: an internal method to handle non\-gene annotations
\& Returns : nothing
\& Args    : $seq   \-\- a Bio::SeqI compliant object
\&           $type  \-\- the annotation type
\&           $id    \-\- the anotation ID
\&           $tags  \-\- ref. to a hash of tag/value attributes
\&           $feats \-\- ref to an array of Bio::SeqFeature::Generic objects
.Ve
.SS "feature_set"
.IX Subsection "feature_set"
.Vb 8
\& Title   : feature_set
\& Usage   : push @feats, $featHandler\->feature_set($id, $gname, $set, $anntype);
\& Function: handles <feature_span> hierarchies (usually a transcript)
\& Returns : a list of Bio::SeqFeature::Generic objects
\& Args    : $id      \-\- ID of the feature set
\&           $gname   \-\- name of the gene
\&           $set     \-\- the <feature_set> object
\&           $anntype \-\- type of the parent annotation
.Ve
.SS "_build_feature_set"
.IX Subsection "_build_feature_set"
.Vb 7
\& Title   : _build_feature_set
\& Usage   : $self\->_build_feature_set($set, 1) # 1 flag means retain the exon as a subfeat
\& Function: an internal method to process attributes and subfeats of a feature set
\& Returns : nothing
\& Args    : $set \-\- a <feature_set> element
\&           1    \-\- optional flag to retain exons as subfeats.  Otherwise, they will
\&                   be converted to sublocations of a parent CDS feature
.Ve
.SS "_add_feature_span"
.IX Subsection "_add_feature_span"
.Vb 6
\& Title   : _add_feature_span
\& Usage   : $self\->_add_feature_span($el, 1)
\& Function: an internal method to process <feature_span> elements
\& Returns : nothing
\& Args    : $el \-\- a <feature_span> element
\&           1   \-\- an optional flag to retain exons as subfeatures
.Ve
.SS "_add_CDS"
.IX Subsection "_add_CDS"
.Vb 6
\& Title   : _add_CDS
\& Usage   : my $cds = $self\->_add_CDS($transcript, $tags)
\& Function: an internal method to create a CDS feature from a transcript feature
\& Returns : a Bio::SeqFeature::Generic object
\& Args    : $transcript \-\- a Bio::SeqFeature::Generic object for a transcript
\&           $tags       \-\- ref. to a hash of tag/value attributes
.Ve
