.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::UpdateableSeqI 3pm"
.TH Bio::UpdateableSeqI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::UpdateableSeqI \- Descendant of Bio::SeqI that allows updates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::SeqI for most of the documentation.
See the documentation of the methods for further details.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::UpdateableSeqI is an interface for Sequence objects which are
expected to allow users to perform basic editing functions (update/delete)
on their component SeqFeatures.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- David Block"
.IX Header "AUTHOR - David Block"
Email dblock@gene.pbi.nrc.ca
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Ewan Birney forced me to this...
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "delete_feature"
.IX Subsection "delete_feature"
.Vb 10
\& Title   : delete_feature
\& Usage   : my $orphanlist=$self\->delete_feature($feature,$transcript,$gene);
\& Function: deletes the specified $feature from the given transcript, if $transcript is sent and exists and $feature is a feature of $transcript,
\&           or from $gene if the $feature is a feature of $gene, or from $self if $transcript and $gene are not sent.  Keeps track of the features
\&           of the $gene object that may be left as orphans and returns them as a listref.
\& Example : I want to delete transcript \*(Aqabc\*(Aq of gene \*(Aqdef\*(Aq, with three exons, leaving only transcript \*(Aqghi\*(Aq with two exons.
\&           This will leave exons 1 and 3 part of \*(Aqghi\*(Aq, but exon 2 will become an orphan.
\&           my $orphanlist=$seq\->delete_feature($transcript{\*(Aqabc\*(Aq},undef,$gene{\*(Aqdef\*(Aq});
\&           $orphanlist is a reference to a list containing $exon{\*(Aq2\*(Aq};
\& Returns : a listref of orphaned features after the deletion of $feature (optional)
\& Args    : $feature \- the feature to be deleted
\&           $transcript \- the transcript containing the $feature, so that a $feature can be removed from only one transcript when there are multiple
\&                         transcripts in a gene.
\&           $gene \- the gene containing the $transcript and/or the $feature
.Ve
