.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Index::EMBL 3pm"
.TH Bio::Index::EMBL 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Index::EMBL \- Interface for indexing (multiple) EMBL/Swissprot
\&.dat files (i.e. flat file EMBL/Swissprot format).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # Complete code for making an index for several
\&    # EMBL files
\&    use Bio::Index::EMBL;
\&    use strict;
\&
\&    my $Index_File_Name = shift;
\&    my $inx = Bio::Index::EMBL\->new(\-filename => $Index_File_Name,
\&                                    \-write_flag => \*(AqWRITE\*(Aq);
\&    $inx\->make_index(@ARGV);
\&
\&    # Print out several sequences present in the index
\&    # in Fasta format
\&    use Bio::Index::EMBL;
\&    use strict;
\&
\&    my $Index_File_Name = shift;
\&    my $inx = Bio::Index::EMBL\->new(\-filename => $Index_File_Name);
\&    my $out = Bio::SeqIO\->new(\-format => \*(AqFasta\*(Aq,\-fh => \e*STDOUT);
\&
\&    foreach my $id (@ARGV) {
\&        my $seq = $inx\->fetch($id); # Returns Bio::Seq object
\&        $out\->write_seq($seq);
\&    }
\&
\&    # alternatively
\&    my ($id, $acc);
\&    my $seq1 = $inx\->get_Seq_by_id($id);
\&    my $seq2 = $inx\->get_Seq_by_acc($acc);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Inherits functions for managing dbm files from Bio::Index::Abstract.pm,
and provides the basic funtionality for indexing \s-1EMBL\s0 files, and
retrieving the sequence from them. Heavily snaffled from James Gilbert
and his Fasta system. Note: for best results 'use strict'.
.PP
The keys are the identifiers in the \s-1ID\s0 and \s-1AC\s0 lines.
.SH "FEED_BACK"
.IX Header "FEED_BACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email \- birney@sanger.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "_index_file"
.IX Subsection "_index_file"
.Vb 8
\&  Title   : _index_file
\&  Usage   : $index\->_index_file( $file_name, $i )
\&  Function: Specialist function to index EMBL format files.
\&            Is provided with a filename and an integer
\&            by make_index in its SUPER class.
\&  Example : 
\&  Returns : 
\&  Args    :
.Ve
.SS "_file_format"
.IX Subsection "_file_format"
.Vb 6
\& Title   : _file_format
\& Usage   : Internal function for indexing system
\& Function: Provides file format for this database
\& Example :
\& Returns : 
\& Args    :
.Ve
