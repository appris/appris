.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Gene::Exon 3pm"
.TH Bio::SeqFeature::Gene::Exon 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqFeature::Gene::Exon \- a feature representing an exon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # obtain an exon instance $exon somehow
\&    print "exon from ", $exon\->start(), " to ", $exon\->end(),
\&          " on seq ", $exon\->seq_id(), ", strand ", $exon\->strand(),
\&          ", encodes the peptide sequence ", 
\&          $exon\->cds()\->translate()\->seq(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a feature representing an exon by implementing
the Bio::SeqFeature::Gene::ExonI interface. By default an Exon is
coding. Supply \-is_coding => 0 to the constructor or call
\&\f(CW$exon\fR\->\fBis_coding\fR\|(0) otherwise.
.PP
Apart from that, this class also implements Bio::SeqFeatureI by
inheriting off Bio::SeqFeature::Generic.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "is_coding"
.IX Subsection "is_coding"
.Vb 11
\& Title   : is_coding
\& Usage   : if($exon\->is_coding()) {
\&                   # do something
\&           }
\&           if($is_utr) {
\&               $exon\->is_coding(0);
\&           }
\& Function: Get/set whether or not the exon codes for amino acid.
\& Returns : TRUE if the object represents a feature translated into protein,
\&           and FALSE otherwise.
\& Args    : A boolean value on set.
.Ve
.SS "primary_tag"
.IX Subsection "primary_tag"
.Vb 4
\& Title   : primary_tag
\& Usage   : $tag = $feat\->primary_tag()
\&           $feat\->primary_tag(\*(Aqexon\*(Aq)
\& Function: Get/set the primary tag for the exon feature.
\&
\&           This method is overridden here in order to allow only for
\&           tag values following a certain convention. For consistency reasons,
\&           the tag value must either contain the string \*(Aqexon\*(Aq or the string
\&           \*(Aqutr\*(Aq (both case\-insensitive). In the case of \*(Aqexon\*(Aq, a string
\&           describing the type of exon may be appended or prefixed. Presently,
\&           the following types are allowed: initial, internal, and terminal
\&           (all case\-insensitive). 
\&
\&           If the supplied tag value matches \*(Aqutr\*(Aq (case\-insensitive),
\&           is_coding() will automatically be set to FALSE, and to TRUE
\&           otherwise.
\&
\& Returns : A string.
\& Args    : A string on set.
.Ve
.SS "location"
.IX Subsection "location"
.Vb 4
\& Title   : location
\& Usage   : my $location = $exon\->location()
\& Function: Returns a location object suitable for identifying the location 
\&           of the exon on the sequence or parent feature.
\&
\&           This method is overridden here to restrict allowed location types
\&           to non\-compound locations.
\&
\& Returns : Bio::LocationI object
\& Args    : none
.Ve
.SS "cds"
.IX Subsection "cds"
.Vb 3
\& Title   : cds()
\& Usage   : $cds = $exon\->cds();
\& Function: Get the coding sequence of the exon as a sequence object.
\&
\&           The sequence of the returned object is prefixed by Ns (lower case)
\&           if the frame of the exon is defined and different from zero. The
\&           result is that the first base starts a codon (frame 0).
\&
\&           This implementation returns undef if the particular exon is
\&           not translated to protein, i.e., is_coding() returns FALSE. Undef
\&           will also be returned if no sequence is attached to this exon
\&           feature.
\&
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
