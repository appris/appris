.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::MZEF 3pm"
.TH Bio::Tools::MZEF 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::MZEF \- Results of one MZEF run
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&   $mzef = Bio::Tools::MZEF\->new(\-file => \*(Aqresult.mzef\*(Aq);
\&   # filehandle:
\&   $mzef = Bio::Tools::MZEF\->new( \-fh  => \e*INPUT );
\&   # to indicate that the sequence was reversed prior to feeding it to MZEF
\&   # and that you want to have this reflected in the strand() attribute of 
\&   # the exons, as well have the coordinates translated to the non\-reversed
\&   # sequence
\&   $mzef = Bio::Tools::MZEF\->new( \-file   => \*(Aqresult.mzef\*(Aq,
\&                                  \-strand => \-1 );
\&
\&   # parse the results
\&   # note: this class is\-a Bio::Tools::AnalysisResult which implements
\&   # Bio::SeqAnalysisParserI, i.e., $genscan\->next_feature() is the same
\&   while($gene = $mzef\->next_prediction()) {
\&       # $gene is an instance of Bio::Tools::Prediction::Gene
\&
\&       # $gene\->exons() returns an array of 
\&       # Bio::Tools::Prediction::Exon objects
\&       # all exons:
\&       @exon_arr = $gene\->exons();
\&
\&       # internal exons only
\&       @intrl_exons = $gene\->exons(\*(AqInternal\*(Aq);
\&       # note that presently MZEF predicts only internal exons!
\&   }
\&
\&   # essential if you gave a filename at initialization (otherwise the file
\&   # will stay open)
\&   $mzef\->close();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1MZEF\s0 module provides a parser for \s-1MZEF\s0 gene structure prediction
output.
.PP
This module inherits off Bio::Tools::AnalysisResult and therefore
implements Bio::SeqAnalysisParserI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp\-at\-gmx.net (or hilmar.lapp\-at\-pharma.novartis.com)
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $mzef\->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /mzef/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 6
\& Title   : next_feature
\& Usage   : while($gene = $mzef\->next_feature()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the MZEF result
\&           file. Call this method repeatedly until FALSE is returned.
\&
\&           The returned object is actually a SeqFeatureI implementing object.
\&           This method is required for classes implementing the
\&           SeqAnalysisParserI interface, and is merely an alias for 
\&           next_prediction() at present.
\&
\&           Note that with the present version of MZEF there will only be one
\&           object returned, because MZEF does not predict individual genes
\&           but just potential internal exons.
\& Example :
\& Returns : A Bio::Tools::Prediction::Gene object.
\& Args    :
.Ve
.SS "next_prediction"
.IX Subsection "next_prediction"
.Vb 6
\& Title   : next_prediction
\& Usage   : while($gene = $mzef\->next_prediction()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the MZEF result
\&           file. Call this method repeatedly until FALSE is returned.
\&
\&           Note that with the present version of MZEF there will only be one
\&           object returned, because MZEF does not predict individual genes
\&           but just potential internal exons.
\& Example :
\& Returns : A Bio::Tools::Prediction::Gene object.
\& Args    :
.Ve
.SS "_parse_predictions"
.IX Subsection "_parse_predictions"
.Vb 6
\& Title   : _parse_predictions()
\& Usage   : $obj\->_parse_predictions()
\& Function: Parses the prediction section. Automatically called by
\&           next_prediction() if not yet done.
\& Example :
\& Returns :
.Ve
.SS "_prediction"
.IX Subsection "_prediction"
.Vb 5
\& Title   : _prediction()
\& Usage   : $gene = $obj\->_prediction()
\& Function: internal
\& Example :
\& Returns :
.Ve
.SS "_add_prediction"
.IX Subsection "_add_prediction"
.Vb 5
\& Title   : _add_prediction()
\& Usage   : $obj\->_add_prediction($gene)
\& Function: internal
\& Example :
\& Returns :
.Ve
.SS "_predictions_parsed"
.IX Subsection "_predictions_parsed"
.Vb 5
\& Title   : _predictions_parsed
\& Usage   : $obj\->_predictions_parsed
\& Function: internal
\& Example :
\& Returns : TRUE or FALSE
.Ve
