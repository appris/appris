.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::genbank 3pm"
.TH Bio::SeqIO::genbank 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::genbank \- GenBank sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
It is probably best not to use this object directly, but
rather go through the SeqIO handler:
.PP
.Vb 2
\&    $stream = Bio::SeqIO\->new(\-file   => $filename,
\&                              \-format => \*(AqGenBank\*(Aq);
\&
\&    while ( my $seq = $stream\->next_seq ) {
\&        # do something with $seq
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Seq objects to and from GenBank flat
file databases.
.PP
There is some flexibility here about how to write GenBank output
that is not fully documented.
.SS "Optional functions"
.IX Subsection "Optional functions"
.IP "\fB_show_dna()\fR" 3
.IX Item "_show_dna()"
(output only) shows the dna or not
.IP "\fB_post_sort()\fR" 3
.IX Item "_post_sort()"
(output only) provides a sorting func which is applied to the FTHelpers
before printing
.IP "\fB_id_generation_func()\fR" 3
.IX Item "_id_generation_func()"
This is function which is called as
.Sp
.Vb 1
\&   print "ID   ", $func($seq), "\en";
.Ve
.Sp
To generate the \s-1ID\s0 line. If it is not there, it generates a sensible \s-1ID\s0
line using a number of tools.
.Sp
If you want to output annotations in Genbank format they need to be
stored in a Bio::Annotation::Collection object which is accessible
through the Bio::SeqI interface method \fBannotation()\fR.
.Sp
The following are the names of the keys which are pulled from a
Bio::Annotation::Collection object:
.Sp
.Vb 6
\& reference       \- Should contain Bio::Annotation::Reference objects
\& comment         \- Should contain Bio::Annotation::Comment objects
\& dblink          \- Should contain a Bio::Annotation::DBLink object
\& segment         \- Should contain a Bio::Annotation::SimpleValue object
\& origin          \- Should contain a Bio::Annotation::SimpleValue object
\& wgs             \- Should contain a Bio::Annotation::SimpleValue object
.Ve
.SH "Where does the data go?"
.IX Header "Where does the data go?"
Data parsed in Bio::SeqIO::genbank is stored in a variety of data
fields in the sequence object that is returned. Here is a partial list
of fields.
.PP
Items listed as RichSeq or Seq or PrimarySeq and then \s-1\fBNAME\s0()\fR tell you
the top level object which defines a function called \s-1\fBNAME\s0()\fR which
stores this information.
.PP
Items listed as Annotation '\s-1NAME\s0' tell you the data is stored the
associated Bio::AnnotationCollectionI object which is associated with
Bio::Seq objects.  If it is explicitly requested that no annotations
should be stored when parsing a record of course they will not be
available when you try and get them.  If you are having this problem
look at the type of SeqBuilder that is being used to construct your
sequence object.
.PP
.Vb 5
\& Comments             Annotation \*(Aqcomment\*(Aq
\& References           Annotation \*(Aqreference\*(Aq
\& Segment              Annotation \*(Aqsegment\*(Aq
\& Origin               Annotation \*(Aqorigin\*(Aq
\& Dbsource             Annotation \*(Aqdblink\*(Aq
\&
\& Accessions           PrimarySeq accession_number()
\& Secondary accessions RichSeq get_secondary_accessions()
\& GI number            PrimarySeq primary_id()
\& LOCUS                PrimarySeq display_id()
\& Keywords             RichSeq get_keywords()
\& Dates                RichSeq get_dates()
\& Molecule             RichSeq molecule()
\& Seq Version          RichSeq seq_version()
\& PID                  RichSeq pid()
\& Division             RichSeq division()
\& Features             Seq get_SeqFeatures()
\& Alphabet             PrimarySeq alphabet()
\& Definition           PrimarySeq description() or desc()
\& Version              PrimarySeq version()
\&
\& Sequence             PrimarySeq seq()
.Ve
.PP
There is more information in the Feature-Annotation \s-1HOWTO\s0 about each
field and how it is mapped to the Sequence object
<http://bioperl.org/howtos/Features_and_Annotations_HOWTO.html>.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Bioperl Project"
.IX Header "AUTHOR - Bioperl Project"
bioperl-l at bioperl.org
.PP
Original author Elia Stupka, elia \-at\- tigem.it
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Ewan Birney birney at ebi.ac.uk
Jason Stajich jason at bioperl.org
Chris Mungall cjm at fruitfly.bdgp.berkeley.edu
Lincoln Stein lstein at cshl.org
Heikki Lehvaslaiho, heikki at ebi.ac.uk
Hilmar Lapp, hlapp at gmx.net
Donald G. Jackson, donald.jackson at bms.com
James Wasmuth, james.wasmuth at ed.ac.uk
Brian Osborne, bosborne at alum.mit.edu
Chris Fields, cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : $seq = $stream\->next_seq()
\& Function: returns the next sequence in the stream
\& Returns : Bio::Seq object
\& Args    :
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $stream\->write_seq($seq)
\& Function: writes the $seq object (must be seq) to the stream
\& Returns : 1 for success and 0 for error
\& Args    : array of 1 to n Bio::SeqI objects
.Ve
.SS "_print_GenBank_FTHelper"
.IX Subsection "_print_GenBank_FTHelper"
.Vb 6
\& Title   : _print_GenBank_FTHelper
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_read_GenBank_References"
.IX Subsection "_read_GenBank_References"
.Vb 5
\& Title   : _read_GenBank_References
\& Usage   :
\& Function: Reads references from GenBank format. Internal function really
\& Returns :
\& Args    :
.Ve
.SS "_add_ref_to_array"
.IX Subsection "_add_ref_to_array"
Title: _add_ref_to_array
Usage:
Function: Adds a Reference object to an array of Reference objects, takes
          care of possible cleanups to be done (currently, only author and title
          will be chopped of trailing semicolons).
Args:     A reference to an array of Reference objects and
          the Reference object to be added
Returns: nothing
.SS "_read_GenBank_Species"
.IX Subsection "_read_GenBank_Species"
.Vb 8
\& Title   : _read_GenBank_Species
\& Usage   :
\& Function: Reads the GenBank Organism species and classification
\&           lines. Able to deal with unconvential Organism naming
\&           formats, and varietas in plants
\& Example : ORGANISM  unknown marine gamma proteobacterium NOR5
\&           $genus = undef
\&           $species = unknown marine gamma proteobacterium NOR5
\&
\&           ORGANISM  Drosophila sp. \*(Aqwhite tip scutellum\*(Aq
\&           $genus = Drosophila
\&           $species = sp. \*(Aqwhite tip scutellum\*(Aq
\&           (yes, this really is a species and that is its name)
\&           $subspecies = undef
\&
\&           ORGANISM  Ajellomyces capsulatus var. farciminosus
\&           $genus = Ajellomyces
\&           $species = capsulatus
\&           $subspecies = var. farciminosus
\&
\&           ORGANISM  Hepatitis delta virus
\&           $genus = undef (though this virus has a genus in its lineage, we
\&                           cannot know that without a database lookup)
\&           $species = Hepatitis delta virus
\&
\& Returns : A Bio::Species object
\& Args    : A reference to the current line buffer
.Ve
.SS "_read_FTHelper_GenBank"
.IX Subsection "_read_FTHelper_GenBank"
.Vb 6
\& Title   : _read_FTHelper_GenBank
\& Usage   : _read_FTHelper_GenBank($buffer)
\& Function: reads the next FT key line
\& Example :
\& Returns : Bio::SeqIO::FTHelper object
\& Args    : filehandle and reference to a scalar
.Ve
.SS "_write_line_GenBank"
.IX Subsection "_write_line_GenBank"
.Vb 6
\& Title   : _write_line_GenBank
\& Usage   :
\& Function: internal function
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_write_line_GenBank_regex"
.IX Subsection "_write_line_GenBank_regex"
.Vb 10
\& Title   : _write_line_GenBank_regex
\& Usage   :
\& Function: internal function for writing lines of specified
\&           length, with different first and the next line
\&           left hand headers and split at specific points in the
\&           text
\& Example :
\& Returns : nothing
\& Args    : file handle,
\&           first header,
\&           second header,
\&           text\-line,
\&           regex for line breaks,
\&           total line length
.Ve
.SS "_post_sort"
.IX Subsection "_post_sort"
.Vb 5
\& Title   : _post_sort
\& Usage   : $obj\->_post_sort($newval)
\& Function:
\& Returns : value of _post_sort
\& Args    : newvalue (optional)
.Ve
.SS "_show_dna"
.IX Subsection "_show_dna"
.Vb 5
\& Title   : _show_dna
\& Usage   : $obj\->_show_dna($newval)
\& Function:
\& Returns : value of _show_dna
\& Args    : newvalue (optional)
.Ve
.SS "_id_generation_func"
.IX Subsection "_id_generation_func"
.Vb 5
\& Title   : _id_generation_func
\& Usage   : $obj\->_id_generation_func($newval)
\& Function:
\& Returns : value of _id_generation_func
\& Args    : newvalue (optional)
.Ve
.SS "_ac_generation_func"
.IX Subsection "_ac_generation_func"
.Vb 5
\& Title   : _ac_generation_func
\& Usage   : $obj\->_ac_generation_func($newval)
\& Function:
\& Returns : value of _ac_generation_func
\& Args    : newvalue (optional)
.Ve
.SS "_sv_generation_func"
.IX Subsection "_sv_generation_func"
.Vb 5
\& Title   : _sv_generation_func
\& Usage   : $obj\->_sv_generation_func($newval)
\& Function:
\& Returns : value of _sv_generation_func
\& Args    : newvalue (optional)
.Ve
.SS "_kw_generation_func"
.IX Subsection "_kw_generation_func"
.Vb 5
\& Title   : _kw_generation_func
\& Usage   : $obj\->_kw_generation_func($newval)
\& Function:
\& Returns : value of _kw_generation_func
\& Args    : newvalue (optional)
.Ve
