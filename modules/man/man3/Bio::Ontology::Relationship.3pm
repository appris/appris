.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::Relationship 3pm"
.TH Bio::Ontology::Relationship 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Ontology::Relationship \- a relationship for an ontology
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  $rel = Bio::Ontology::Relationship\->new( \-identifier     => "16847",
\&                                           \-subject_term   => $subj,
\&                                           \-object_term    => $obj,
\&                                           \-predicate_term => $pred );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a basic implementation of Bio::Ontology::RelationshipI.
.PP
The terminology we use here is the one commonly used for ontologies,
namely the triple of (subject, predicate, object), which in addition
is scoped in a namespace (ontology). It is called triple because it is
a tuple of three ontology terms.
.PP
There are other terminologies in use for expressing relationships. For
those who it helps to better understand the concept, the triple of
(child, relationship type, parent) would be equivalent to the
terminology chosen here, disregarding the question whether the notion
of parent and child is sensible in the context of the relationship
type or not. Especially in the case of ontologies with a wide variety
of predicates the parent/child terminology and similar ones can
quickly become ambiguous (e.g., A synthesises B), meaningless (e.g., A
binds B), or even conflicting (e.g., A is-parent-of B), and are
therefore strongly discouraged.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek\-at\-burnham.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://monochrome\-effect.net/
.PP
Address:
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.Vb 1
\& Hilmar Lapp, email: hlapp at gmx.net
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : $rel = Bio::Ontology::Relationship\->new(\-identifier   => "16847",
\&                                                   \-subject_term => $subject,
\&                                                   \-object_term  => $object,
\&                                                   \-predicate_term => $type );
\& Function: Creates a new Bio::Ontology::Relationship.
\& Returns : A new Bio::Ontology::Relationship object.
\& Args    : \-identifier     => the identifier of this relationship [scalar]
\&           \-subject_term   => the subject term [Bio::Ontology::TermI]
\&           \-object_term    => the object term [Bio::Ontology::TermI]  
\&           \-predicate_term => the predicate term [Bio::Ontology::TermI]
.Ve
.SS "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $rel\->init();   
\& Function: Initializes this Relationship to all undef.
\& Returns : 
\& Args    :
.Ve
.SS "identifier"
.IX Subsection "identifier"
.Vb 7
\& Title   : identifier
\& Usage   : $rel\->identifier( "100050" );
\&           or
\&           print $rel\->identifier();
\& Function: Set/get for the identifier of this Relationship.
\& Returns : The identifier [scalar].
\& Args    : The identifier [scalar] (optional).
.Ve
.SS "subject_term"
.IX Subsection "subject_term"
.Vb 5
\& Title   : subject_term
\& Usage   : $rel\->subject_term( $subject );
\&           or
\&           $subject = $rel\->subject_term();
\& Function: Set/get for the subject term of this Relationship.
\&
\&           The common convention for ontologies is to express
\&           relationships between terms as triples (subject, predicate,
\&           object).
\&
\& Returns : The subject term [Bio::Ontology::TermI].
\& Args    : The subject term [Bio::Ontology::TermI] (optional).
.Ve
.SS "object_term"
.IX Subsection "object_term"
.Vb 5
\& Title   : object_term
\& Usage   : $rel\->object_term( $object );
\&           or
\&           $object = $rel\->object_term();
\& Function: Set/get for the object term of this Relationship.
\&
\&           The common convention for ontologies is to express
\&           relationships between terms as triples (subject, predicate,
\&           object).
\&
\& Returns : The object term [Bio::Ontology::TermI].
\& Args    : The object term [Bio::Ontology::TermI] (optional).
.Ve
.SS "predicate_term"
.IX Subsection "predicate_term"
.Vb 6
\& Title   : predicate_term
\& Usage   : $rel\->predicate_term( $type );
\&           or
\&           $type = $rel\->predicate_term();
\& Function: Set/get for the predicate (relationship type) of this
\&           relationship.
\&
\&           The common convention for ontologies is to express
\&           relationships between terms as triples (subject, predicate,
\&           object).
\&
\& Returns : The predicate term [Bio::Ontology::TermI].
\& Args    : The predicate term [Bio::Ontology::TermI] (optional).
.Ve
.SS "ontology"
.IX Subsection "ontology"
.Vb 7
\& Title   : ontology
\& Usage   : $ont = $obj\->ontology()
\& Function: Get/set the ontology that defined this relationship.
\& Example : 
\& Returns : an object implementing L<Bio::Ontology::OntologyI>
\& Args    : on set, undef or an object implementing 
\&           Bio::Ontology::OntologyI (optional)
.Ve
.PP
See Bio::Ontology::OntologyI.
.SS "to_string"
.IX Subsection "to_string"
.Vb 5
\& Title   : to_string()
\& Usage   : print $rel\->to_string();
\& Function: to_string method for Relationship.
\& Returns : A string representation of this Relationship.
\& Args    :
.Ve
.SH "Deprecated Methods"
.IX Header "Deprecated Methods"
.Vb 2
\&  These methods are deprecated and defined here solely to preserve
\&  backwards compatibility.
.Ve
