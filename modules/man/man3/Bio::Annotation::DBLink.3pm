.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::DBLink 3pm"
.TH Bio::Annotation::DBLink 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Annotation::DBLink \- untyped links between databases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   $link1 = Bio::Annotation::DBLink\->new(\-database => \*(AqTSC\*(Aq,
\&                                        \-primary_id => \*(AqTSC0000030\*(Aq
\&                                        );
\&
\&   #or 
\&
\&   $link2 = Bio::Annotation::DBLink\->new();
\&   $link2\->database(\*(AqdbSNP\*(Aq);
\&   $link2\->primary_id(\*(Aq2367\*(Aq);
\&
\&   # DBLink is\-a Bio::AnnotationI object, can be added to annotation
\&   # collections, e.g. the one on features or seqs
\&   $feat\->annotation\->add_Annotation(\*(Aqdblink\*(Aq, $link2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an object which represents a link from one object to something
in another database without prescribing what is in the other database.
.PP
Aside from Bio::AnnotationI, this class also implements
Bio::IdentifiableI.
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Ewan Birney \- birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : $dblink = Bio::Annotation::DBLink\->new(\-database =>"GenBank",
\&                                                  \-primary_id => "M123456");
\& Function: Creates a new instance of this class.
\& Example :
\& Returns : A new instance of Bio::Annotation::DBLink.
\& Args    : Named parameters. At present, the following parameters are
\&           recognized.
\&
\&             \-database    the name of the database referenced by the xref
\&             \-primary_id  the primary (main) id of the referenced entry
\&                          (usually this will be an accession number)
\&             \-optional_id a secondary ID under which the referenced entry
\&                          is known in the same database
\&             \-comment     comment text for the dbxref
\&             \-tagname     the name of the tag under which to add this
\&                          instance to an annotation bundle (usually \*(Aqdblink\*(Aq)
\&             \-type        the type of information in the referenced entry
\&                          (e.g. protein, mRNA, structure)
\&             \-namespace   synonymous with \-database (also overrides)
\&             \-version     version of the referenced entry
\&             \-authority   attribute of the Bio::IdentifiableI interface
\&             \-url         attribute of the Bio::IdentifiableI interface
.Ve
.SH "AnnotationI implementing functions"
.IX Header "AnnotationI implementing functions"
.SS "as_text"
.IX Subsection "as_text"
.Vb 6
\& Title   : as_text
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "display_text"
.IX Subsection "display_text"
.Vb 4
\& Title   : display_text
\& Usage   : my $str = $ann\->display_text();
\& Function: returns a string. Unlike as_text(), this method returns a string
\&           formatted as would be expected for te specific implementation.
\&
\&           One can pass a callback as an argument which allows custom text
\&           generation; the callback is passed the current instance and any text
\&           returned
\& Example :
\& Returns : a string
\& Args    : [optional] callback
.Ve
.SS "hash_tree"
.IX Subsection "hash_tree"
.Vb 6
\& Title   : hash_tree
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj\->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
\&
\&           Setting this is optional. If set, it obviates the need to
\&           provide a tag to Bio::AnnotationCollectionI when adding
\&           this object. When obtaining an AnnotationI object from the
\&           collection, the collection will set the value to the tag
\&           under which it was stored unless the object has a tag
\&           stored already.
\&
\& Example : 
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SH "Specific accessors for DBLinks"
.IX Header "Specific accessors for DBLinks"
.SS "database"
.IX Subsection "database"
.Vb 7
\& Title   : database
\& Usage   : $self\->database($newval)
\& Function: set/get on the database string. Databases are just
\&           a string here which can then be interpreted elsewhere
\& Example : 
\& Returns : value of database
\& Args    : newvalue (optional)
.Ve
.SS "primary_id"
.IX Subsection "primary_id"
.Vb 9
\& Title   : primary_id
\& Usage   : $self\->primary_id($newval)
\& Function: set/get on the primary id (a string)
\&           The primary id is the main identifier used for this object in 
\&           the database. Good examples would be accession numbers. The id
\&           is meant to be the main, stable identifier for this object
\& Example : 
\& Returns : value of primary_id
\& Args    : newvalue (optional)
.Ve
.SS "optional_id"
.IX Subsection "optional_id"
.Vb 3
\& Title   : optional_id
\& Usage   : $self\->optional_id($newval)
\& Function: get/set for the optional_id (a string)
\&
\&           optional id is a slot for people to use as they wish. The
\&           main issue is that some databases do not have a clean
\&           single string identifier scheme. It is hoped that the
\&           primary_id can behave like a reasonably sane "single string
\&           identifier" of objects, and people can use/abuse optional
\&           ids to their heart\*(Aqs content to provide precise mappings.
\&
\& Example : 
\& Returns : value of optional_id
\& Args    : newvalue (optional)
.Ve
.SS "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $self\->comment($newval)
\& Function: get/set of comments (comment object)
\&           Sets or gets comments of this dblink, which is sometimes relevant
\& Example : 
\& Returns : value of comment (Bio::Annotation::Comment)
\& Args    : newvalue (optional)
.Ve
.SS "type"
.IX Subsection "type"
.Vb 7
\& Title   : type
\& Usage   : $self\->type($newval)
\& Function: get/set of type
\&           Sets or gets the type of this dblink.
\& Example : $self\->type(\*(Aqprotein\*(Aq)
\& Returns : value of type
\& Args    : newvalue (optional)
.Ve
.SH "Methods for Bio::IdentifiableI compliance"
.IX Header "Methods for Bio::IdentifiableI compliance"
.SS "object_id"
.IX Subsection "object_id"
.Vb 5
\& Title   : object_id
\& Usage   : $string    = $obj\->object_id()
\& Function: a string which represents the stable primary identifier
\&           in this namespace of this object. For DNA sequences this
\&           is its accession_number, similarly for protein sequences
\&
\&           This is aliased to primary_id().
\& Returns : A scalar
.Ve
.SS "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : $version    = $obj\->version()
\& Function: a number which differentiates between versions of
\&           the same object. Higher numbers are considered to be
\&           later and more relevant, but a single object described
\&           the same identifier should represent the same concept
\&
\& Returns : A number
.Ve
.SS "url"
.IX Subsection "url"
.Vb 4
\& Title   : url
\& Usage   : $url    = $obj\->url()
\& Function: URL which is associated with this DB link
\& Returns : string, full URL descriptor
.Ve
.SS "authority"
.IX Subsection "authority"
.Vb 5
\& Title   : authority
\& Usage   : $authority    = $obj\->authority()
\& Function: a string which represents the organisation which
\&           granted the namespace, written as the DNS name for  
\&           organisation (eg, wormbase.org)
\&
\& Returns : A scalar
.Ve
.SS "namespace"
.IX Subsection "namespace"
.Vb 5
\& Title   : namespace
\& Usage   : $string    = $obj\->namespace()
\& Function: A string representing the name space this identifier
\&           is valid in, often the database name or the name
\&           describing the collection 
\&
\&           For DBLink this is the same as database().
\& Returns : A scalar
.Ve
