.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::kegg 3pm"
.TH Bio::SeqIO::kegg 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::kegg \- KEGG sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # It is probably best not to use this object directly, but
\&  # rather go through the SeqIO handler system. Go:
\&
\&  use Bio::SeqIO;
\&
\&  $stream = Bio::SeqIO\->new(\-file => $filename, \-format => \*(AqKEGG\*(Aq);
\&
\&  while ( my $seq = $stream\->next_seq() ) {
\&        # do something with $seq
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class transforms \s-1KEGG\s0 gene records into Bio::Seq objects.
.SS "Mapping of record properties to object properties"
.IX Subsection "Mapping of record properties to object properties"
This section is supposed to document which sections and properties of
a \s-1KEGG\s0 databank record end up where in the Bioperl object model. It
is far from complete and presently focuses only on those mappings
which may be non-obvious. \f(CW$seq\fR in the text refers to the
Bio::Seq::RichSeqI implementing object returned by the parser for each
record.
.IP "'\s-1ENTRY\s0'" 4
.IX Item "'ENTRY'"
.Vb 1
\& $seq\->primary_id
.Ve
.IP "'\s-1NAME\s0'" 4
.IX Item "'NAME'"
.Vb 1
\& $seq\->display_id
.Ve
.IP "'\s-1DEFINITION\s0'" 4
.IX Item "'DEFINITION'"
.Vb 1
\& $seq\->annotation\->get_Annotations(\*(Aqdescription\*(Aq);
.Ve
.IP "'\s-1ORTHOLOG\s0'" 4
.IX Item "'ORTHOLOG'"
.Vb 1
\& grep {$_\->database eq \*(AqKO\*(Aq} $seq\->annotation\->get_Annotations(\*(Aqdblink\*(Aq)
.Ve
.IP "'\s-1CLASS\s0'" 4
.IX Item "'CLASS'"
.Vb 2
\& grep {$_\->database eq \*(AqPATH\*(Aq}
\&          $seq\->annotation\->get_Annotations(\*(Aqdblink\*(Aq)
.Ve
.IP "'\s-1POSITION\s0'" 4
.IX Item "'POSITION'"
\&\s-1FIXME, NOT IMPLEMENTED\s0
.IP "'\s-1PATHWAY\s0'" 4
.IX Item "'PATHWAY'"
.Vb 3
\& for my $pathway ( $seq\->annotation\->get_Annotations(\*(Aqpathway\*(Aq) ) {
\&    #
\& }
.Ve
.IP "'\s-1DBLINKS\s0'" 4
.IX Item "'DBLINKS'"
.Vb 1
\& $seq\->annotation\->get_Annotations(\*(Aqdblink\*(Aq)
.Ve
.IP "'\s-1CODON_USAGE\s0'" 4
.IX Item "'CODON_USAGE'"
\&\s-1FIXME, NOT IMPLEMENTED\s0
.IP "'\s-1AASEQ\s0'" 4
.IX Item "'AASEQ'"
.Vb 1
\& $seq\->translate\->seq
.Ve
.IP "'\s-1NTSEQ\s0'" 4
.IX Item "'NTSEQ'"
.Vb 1
\& $seq\-E<gt>seq
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Allen Day"
.IX Header "AUTHOR - Allen Day"
Email allenday@ucla.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : $seq = $stream\->next_seq()
\& Function: returns the next sequence in the stream
\& Returns : Bio::Seq::RichSeq object
\& Args    :
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
.Vb 2
\& Title   : write_seq
\& Note    : write_seq() is not implemented for KEGG format output.
.Ve
