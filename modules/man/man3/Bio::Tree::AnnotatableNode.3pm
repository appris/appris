.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tree::AnnotatableNode 3pm"
.TH Bio::Tree::AnnotatableNode 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tree::AnnotatableNode \- A Tree Node with support for annotation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Bio::Tree::AnnotatableNode;
\&    my $nodeA = Bio::Tree::AnnotatableNode\->new();
\&    my $nodeL = Bio::Tree::AnnotatableNode\->new();
\&    my $nodeR = Bio::Tree::AnnotatableNode\->new();
\&
\&    my $node = Bio::Tree::AnnotatableNode\->new();
\&    $node\->add_Descendents($nodeL);
\&    $node\->add_Descendents($nodeR);
\&
\&    print "node is not a leaf \en" if( $node\->is_leaf);
\&
\&    # $node is\-a Bio::AnnotatableI, hence:
\&    my $ann_coll = $node\->annotation();
\&    # $ann_coll is\-a Bio::AnnotationCollectionI, hence:
\&    my @all_anns = $ann_coll\->get_Annotations();
\&    # do something with the annotation objects
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Makes a Tree Node with Annotations, suitable for building a Tree.  See
Bio::Tree::Node for a full list of functionality.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Mira Han"
.IX Header "AUTHOR - Mira Han"
Email mirhan@indiana.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Tree::AnnotatableNode\->new();
\& Function: Builds a new Bio::Tree::AnnotatableNode object
\& Returns : Bio::Tree::AnnotatableNode
\& Args    : \-tostring => code reference to the tostring callback function (optional)
.Ve
.SH "Methods for implementing Bio::AnnotatableI"
.IX Header "Methods for implementing Bio::AnnotatableI"
.SS "annotation"
.IX Subsection "annotation"
.Vb 8
\& Title   : annotation
\& Usage   : $ann = $node\->annotation or 
\&           $node\->annotation($ann)
\& Function: Gets or sets the annotation
\& Returns : Bio::AnnotationCollectionI object
\& Args    : None or Bio::AnnotationCollectionI object
\&See L<Bio::AnnotationCollectionI> and L<Bio::Annotation::Collection>
\&for more information
.Ve
.SH "Methods for implementing tag access through Annotation::SimpleValue"
.IX Header "Methods for implementing tag access through Annotation::SimpleValue"
.SS "add_tag_value"
.IX Subsection "add_tag_value"
.Vb 6
\& Title   : add_tag_value
\& Usage   : $node\->add_tag_value($tag,$value)
\& Function: Adds a tag value to a node 
\& Returns : number of values stored for this tag
\& Args    : $tag   \- tag name
\&           $value \- value to store for the tag
.Ve
.SS "remove_tag"
.IX Subsection "remove_tag"
.Vb 5
\& Title   : remove_tag
\& Usage   : $node\->remove_tag($tag)
\& Function: Remove the tag and all values for this tag
\& Returns : boolean representing success (0 if tag does not exist)
\& Args    : $tag \- tagname to remove
.Ve
.SS "remove_all_tags"
.IX Subsection "remove_all_tags"
.Vb 5
\& Title   : remove_all_tags
\& Usage   : $node\->remove_all_tags()
\& Function: Removes all tags 
\& Returns : None
\& Args    : None
.Ve
.SS "get_all_tags"
.IX Subsection "get_all_tags"
.Vb 5
\& Title   : get_all_tags
\& Usage   : my @tags = $node\->get_all_tags()
\& Function: Gets all the tag names for this Node
\& Returns : Array of tagnames
\& Args    : None
.Ve
.SS "get_tag_values"
.IX Subsection "get_tag_values"
.Vb 5
\& Title   : get_tag_values
\& Usage   : my @values = $node\->get_tag_value($tag)
\& Function: Gets the values for given tag ($tag)
\& Returns : Array of values or empty list if tag does not exist
\& Args    : $tag \- tag name
.Ve
.SS "has_tag"
.IX Subsection "has_tag"
.Vb 5
\& Title   : has_tag
\& Usage   : $node\->has_tag($tag)
\& Function: Boolean test if tag exists in the Node
\& Returns : Boolean
\& Args    : $tag \- tagname
.Ve
.SH "Methods for implementing to_string"
.IX Header "Methods for implementing to_string"
.SS "to_string_callback"
.IX Subsection "to_string_callback"
.Vb 5
\& Title   : to_string_callback
\& Usage   : $node\->to_string_callback(\e&func)
\& Function: get/set callback for to_string
\& Returns : code reference for the to_string callback function
\& Args    : \e&func \- code reference to be set as the callback function
.Ve
.SH "Methods for accessing Bio::Seq"
.IX Header "Methods for accessing Bio::Seq"
.SS "sequence"
.IX Subsection "sequence"
.Vb 8
\& Title   : sequence
\& Usage   : $ann = $node\->sequence or 
\&           $node\->sequence($seq)
\& Function: Gets or sets the sequence
\& Returns : array reference of Bio::SeqI objects
\& Args    : None or Bio::SeqI object
\&See L<Bio::SeqI> and L<Bio::Seq>
\&for more information
.Ve
.SS "has_sequence"
.IX Subsection "has_sequence"
.Vb 5
\& Title   : has_sequence
\& Usage   : if( $node\->has_sequence) { # do something } 
\& Function: tells if node has sequence attached
\& Returns : Boolean for whether or not node has Bio::SeqI attached.
\& Args    : None
.Ve
