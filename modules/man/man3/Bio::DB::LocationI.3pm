.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::DB::LocationI 3pm"
.TH Bio::DB::LocationI 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::LocationI \- A RandomAccessI\-like abstract interface for
retrieving location data from a sequence database and returning
Bio::LocationI objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  #
\&  # get a database object somehow using a concrete class
\&  #
\&
\&  $loc = $db\->get_Location_by_id(\*(Aq123456\*(Aq);
\&
\&  #
\&  # $loc is a Bio::LocationI object
\&  #
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a pure interface class \- in other words, all this does is define
methods which other (concrete) classes will actually implement.
.PP
The Bio::DB::LocationI class defines methods used to retrieve location data
from a sequence.  This is returned in the form of Bio::LocationI objects,
which can include:
.PP
Bio::Location::Simple
Bio::Location::Fuzzy
Bio::Location::Split
.PP
At the moment it is just the ability to make Bio::LocationI objects
from a name or unique id (id), an accession number (acc), and so on.
.SH "CONTACT"
.IX Header "CONTACT"
Ewan Birney originally wrote Bio::DB::RandomAccessI, from which this class
is based.
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@lists.open\-bio.org               \- General discussion
\&  http://bioperl.org/Support.html  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.SS "get_Location_by_id"
.IX Subsection "get_Location_by_id"
.Vb 5
\& Title   : get_Location_by_id
\& Usage   : $loc = $db\->get_Location_by_id(\*(Aq123456\*(Aq)
\& Function: Gets a Bio::LocationI\-implementing object by its name (id)
\& Returns : a Bio::LocationI object or undef if not found
\& Args    : the id (as a string) of a sequence
.Ve
.SS "get_Location_by_acc"
.IX Subsection "get_Location_by_acc"
.Vb 8
\& Title   : get_Location_by_acc
\& Usage   : $loc = $db\->get_Location_by_acc(\*(AqX77802\*(Aq);
\& Function: Gets a Bio::LocationI object by accession number
\& Returns : A Bio::LocationI object or undef if not found
\& Args    : accession number (as a string)
\& Throws  : "more than one sequences correspond to this accession"
\&            if the accession maps to multiple primary ids and
\&            method is called in a scalar context
.Ve
.SS "get_Location_by_version"
.IX Subsection "get_Location_by_version"
.Vb 6
\& Title   : get_Location_by_version
\& Usage   : $loc = $db\->get_Location_by_version(\*(AqX77802.1\*(Aq);
\& Function: Gets a Bio::LocationI object by sequence version
\& Returns : A Bio::LocationI object
\& Args    : accession.version (as a string)
\& Throws  : "acc.version does not exist" exception
.Ve
