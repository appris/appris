.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::AlignIO::xmfa 3pm"
.TH Bio::AlignIO::xmfa 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::AlignIO::xmfa \- XMFA MSA Sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::AlignIO
class.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::SimpleAlign objects from
\&\s-1XMFA\s0 flat file databases.  For more information, see:
.PP
.Vb 1
\&  http://asap.ahabs.wisc.edu/mauve\-aligner/mauve\-user\-guide/mauve\-output\-file\-formats.html
.Ve
.PP
This module is based on the AlignIO::fasta parser written by
Peter Schattner
.SH "TODO"
.IX Header "TODO"
Finish \fBwrite_aln()\fR, clean up code, allow LargeLocatableSeq (e.g. for
very large sequences from Mauve).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Fields
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "next_aln"
.IX Subsection "next_aln"
.Vb 7
\& Title   : next_aln
\& Usage   : $aln = $stream\->next_aln
\& Function: returns the next alignment in the stream.
\& Returns : Bio::Align::AlignI object \- returns 0 on end of file
\&            or on error
\& Args    : \-width => optional argument to specify the width sequence
\&           will be written (60 chars by default)
.Ve
.PP
See Bio::Align::AlignI
.SS "write_aln"
.IX Subsection "write_aln"
.Vb 5
\& Title   : write_aln
\& Usage   : $stream\->write_aln(@aln)
\& Function: writes the $aln object into the stream in xmfa format
\& Returns : 1 for success and 0 for error
\& Args    : L<Bio::Align::AlignI> object
.Ve
.PP
See Bio::Align::AlignI
.SS "_get_len"
.IX Subsection "_get_len"
.Vb 5
\& Title   : _get_len
\& Usage   :
\& Function: determine number of alphabetic chars
\& Returns : integer
\& Args    : sequence string
.Ve
.SS "width"
.IX Subsection "width"
.Vb 6
\& Title   : width
\& Usage   : $obj\->width($newwidth)
\&           $width = $obj\->width;
\& Function: Get/set width of alignment
\& Returns : integer value of width
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
