.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tree::Tree 3pm"
.TH Bio::Tree::Tree 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tree::Tree \- An implementation of the TreeI interface.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::TreeIO;
\&
\&    # like from a TreeIO
\&    my $treeio = Bio::TreeIO\->new(\-format => \*(Aqnewick\*(Aq, \-file => \*(Aqtreefile.dnd\*(Aq);
\&    my $tree = $treeio\->next_tree;
\&    my @nodes = $tree\->get_nodes;
\&    my $root = $tree\->get_root_node;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object holds handles to Nodes which make up a tree.
.SH "IMPLEMENTATION NOTE"
.IX Header "IMPLEMENTATION NOTE"
This implementation of Bio::Tree::Tree contains Bio::Tree:::NodeI; mainly linked
via the root node. As NodeI can potentially contain circular references (as
nodes will need to refer to both parent and child nodes), Bio::Tree::Tree will
remove those circular references when the object is garbage-collected. This has
some side effects; primarily, one must keep the Tree in scope or have at least
one reference to it if working with nodes. The fix is to count the references to
the nodes and if it is greater than expected retain all of them, but it requires
an additional prereq and thus may not be worth the effort.  This only shows up
in minor edge cases, though (see Bug #2869).
.PP
Example of issue:
.PP
.Vb 4
\&  # tree is not assigned to a variable, so passes from memory after
\&  # root node is passed
\&  my $root = Bio::TreeIO\->new(\-format => \*(Aqnewick\*(Aq, \-file => \*(Aqfoo.txt\*(Aq)\->next_tree
\&                 \->get_root_node;
\&
\&  # gets nothing, as all Node links are broken when Tree is garbage\-collected above
\&  my @descendents = $root\->get_all_Descendents;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Aaron Mackey amackey@virginia.edu
Sendu Bala   bix@sendu.me.uk
Mark A. Jensen maj@fortinbras.us
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::Tree::Tree\->new();
\& Function: Builds a new Bio::Tree::Tree object 
\& Returns : Bio::Tree::Tree
\& Args    : \-root     => L<Bio::Tree::NodeI> object which is the root
\&              OR
\&           \-node     => L<Bio::Tree::NodeI> object from which the root will be
\&                        determined
\& 
\&           \-nodelete => boolean, whether or not to try and cleanup all
\&                        the nodes when this this tree goes out of scope.
\&           \-id       => optional tree ID
\&           \-score    => optional tree score value
.Ve
.SS "nodelete"
.IX Subsection "nodelete"
.Vb 7
\& Title   : nodelete
\& Usage   : $obj\->nodelete($newval)
\& Function: Get/Set Boolean whether or not to delete the underlying
\&           nodes when it goes out of scope.  By default this is false
\&           meaning trees are cleaned up.
\& Returns : boolean
\& Args    : on set, new boolean value
.Ve
.SS "get_nodes"
.IX Subsection "get_nodes"
.Vb 8
\& Title   : get_nodes
\& Usage   : my @nodes = $tree\->get_nodes()
\& Function: Return list of Bio::Tree::NodeI objects
\& Returns : array of Bio::Tree::NodeI objects
\& Args    : (named values) hash with one value 
\&           order => \*(Aqb|breadth\*(Aq first order or \*(Aqd|depth\*(Aq first order
\&           sortby => [optional] "height", "creation", "alpha", "revalpha",
\&           or coderef to be used to sort the order of children nodes. See L<Bio::Tree::Node> for details
.Ve
.SS "get_root_node"
.IX Subsection "get_root_node"
.Vb 6
\& Title   : get_root_node
\& Usage   : my $node = $tree\->get_root_node();
\& Function: Get the Top Node in the tree, in this implementation
\&           Trees only have one top node.
\& Returns : Bio::Tree::NodeI object
\& Args    : none
.Ve
.SS "set_root_node"
.IX Subsection "set_root_node"
.Vb 5
\& Title   : set_root_node
\& Usage   : $tree\->set_root_node($node)
\& Function: Set the Root Node for the Tree
\& Returns : Bio::Tree::NodeI
\& Args    : Bio::Tree::NodeI
.Ve
.SS "total_branch_length"
.IX Subsection "total_branch_length"
.Vb 5
\& Title   : total_branch_length
\& Usage   : my $size = $tree\->total_branch_length
\& Function: Returns the sum of the length of all branches
\& Returns : real
\& Args    : none
.Ve
.SS "subtree_length"
.IX Subsection "subtree_length"
.Vb 7
\& Title   : subtree_length
\& Usage   : my $subtree_size = $tree\->subtree_length($internal_node)
\& Function: Returns the sum of the length of all branches in a subtree
\&           under the node. Calculates the size of the whole tree
\&           without an argument (but only if root node is defined)
\& Returns : real or undef
\& Args    : Bio::Tree::NodeI object, defaults to the root node
.Ve
.SS "id"
.IX Subsection "id"
.Vb 5
\& Title   : id
\& Usage   : my $id = $tree\->id();
\& Function: An id value for the tree
\& Returns : scalar
\& Args    : [optional] new value to set
.Ve
.SS "score"
.IX Subsection "score"
.Vb 7
\& Title   : score
\& Usage   : $obj\->score($newval)
\& Function: Sets the associated score with this tree
\&           This is a generic slot which is probably best used 
\&           for log likelihood or other overall tree score
\& Returns : value of score
\& Args    : newvalue (optional)
.Ve
.SS "height"
.IX Subsection "height"
.Vb 8
\& Title   : height
\& Usage   : my $height = $tree\->height
\& Function: Gets the height of tree \- this LOG_2($number_nodes)
\&           WARNING: this is only true for strict binary trees.  The TreeIO
\&           system is capable of building non\-binary trees, for which this
\&           method will currently return an incorrect value!!
\& Returns : integer
\& Args    : none
.Ve
.SS "number_nodes"
.IX Subsection "number_nodes"
.Vb 5
\& Title   : number_nodes
\& Usage   : my $size = $tree\->number_nodes
\& Function: Returns the number of nodes in the tree
\& Returns : integer
\& Args    : none
.Ve
.SS "as_text"
.IX Subsection "as_text"
.Vb 9
\& Title   : as_text
\& Usage   : my $tree_as_string = $tree\->as_text($format)
\& Function: Returns the tree as a string representation in the 
\&           desired format, e.g.: \*(Aqnewick\*(Aq, \*(Aqnhx\*(Aq or \*(Aqtabtree\*(Aq (the default)
\& Returns : scalar string
\& Args    : format type as specified by Bio::TreeIO
\& Note    : This method loads the Bio::TreeIO::$format module
\&           on the fly, and commandeers the _write_tree_Helper
\&           routine therein to create the tree string.
.Ve
.SS "Methods for associating Tag/Values with a Tree"
.IX Subsection "Methods for associating Tag/Values with a Tree"
These methods associate tag/value pairs with a Tree
.SS "set_tag_value"
.IX Subsection "set_tag_value"
.Vb 7
\& Title   : set_tag_value
\& Usage   : $tree\->set_tag_value($tag,$value)
\&           $tree\->set_tag_value($tag,@values)
\& Function: Sets a tag value(s) to a tree. Replaces old values.
\& Returns : number of values stored for this tag
\& Args    : $tag   \- tag name
\&           $value \- value to store for the tag
.Ve
.SS "add_tag_value"
.IX Subsection "add_tag_value"
.Vb 6
\& Title   : add_tag_value
\& Usage   : $tree\->add_tag_value($tag,$value)
\& Function: Adds a tag value to a tree 
\& Returns : number of values stored for this tag
\& Args    : $tag   \- tag name
\&           $value \- value to store for the tag
.Ve
.SS "remove_tag"
.IX Subsection "remove_tag"
.Vb 5
\& Title   : remove_tag
\& Usage   : $tree\->remove_tag($tag)
\& Function: Remove the tag and all values for this tag
\& Returns : boolean representing success (0 if tag does not exist)
\& Args    : $tag \- tagname to remove
.Ve
.SS "remove_all_tags"
.IX Subsection "remove_all_tags"
.Vb 5
\& Title   : remove_all_tags
\& Usage   : $tree\->remove_all_tags()
\& Function: Removes all tags 
\& Returns : None
\& Args    : None
.Ve
.SS "get_all_tags"
.IX Subsection "get_all_tags"
.Vb 5
\& Title   : get_all_tags
\& Usage   : my @tags = $tree\->get_all_tags()
\& Function: Gets all the tag names for this Tree
\& Returns : Array of tagnames
\& Args    : None
.Ve
.SS "get_tag_values"
.IX Subsection "get_tag_values"
.Vb 5
\& Title   : get_tag_values
\& Usage   : my @values = $tree\->get_tag_values($tag)
\& Function: Gets the values for given tag ($tag)
\& Returns : Array of values or empty list if tag does not exist
\& Args    : $tag \- tag name
.Ve
.SS "has_tag"
.IX Subsection "has_tag"
.Vb 5
\& Title   : has_tag
\& Usage   : $tree\->has_tag($tag)
\& Function: Boolean test if tag exists in the Tree
\& Returns : Boolean
\& Args    : $tag \- tagname
.Ve
.SS "clone"
.IX Subsection "clone"
.Vb 7
\& Title   : clone
\& Alias   : _clone
\& Usage   : $tree_copy = $tree\->clone();
\&           $subtree_copy = $tree\->clone($internal_node);
\& Function: Safe tree clone that doesn\*(Aqt segfault
\& Returns : Bio::Tree::Tree object
\& Args    : [optional] $start_node, Bio::Tree::Node object
.Ve
