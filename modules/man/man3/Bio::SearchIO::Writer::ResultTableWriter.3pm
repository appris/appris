.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::Writer::ResultTableWriter 3pm"
.TH Bio::SearchIO::Writer::ResultTableWriter 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SearchIO::Writer::ResultTableWriter \- Outputs tab\-delimited data for each Bio::Search::Result::ResultI object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Example 1: Using the default columns"
.IX Subsection "Example 1: Using the default columns"
.Vb 2
\&    use Bio::SearchIO;
\&    use Bio::SearchIO::Writer::ResultTableWriter;
\&
\&    my $in = Bio::SearchIO\->new();
\&
\&    my $writer = Bio::SearchIO::Writer::ResultTableWriter\->new();
\&
\&    my $out = Bio::SearchIO\->new( \-writer => $writer );
\&
\&    while ( my $result = $in\->next_result() ) {
\&        $out\->write_result($result, ($in\->report_count \- 1 ? 0 : 1) );
\&    }
.Ve
.SS "Example 2: Specifying a subset of columns"
.IX Subsection "Example 2: Specifying a subset of columns"
.Vb 2
\&    use Bio::SearchIO;
\&    use Bio::SearchIO::Writer::ResultTableWriter;
\&
\&    my $in = Bio::SearchIO\->new();
\&
\&    my $writer = Bio::SearchIO::Writer::ResultTableWriter\->new( 
\&                                  \-columns => [qw(
\&                                                  query_name
\&                                                  query_length
\&                                                  num_hits
\&                                                  )]  );
\&
\&    my $out = Bio::SearchIO\->new( \-writer => $writer,
\&                                  \-file   => ">result.out" );
\&
\&    while ( my $result = $in\->next_result() ) {
\&        $out\->write_result($result, ($in\->report_count \- 1 ? 0 : 1) );
\&    }
.Ve
.SS "Custom Labels"
.IX Subsection "Custom Labels"
You can also specify different column labels if you don't want to use
the defaults.  Do this by specifying a \f(CW\*(C`\-labels\*(C'\fR hash reference
parameter when creating the ResultTableWriter object.  The keys of the
hash should be the column number (left-most column = 1) for the label(s)
you want to specify. Here's an example:
.PP
.Vb 7
\&    my $writer = Bio::SearchIO::Writer::ResultTableWriter\->new( 
\&                               \-columns => [qw( query_name 
\&                                                query_length
\&                                                query_description 
\&                                                num_hits)],
\&                               \-labels  => { 1 => \*(AqQUERY_GI\*(Aq,
\&                                             2 => \*(AqQUERY_LENGTH\*(Aq } );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SearchIO::Writer::ResultTableWriter outputs data in tab-delimited
format for each search result, one row per search result. This is a very
coarse-grain level of information since it only includes data
stored in the Bio::Search::Result::ResultI object itself and does not
include any information about hits or HSPs.
.PP
You most likely will never use this object but instead will use one of
its subclasses: Bio::SearchIO::Writer::HitTableWriter or
Bio::SearchIO::Writer::HSPTableWriter.
.SS "Available Columns"
.IX Subsection "Available Columns"
Here are the columns that can be specified in the \f(CW\*(C`\-columns\*(C'\fR
parameter when creating a ResultTableWriter object.  If a \f(CW\*(C`\-columns\*(C'\fR parameter
is not specified, this list, in this order, will be used as the default.
.PP
.Vb 3
\&    query_name
\&    query_length
\&    query_description
.Ve
.PP
For more details about these columns, see the documentation for the
corresponding method in Bio::Search::Result::ResultI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules.  Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Chervitz <sac@bioperl.org>
.PP
See the \s-1FEEDBACK\s0 section  for where to send bug reports
and comments.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001 Steve Chervitz. All Rights Reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::SearchIO::Writer::HitTableWriter,
Bio::SearchIO::Writer::HSPTableWriter
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBto_string()\fP"
.IX Subsection "to_string()"
Note: this method is not intended for direct use. The
\&\fBSearchIO::write_result()\fR method calls it automatically if the writer
is hooked up to a SearchIO object as illustrated in the \s-1SYNOPSIS\s0 section .
.PP
.Vb 11
\& Title     : to_string()
\&           :
\& Usage     : print $writer\->to_string( $result_obj, [$include_labels] );
\&           :
\& Argument  : $result_obj = A Bio::Search::Result::ResultI object
\&           : $include_labels = boolean, if true column labels are included (default: false)
\&           :
\& Returns   : String containing tab\-delimited set of data for each hit 
\&           : in a ResultI object. Some data is summed across multiple HSPs.
\&           :
\& Throws    : n/a
.Ve
.SS "column_labels"
.IX Subsection "column_labels"
.Vb 5
\& Usage     : print $result_obj\->column_labels();
\& Purpose   : Get column labels for to_string().
\& Returns   : String containing column labels. Tab\-delimited.
\& Argument  : n/a
\& Throws    : n/a
.Ve
.SS "end_report"
.IX Subsection "end_report"
.Vb 8
\& Title   : end_report
\& Usage   : $self\->end_report()
\& Function: The method to call when ending a report, this is
\&           mostly for cleanup for formats which require you to 
\&           have something at the end of the document.  Nothing for
\&           a text message.
\& Returns : string
\& Args    : none
.Ve
.SS "filter"
.IX Subsection "filter"
.Vb 6
\& Title   : filter
\& Usage   : $writer\->filter(\*(Aqhsp\*(Aq, \e&hsp_filter);
\& Function: Filter out either at HSP,Hit,or Result level
\& Returns : none
\& Args    : string => data type,
\&           CODE reference
.Ve
