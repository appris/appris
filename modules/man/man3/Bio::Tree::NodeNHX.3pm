.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tree::NodeNHX 3pm"
.TH Bio::Tree::NodeNHX 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tree::NodeNHX \- A Simple Tree Node with support for NHX tags
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Bio::Tree::NodeNHX;
\&    my $nodeA = Bio::Tree::NodeNHX\->new();
\&    my $nodeL = Bio::Tree::NodeNHX\->new();
\&    my $nodeR = Bio::Tree::NodeNHX\->new();
\&
\&    my $node = Bio::Tree::NodeNHX\->new();
\&    $node\->add_Descendents($nodeL);
\&    $node\->add_Descendents($nodeR);
\&
\&    print "node is not a leaf \en" if( $node\->is_leaf);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Makes a Tree Node with \s-1NHX\s0 tags, suitable for building a Tree.  See
Bio::Tree::Node for a full list of functionality.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Aaron Mackey"
.IX Header "AUTHOR - Aaron Mackey"
Email amackey@virginia.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
The \s-1NHX\s0 (New Hampshire eXtended) format was created by Chris Zmasek,
and is described at:
.PP
.Vb 1
\&  http://sourceforge.net/projects/forester\-atv/
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $obj = Bio::Tree::NodeNHX\->new();
\& Function: Builds a new Bio::Tree::NodeNHX object
\& Returns : Bio::Tree::NodeNHX
\& Args    : \-left          => pointer to Left descendent (optional)
\&           \-right         => pointer to Right descenent (optional)
\&           \-branch_length => branch length [integer] (optional)
\&           \-bootstrap     => bootstrap value (string)
\&           \-description   => description of node
\&           \-id            => unique id for node
\&           \-nhx           => hashref of NHX tags and values
.Ve
.SS "nhx_tag"
.IX Subsection "nhx_tag"
.Vb 7
\& Title   : nhx_tag
\& Usage   : my $tag = $nodenhx\->nhx_tag(%tags);
\& Function: Set tag\-value pairs for NHX nodes
\& Returns : none
\& Args    : hashref to update the tags/value pairs
\&           OR 
\&           with a scalar value update the bootstrap value by default
.Ve
