.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PhylipDist 3pm"
.TH Bio::Matrix::PhylipDist 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Matrix::PhylipDist \- A Phylip Distance Matrix object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use Bio::Tools::Phylo::Phylip::ProtDist;
\&  my $dist = Bio::Tools::Phylo::Phylip::ProtDist\->new(
\&    \-file=>"protdist.out",
\&    \-program=>"ProtDist");
\&  #or
\&   my $dist = Bio::Tools::Phylo::Phylip::ProtDist\->new(
\&    \-fh=>"protdist.out",
\&    \-program=>"ProtDist");
\&
\&
\&  #get specific entries
\&  my $distance_value = $dist\->get_entry(\*(AqALPHA\*(Aq,\*(AqBETA\*(Aq);
\&  my @columns        = $dist\->get_column(\*(AqALPHA\*(Aq);
\&  my @rows           = $dist\->get_row(\*(AqBETA\*(Aq);
\&  my @diagonal       = $dist\->get_diagonal();
\&
\&  #print the matrix in phylip numerical format
\&  print $dist\->print_matrix;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple object for holding Distance Matrices generated by the following Phylip programs:
.PP
1) dnadist
2) protdist
3) restdist
.PP
It currently handles parsing of the matrix without the data output option.
.PP
.Vb 6
\&    5
\&Alpha          0.00000  4.23419  3.63330  6.20865  3.45431
\&Beta           4.23419  0.00000  3.49289  3.36540  4.29179
\&Gamma          3.63330  3.49289  0.00000  3.68733  5.84929
\&Delta          6.20865  3.36540  3.68733  0.00000  4.43345
\&Epsilon        3.45431  4.29179  5.84929  4.43345  0.00000
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a \*(L"_\*(R".
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $family = Bio::Matrix::PhylipDist\->new(\-file=>"protdist.out",
\&                                                     \-program=>"protdist");
\& Function: Constructor for PhylipDist Object
\& Returns : L<Bio::Matrix::PhylipDist>
.Ve
.SS "get_entry"
.IX Subsection "get_entry"
.Vb 5
\& Title   : get_entry
\& Usage   : $matrix\->get_entry();
\& Function: returns a particular entry 
\& Returns : a float
\& Arguments:  string id1, string id2
.Ve
.SS "get_row"
.IX Subsection "get_row"
.Vb 5
\& Title   : get_row
\& Usage   : $matrix\->get_row(\*(AqALPHA\*(Aq);
\& Function: returns a particular row 
\& Returns : an array of float
\& Arguments:  string id1
.Ve
.SS "get_column"
.IX Subsection "get_column"
.Vb 5
\& Title   : get_column
\& Usage   : $matrix\->get_column(\*(AqALPHA\*(Aq);
\& Function: returns a particular column 
\& Returns : an array of floats 
\& Arguments:  string id1
.Ve
.SS "get_diagonal"
.IX Subsection "get_diagonal"
.Vb 5
\& Title   : get_diagonal
\& Usage   : $matrix\->get_diagonal();
\& Function: returns the diagonal of the matrix
\& Returns : an array of float
\& Arguments:  string id1
.Ve
.SS "print_matrix"
.IX Subsection "print_matrix"
.Vb 5
\& Title   : print_matrix
\& Usage   : $matrix\->print_matrix();
\& Function: returns a string of the matrix in phylip format 
\& Returns : a string
\& Arguments:
.Ve
.SS "_matrix"
.IX Subsection "_matrix"
.Vb 6
\& Title   : _matrix
\& Usage   : $matrix\->_matrix();
\& Function: get/set for hash reference of the pointers
\&           to the value matrix 
\& Returns : hash reference 
\& Arguments: hash reference
.Ve
.SS "names"
.IX Subsection "names"
.Vb 5
\& Title   : names
\& Usage   : $matrix\->names();
\& Function: get/set for array ref of names of sequences
\& Returns : an array reference 
\& Arguments: an array reference
.Ve
.SS "program"
.IX Subsection "program"
.Vb 6
\& Title   : program
\& Usage   : $matrix\->program();
\& Function: get/set for the program name generating this 
\&           matrix
\& Returns : string
\& Arguments: string
.Ve
.SS "_values"
.IX Subsection "_values"
.Vb 6
\& Title   : _values
\& Usage   : $matrix\->_values();
\& Function: get/set for array ref of the matrix containing
\&           distance values 
\& Returns : an array reference 
\& Arguments: an array reference
.Ve
.SH "Bio::Matrix::MatrixI implementation"
.IX Header "Bio::Matrix::MatrixI implementation"
.SS "matrix_id"
.IX Subsection "matrix_id"
.Vb 5
\& Title   : matrix_id
\& Usage   : my $id = $matrix\->matrix_id
\& Function: Get/Set the matrix ID
\& Returns : scalar value
\& Args    : [optional] new id value to store
.Ve
.SS "matrix_name"
.IX Subsection "matrix_name"
.Vb 5
\& Title   : matrix_name
\& Usage   : my $name = $matrix\->matrix_name();
\& Function: Get/Set the matrix name
\& Returns : scalar value
\& Args    : [optional] new matrix name value
.Ve
.SS "column_header"
.IX Subsection "column_header"
.Vb 5
\& Title   : column_header
\& Usage   : my $name = $matrix\->column_header(0)
\& Function: Gets the column header for a particular column number
\& Returns : string
\& Args    : integer
.Ve
.SS "row_header"
.IX Subsection "row_header"
.Vb 5
\& Title   : row_header
\& Usage   : my $name = $matrix\->row_header(0)
\& Function: Gets the row header for a particular row number
\& Returns : string
\& Args    : integer
.Ve
.SS "column_num_for_name"
.IX Subsection "column_num_for_name"
.Vb 5
\& Title   : column_num_for_name
\& Usage   : my $num = $matrix\->column_num_for_name($name)
\& Function: Gets the column number for a particular column name
\& Returns : integer
\& Args    : string
.Ve
.SS "row_num_for_name"
.IX Subsection "row_num_for_name"
.Vb 5
\& Title   : row_num_for_name
\& Usage   : my $num = $matrix\->row_num_for_name($name)
\& Function: Gets the row number for a particular row name
\& Returns : integer
\& Args    : string
.Ve
.SS "num_rows"
.IX Subsection "num_rows"
.Vb 5
\& Title   : num_rows
\& Usage   : my $rowcount = $matrix\->num_rows;
\& Function: Get the number of rows
\& Returns : integer
\& Args    : none
.Ve
.SS "num_columns"
.IX Subsection "num_columns"
.Vb 5
\& Title   : num_columns
\& Usage   : my $colcount = $matrix\->num_columns
\& Function: Get the number of columns
\& Returns : integer
\& Args    : none
.Ve
.SS "row_names"
.IX Subsection "row_names"
.Vb 5
\& Title   : row_names
\& Usage   : my @rows = $matrix\->row_names
\& Function: The names of all the rows
\& Returns : array in array context, arrayref in scalar context
\& Args    : none
.Ve
.SS "column_names"
.IX Subsection "column_names"
.Vb 5
\& Title   : column_names
\& Usage   : my @columns = $matrix\->column_names
\& Function: The names of all the columns
\& Returns : array in array context, arrayref in scalar context
\& Args    : none
.Ve
