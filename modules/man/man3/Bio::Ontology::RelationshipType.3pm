.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::RelationshipType 3pm"
.TH Bio::Ontology::RelationshipType 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Ontology::RelationshipType  \- a relationship type for an ontology
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class can be used to model various types of relationships
(such as \*(L"\s-1IS_A\*(R", \*(L"PART_OF\*(R", \*(L"CONTAINS\*(R", \*(L"FOUND_IN\*(R", \*(L"RELATED_TO\*(R"\s0).
.PP
This class extends Bio::Ontology::Term, so it essentially is-a
Bio::Ontology::TermI. In addition, all methods are overridden such
as to make the object immutable.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek\-at\-burnham.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://monochrome\-effect.net/
.PP
Address:
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "get_instance"
.IX Subsection "get_instance"
.Vb 11
\& Title   : get_instance
\& Usage   : $IS_A       = Bio::Ontology::RelationshipType\->get_instance( "IS_A" );
\&           $PART_OF    = Bio::Ontology::RelationshipType\->get_instance( "PART_OF" );
\&           $RELATED_TO = Bio::Ontology::RelationshipType\->get_instance( "RELATED_TO" );
\&           $CONTAINS   = Bio::Ontology::RelationshipType\->get_instance( "CONTAINS" );
\&           $FOUND_IN   = Bio::Ontology::RelationshipType\->get_instance( "FOUND_IN" );
\& Function: Factory method to create instances of RelationshipType
\& Returns : [Bio::Ontology::RelationshipType]
\& Args    : "IS_A" or "PART_OF" or "CONTAINS" or "FOUND_IN" or 
\&           "RELATED_TO" [scalar]
\&           the ontology [Bio::Ontology::OntologyI] (optional)
.Ve
.SS "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $type\->init();
\& Function: Initializes this to all undef and empty lists.
\& Returns :
\& Args    :
.Ve
.SS "equals"
.IX Subsection "equals"
.Vb 7
\& Title   : equals
\& Usage   : if ( $type\->equals( $other_type ) ) { ...
\& Function: Compares this type to another one, based on string "eq" of
\&           the "identifier" field, if at least one of the two types has
\&           the identifier set, or string eq of the name otherwise.
\& Returns : true or false
\& Args    : [Bio::Ontology::RelationshipType]
.Ve
.SS "identifier"
.IX Subsection "identifier"
.Vb 7
\& Title   : identifier
\& Usage   : $term\->identifier( "IS_A" );
\&           or
\&           print $term\->identifier();
\& Function: Set/get for the immutable identifier of this Type.
\& Returns : The identifier [scalar].
\& Args    : The identifier [scalar] (optional).
.Ve
.SS "name"
.IX Subsection "name"
.Vb 7
\& Title   : name
\& Usage   : $term\->name( "is a type" );
\&           or
\&           print $term\->name();
\& Function: Set/get for the immutable name of this Type.
\& Returns : The name [scalar].
\& Args    : The name [scalar] (optional).
.Ve
.SS "definition"
.IX Subsection "definition"
.Vb 7
\& Title   : definition
\& Usage   : $term\->definition( "" );
\&           or
\&           print $term\->definition();
\& Function: Set/get for the immutable definition of this Type.
\& Returns : The definition [scalar].
\& Args    : The definition [scalar] (optional).
.Ve
.SS "ontology"
.IX Subsection "ontology"
.Vb 7
\& Title   : ontology
\& Usage   : $term\->ontology( $top );
\&           or
\&           $top = $term\->ontology();
\& Function: Set/get for the ontology this relationship type lives in.
\& Returns : The ontology [Bio::Ontology::OntologyI].
\& Args    : On set, the ontology [Bio::Ontology::OntologyI] (optional).
.Ve
.SS "version"
.IX Subsection "version"
.Vb 7
\& Title   : version
\& Usage   : $term\->version( "1.00" );
\&           or
\&           print $term\->version();
\& Function: Set/get for immutable version information.
\& Returns : The version [scalar].
\& Args    : The version [scalar] (optional).
.Ve
.SS "is_obsolete"
.IX Subsection "is_obsolete"
.Vb 7
\& Title   : is_obsolete
\& Usage   : $term\->is_obsolete( 1 );
\&           or
\&           if ( $term\->is_obsolete() )
\& Function: Set/get for the immutable obsoleteness of this Type.
\& Returns : the obsoleteness [0 or 1].
\& Args    : the obsoleteness [0 or 1] (optional).
.Ve
.SS "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $term\->comment( "..." );
\&           or
\&           print $term\->comment();
\& Function: Set/get for an arbitrary immutable comment about this Type.
\& Returns : A comment.
\& Args    : A comment (optional).
.Ve
.SH "Private methods"
.IX Header "Private methods"
May be overridden in a derived class, but should never be called from
outside.
.SS "veto_change"
.IX Subsection "veto_change"
.Vb 5
\& Title   : veto_change
\& Usage   :
\& Function: Called if an attribute is changed. Setting an attribute is
\&           considered a change if it had a value before and the attempt
\&           to set it would change the value.
\&
\&           This method returns the message to be printed in the exception.
\&
\& Example :
\& Returns : A string
\& Args    : The name of the attribute that was attempted to change.
\&           Optionally, the old value and the new value for reporting
\&           purposes only.
.Ve
