.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Factory::SeqAnalysisParserFactory 3pm"
.TH Bio::Factory::SeqAnalysisParserFactory 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Factory::SeqAnalysisParserFactory \- class capable of creating
SeqAnalysisParserI compliant parsers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # initialize an object implementing this interface, e.g.
\&    $factory = Bio::Factory::SeqAnalysisParserFactory\->new();
\&    # find out the methods it knows about
\&    print "registered methods: ",
\&          join(\*(Aq, \*(Aq, keys %{$factory\->driver_table}), "\en";
\&    # obtain a parser object
\&    $parser = $factory\->get_parser(\-input=>$inputobj,
\&                                   \-params=>[@params],
\&                                   \-method => $method);
\&    # $parser is an object implementing Bio::SeqAnalysisParserI
\&    # annotate sequence with features produced by parser
\&    while(my $feat = $parser\->next_feature()) {
\&        $seq\->add_SeqFeature($feat);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a factory class capable of instantiating SeqAnalysisParserI 
implementing parsers.
.PP
The concept behind this class and the interface it implements
(Bio::Factory::SeqAnalysisParserFactoryI) is a generic analysis result
parsing in high-throughput automated sequence annotation
pipelines. See Bio::SeqAnalysisParserI for more documentation of this
concept.
.PP
You can always find out the methods an instance of this class knows
about by the way given in the \s-1SYNOPSIS\s0 section. By default, and
assuming that the documentation is up-to-date, this will comprise of
genscan, mzef, estscan, blast, hmmer, gff, and sim4 (all
case-insensitive).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp, Jason Stajich"
.IX Header "AUTHOR - Hilmar Lapp, Jason Stajich"
Email Hilmar Lapp <hlapp@gmx.net>, Jason Stajich <jason@bioperl.org>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "get_parser"
.IX Subsection "get_parser"
.Vb 6
\& Title   : get_parser
\& Usage   : $factory\->get_parser(\-input=>$inputobj, 
\&                                [ \-params=>[@params] ],
\&                                \-method => $method)
\& Function: Creates and returns a parser object for the given input and method.
\&           Both file names and streams (filehandles) are allowed.
\&
\&           Parameters (\-params argument) are passed on to the parser object
\&           and therefore are specific to the parser to be created.
\& Example :
\& Returns : A Bio::SeqAnalysisParserI implementing object. Exception if
\&           creation of the parser object fails.
\& Args    : B<input>  \- object/file where analysis results are coming from,
\&           B<params> \- parameter to use when parsing/running analysis
\&           B<method> \- method of analysis
.Ve
.SS "register_driver"
.IX Subsection "register_driver"
.Vb 3
\& Title   : register_driver
\& Usage   : $factory\->register_driver("genscan", "Bio::Tools::Genscan");
\& Function: Registers a driver a factory class should be able to instantiate.
\&
\&           This method can be called both as an instance and as a
\&           class method.
\&
\& Returns : 
\& Args    : Key of the driver (string) and the module implementing the driver
\&           (string).
.Ve
.SS "driver_table"
.IX Subsection "driver_table"
.Vb 4
\& Title   : driver_table
\& Usage   : $table = $factory\->driver_table();
\& Function: Returns a reference to the hash table storing associations of
\&           methods with drivers.
\&
\&           You use this table to look up registered methods (keys) and
\&           drivers (values).
\&
\&           In this implementation the table is class\-specific and
\&           therefore shared by all instances. You can override this in
\&           a derived class, but note that this method can be called
\&           both as an instance and a class method.
\&
\&           This will be the table used by the object internally. You
\&           should definitely know what you\*(Aqre doing if you modify the
\&           table\*(Aqs contents.  Modifications are shared by _all_
\&           instances, those present and those yet to be created.
\&
\& Returns : A reference to a hash table.
\& Args    :
.Ve
