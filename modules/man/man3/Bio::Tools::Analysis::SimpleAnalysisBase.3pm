.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Analysis::SimpleAnalysisBase 3pm"
.TH Bio::Tools::Analysis::SimpleAnalysisBase 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Analysis::SimpleAnalysisBase \- abstract superclass for
SimpleAnalysis implementations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# not to be run directly
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a generic implementation of SimpleAnalysisI and should
be used as a base class for specific implementations.
.PP
Modules implementing SimpleAnalysisBase only need to provide specific 
\&\fB_init()\fR, \fB_run()\fR and \fBresult()\fR methods, plus any get/set methods for 
parameters to the analysis program.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::SimpleAnalysisI, 
Bio::WebAgent
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Adams, Richard.Adams@ed.ac.uk, 
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Usage   : $job\->new(...)
\& Returns : a new analysis object, 
\& Args    : none (but an implementation may choose
\&           to add arguments representing parameters for the analysis
\&           program. Each key value of must have a method implemented
\&           for it in a subclass. A seq () method is provided here as
\&           this will probably be needed by all sequence analysis programs
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 3
\& Usage   : $job\->seq()
\& Returns : a Bio::PrimarySeqI implementing sequence object, or void
\& Args    : None, or a Bio::PrimarySeqI implementing object
.Ve
.SS "analysis_name"
.IX Subsection "analysis_name"
.Vb 3
\&    Usage     : $analysis\->analysis_name();
\&    Returns   : The analysis name
\&    Arguments : none
.Ve
.SS "analysis_spec"
.IX Subsection "analysis_spec"
.Vb 4
\&    Usage    :  $analysis\->analysis_spec();
\&    Returns  :  a hash reference to  a hash of analysis parameters. See
\&                Bio::SimpleAnalysisI for a list of recommended key values.
\&    Arguments:  none
.Ve
.SS "clear"
.IX Subsection "clear"
.Vb 5
\&    Usage     : $analysis\->clear();
\&    Returns   : true value on success
\&    Arguments : none
\&    Purpose   : to remove raw results from a previous analysis so that
\&                an analysis can be repeated with different parameters.
.Ve
.SS "input_spec"
.IX Subsection "input_spec"
.Vb 4
\&    Usage     : $analysis\->input_spec();
\&    Returns   : a  reference to  an array of  hashes of analysis parameters. See
\&                Bio::SimpleAnalysisI for a list of recommended key values.
\&    Arguments : none
.Ve
.SS "result_spec"
.IX Subsection "result_spec"
.Vb 6
\&    Usage     : $analysis\->result_spec();
\&    Returns   : a  reference to  a   hashes of resultformats. See
\&                Bio::SimpleAnalysisI for a list of recommended key values. 
\&                The key values can be used as parameters to the result() 
\&                method, the values provide descriptions.
\&    Arguments : none
.Ve
