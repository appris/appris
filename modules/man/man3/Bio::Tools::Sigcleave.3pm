.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Sigcleave 3pm"
.TH Bio::Tools::Sigcleave 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Sigcleave \- Bioperl object for sigcleave analysis
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Object Creation"
.IX Subsection "Object Creation"
.Vb 1
\&  use Bio::Tools::Sigcleave ();
\&
\&  # to keep the module backwar compatible, you can pass it a sequence string, but
\&  # there recommended say is to pass it a Seq object
\&
\&  # this works
\&  $seq = "MVLLLILSVLLLKEDVRGSAQSSERRVVAHMPGDIIIGALFSVHHQPTVDKVHERKCGAVREQYGI";
\&  $sig = Bio::Tools::Sigcleave\->new(\-seq  => $seq,
\&                                                \-type => \*(Aqprotein\*(Aq,
\&                                                \-threshold=>\*(Aq3.5\*(Aq,
\&                                                );
\&  # but you do:
\&  $seqobj = Bio::PrimarySeq\->new(\-seq => $seq);
\&
\&  $sig = Bio::Tools::Sigcleave\->new(\-seq  => $seqobj,
\&                                                \-threshold=>\*(Aq3.5\*(Aq,
\&                                                );
\&
\&  # now you can detect procaryotic signal sequences as well as eucaryotic
\&  $sig\->matrix(\*(Aqeucaryotic\*(Aq); # or \*(Aqprocaryotic\*(Aq
.Ve
.SS "Object Methods & Accessors"
.IX Subsection "Object Methods & Accessors"
.Vb 2
\&  # you can use this method to fine tune the threshod before printing out the results
\&  $sig\->result_count:
\&
\&  %raw_results      = $sig\->signals;
\&  $formatted_output = $sig\->pretty_print;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\*(L"Sigcleave\*(R" was a program distributed as part of the free \s-1EGCG\s0 add-on
to earlier versions of the \s-1GCG\s0 Sequence Analysis package. A new
implementation of the algorithm is now part of \s-1EMBOSS\s0 package.
.PP
From the \s-1EGCG\s0 documentation:
.PP
.Vb 5
\&  SigCleave uses the von Heijne method to locate signal sequences, and
\&  to identify the cleavage site. The method is 95% accurate in
\&  resolving signal sequences from non\-signal sequences with a cutoff
\&  score of 3.5, and 75\-80% accurate in identifying the cleavage
\&  site. The program reports all hits above a minimum value.
.Ve
.PP
The \s-1EGCG\s0 Sigcleave program was written by Peter Rice (E\-mail:
pmr@sanger.ac.uk Post: Informatics Division, The Sanger Centre,
Wellcome Trust Genome Campus, Hinxton, Cambs, \s-1CB10 1SA, UK\s0).
.PP
Since \s-1EGCG\s0 is no longer distributed for the latest versions of \s-1GCG,\s0
this code was developed to emulate the output of the original program
as much as possible for those who lost access to sigcleave when
upgrading to newer versions of \s-1GCG.\s0
.PP
There are 2 accessor methods for this object. \*(L"signals\*(R" will return a
perl associative array containing the sigcleave scores keyed by amino
acid position.  \*(L"pretty_print\*(R" returns a formatted string similar to
the output of the original sigcleave utility.
.PP
In both cases, the \*(L"threshold\*(R" setting controls the score reporting
level. If no value for threshold is passed in by the user, the code
defaults to a reporting value of 3.5.
.PP
In this implementation the accessor will never return any
score/position pair which does not meet the threshold limit. This is
the slightly different from the behaviour of the 8.1 \s-1EGCG\s0 sigcleave
program which will report the highest of the under-threshold results
if nothing else is found.
.PP
Example of pretty_print output:
.PP
.Vb 1
\&        SIGCLEAVE of sigtest from: 1 to 146
\&
\&        Report scores over 3.5
\&        Maximum score 4.9 at residue 131
\&
\&         Sequence:  FVILAAMSIQGSA\-NLQTQWKSTASLALET
\&                    | (signal)    | (mature peptide)
\&                118            131
\&
\&         Other entries above 3.5
\&
\&        Maximum score 3.7 at residue 112
\&
\&         Sequence:  CSRQLFGWLFCKV\-HPGAIVFVILAAMSIQGSANLQTQWKSTASLALET
\&                   | (signal)    | (mature peptide)
\&                99            112
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
When updating and maintaining a module, it helps to know that people
are actually using it. Let us know if you find a bug, think this code
is useful or have any improvements/features to suggest.
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Dagdigian, dag\-at\-sonsorol.org  & others
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
.SH "VERSION"
.IX Header "VERSION"
Bio::Tools::Sigcleave, \f(CW$Id\fR$
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999 Chris Dagdigian & others. All Rights Reserved.
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "REFERENCES / SEE ALSO"
.IX Header "REFERENCES / SEE ALSO"
von Heijne G. (1986) \*(L"A new method for predicting signal sequences
cleavage sites.\*(R"  Nucleic Acids Res. 14, 4683\-4690.
.PP
von Heijne G. (1987) in \*(L"Sequence Analysis in Molecular Biology:
Treasure Trove or Trivial Pursuit\*(R" (Acad. Press, (1987), 113\-117).
.SH "APPENDIX"
.IX Header "APPENDIX"
The following documentation describes the various functions
contained in this module. Some functions are for internal 
use and are not meant to be called by the user; they are 
preceded by an underscore (\*(L"_\*(R").
.SH "threshold"
.IX Header "threshold"
.Vb 8
\& Title     : threshold
\& Usage     : $value = $self\->threshold
\& Purpose   : Read/write method sigcleave score reporting threshold.
\& Returns   : float.
\& Argument  : new value, float
\& Throws    : on non\-number argument
\& Comments  : defaults to 3.5
\& See Also   : n/a
.Ve
.SH "matrix"
.IX Header "matrix"
.Vb 8
\& Title     : matrix
\& Usage     : $value = $self\->matrix(\*(Aqprocaryotic\*(Aq)
\& Purpose   : Read/write method sigcleave matrix.
\& Returns   : float.
\& Argument  : new value: \*(Aqeucaryotic\*(Aq or \*(Aqprocaryotic\*(Aq
\& Throws    : on non\-number argument
\& Comments  : defaults to 3.5
\& See Also   : n/a
.Ve
.SH "seq"
.IX Header "seq"
.Vb 6
\& Title     : seq
\& Usage     : $value = $self\->seq($seq_object)
\& Purpose   : set the Seq object to be used
\& Returns   : Seq object
\& Argument  : protein sequence or Seq object
\& See Also   : n/a
.Ve
.SH "_Analyze"
.IX Header "_Analyze"
.Vb 10
\& Title     : _Analyze
\& Usage     : N/A This is an internal method. Not meant to be called from outside
\&           : the package
\&           :
\& Purpose   : calculates sigcleave score and amino acid position for the
\&           : given protein sequence. The score reporting threshold can
\&           : be adjusted by passing in the "threshold" parameter during
\&           : object construction. If no threshold is passed in, the code
\&           : defaults to reporting any scores equal to or above 3.5
\&           :
\& Returns   : nothing. results are added to the object
\& Argument  : none.
\& Throws    : nothing.
\& Comments  : nothing.
\&See Also   : n/a
.Ve
.SH "signals"
.IX Header "signals"
.Vb 10
\& Title     : signals
\& Usage     : %sigcleave_results = $sig\->signals;
\&           :
\& Purpose   : Accessor method for sigcleave results
\&           : 
\& Returns   : Associative array. The key value represents the amino acid position
\&           : and the value represents the score. Only scores that
\&           : are greater than or equal to the THRESHOLD value are reported.
\&           : 
\& Argument  : none.
\& Throws    : none.
\& Comments  : none.
\&See Also   : THRESHOLD
.Ve
.SH "result_count"
.IX Header "result_count"
.Vb 10
\& Title     : result_count
\& Usage     : $count = $sig\->result_count;
\&           :
\& Purpose   : Accessor method for sigcleave results
\&           : 
\& Returns   : Integer, number of results above the threshold
\&           : 
\& Argument  : none.
\& Throws    : none.
\& Comments  : none.
.Ve
.PP
See Also   : \s-1THRESHOLD\s0
.SH "pretty_print"
.IX Header "pretty_print"
.Vb 12
\& Title     : pretty_print
\& Usage     : $output = $sig\->pretty_print;
\&           : print $sig\->pretty_print;
\&           :
\& Purpose   : Emulates the output of the EGCG Sigcleave
\&           : utility.
\&           : 
\& Returns   : A formatted string.
\& Argument  : none.
\& Throws    : none.
\& Comments  : none.
\&See Also   : n/a
.Ve
