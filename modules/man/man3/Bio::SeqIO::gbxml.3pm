.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::gbxml 3pm"
.TH Bio::SeqIO::gbxml 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::gbxml \- GenBank sequence input/output stream using SAX
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
It is probably best not to use this object directly, but rather go
through the SeqIO handler system. To read a GenBank \s-1XML\s0 file:
.PP
.Vb 1
\&   $stream = Bio::SeqIO\->new( \-file => $filename, \-format => \*(Aqgbxml\*(Aq);
\&
\&   while ( my $bioSeqObj = $stream\->next_seq() ) {
\&        # do something with $bioSeqObj
\&   }
.Ve
.PP
To write a Seq object to the current file handle in GenBank \s-1XML\s0 format:
.PP
.Vb 1
\&   $stream\->write_seq( \-seq => $seqObj);
.Ve
.PP
If instead you would like a \s-1XML::DOM\s0 object containing the \s-1GBXML,\s0 use:
.PP
.Vb 1
\&   my $newXmlObject = $stream\->to_bsml( \-seq => $seqObj);
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
In addition to parts of the Bio:: hierarchy, this module uses:
.PP
\&\s-1XML::SAX\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Seq objects to and from GenBank \s-1XML\s0
flatfiles.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\& bioperl\-l@bioperl.org                  \- General discussion
\& http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\& https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ryan Golhar"
.IX Header "AUTHOR - Ryan Golhar"
Email golharam-at-umdnj-dot-edu
.SH "METHODS"
.IX Header "METHODS"
.SS "next_seq"
.IX Subsection "next_seq"
Title   : next_seq
Usage   : my \f(CW$bioSeqObj\fR = \f(CW$stream\fR\->next_seq
Function: Retrieves the next sequence from a SeqIO::gbxml stream.
Returns : A reference to a Bio::Seq::RichSeq object
Args    :
