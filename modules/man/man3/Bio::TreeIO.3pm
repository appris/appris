.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::TreeIO 3pm"
.TH Bio::TreeIO 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::TreeIO \- Parser for Tree files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  {
\&      use Bio::TreeIO;
\&      my $treeio = Bio::TreeIO\->new(\-format => \*(Aqnewick\*(Aq,
\&                                    \-file   => \*(Aqglobin.dnd\*(Aq);
\&      while( my $tree = $treeio\->next_tree ) {
\&                print "Tree is ", $tree\->number_nodes, "\en";
\&      }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the driver module for Tree reading from data streams and
flatfiles.  This is intended to be able to create Bio::Tree::TreeI
objects.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Allen Day <allenday@ucla.edu>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : my $obj = Bio::TreeIO\->new();
\& Function: Builds a new Bio::TreeIO object 
\& Returns : Bio::TreeIO
\& Args    : a hash.  useful keys:
\&   \-format : Specify the format of the file.  Supported formats:
\&
\&     newick             Newick tree format
\&     nexus              Nexus tree format
\&     nhx                NHX tree format
\&     svggraph           SVG graphical representation of tree
\&     tabtree            ASCII text representation of tree
\&     lintree            lintree output format
.Ve
.SS "format"
.IX Subsection "format"
.Vb 5
\& Title   : format
\& Usage   : $format = $obj\->format()
\& Function: Get the tree format
\& Returns : tree format
\& Args    : none
.Ve
.SS "next_tree"
.IX Subsection "next_tree"
.Vb 5
\& Title   : next_tree
\& Usage   : my $tree = $treeio\->next_tree;
\& Function: Gets the next tree off the stream
\& Returns : Bio::Tree::TreeI or undef if no more trees
\& Args    : none
.Ve
.SS "write_tree"
.IX Subsection "write_tree"
.Vb 5
\& Title   : write_tree
\& Usage   : $treeio\->write_tree($tree);
\& Function: Writes a tree onto the stream
\& Returns : none
\& Args    : Bio::Tree::TreeI
.Ve
.SS "attach_EventHandler"
.IX Subsection "attach_EventHandler"
.Vb 5
\& Title   : attach_EventHandler
\& Usage   : $parser\->attatch_EventHandler($handler)
\& Function: Adds an event handler to listen for events
\& Returns : none
\& Args    : Bio::Event::EventHandlerI
.Ve
.SS "_eventHandler"
.IX Subsection "_eventHandler"
.Vb 5
\& Title   : _eventHandler
\& Usage   : private
\& Function: Get the EventHandler
\& Returns : Bio::Event::EventHandlerI
\& Args    : none
.Ve
.SS "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 6
\& Title   : _load_format_module
\& Usage   : *INTERNAL TreeIO stuff*
\& Function: Loads up (like use) a module at run time on demand
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_guess_format"
.IX Subsection "_guess_format"
.Vb 6
\& Title   : _guess_format
\& Usage   : $obj\->_guess_format($filename)
\& Function:
\& Example :
\& Returns : guessed format of filename (lower case)
\& Args    :
.Ve
