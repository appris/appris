.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::Hit::BlastHit 3pm"
.TH Bio::Search::Hit::BlastHit 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::Hit::BlastHit \- Blast\-specific subclass of Bio::Search::Hit::GenericHit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Bio::Search::Hit::BlastHit;
\&    my $hit = Bio::Search::Hit::BlastHit\->new(\-algorithm => \*(Aqblastp\*(Aq);
.Ve
.PP
# See Bio::Search::Hit::GenericHit for information about working with Hits.
.PP
# \s-1TODO:\s0 Describe how to configure a SearchIO stream so that it generates
#       GenericHit objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is a subclass of Bio::Search::Hit::GenericHit
and provides some operations that facilitate working with \s-1BLAST\s0
and PSI-BLAST Hits.
.PP
For general information about working with Hits, see 
Bio::Search::Hit::GenericHit.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich and Steve Chervitz"
.IX Header "AUTHOR - Jason Stajich and Steve Chervitz"
Email jason@bioperl.org
Email sac@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Search::Hit::GenericHit\->new();
\& Function: Builds a new Bio::Search::Hit::GenericHit object 
\& Returns : Bio::Search::Hit::GenericHit
\& Args    : See Bio::Search::Hit::GenericHit() for other args.
\&           Here are the BLAST\-specific args that can be used when
\&           creating BlastHit objects:
\&           \-iteration    => integer for the PSI\-Blast iteration number
\&           \-found_again  => boolean, true if hit appears in a 
\&                            "previously found" section of a PSI\-Blast report.
.Ve
.SS "iteration"
.IX Subsection "iteration"
.Vb 8
\& Usage     : $hit\->iteration( $iteration_num );
\& Purpose   : Gets the iteration number in which the Hit was found.
\& Example   : $iteration_num = $sbjct\->iteration();
\& Returns   : Integer greater than or equal to 1
\&             Non\-PSI\-BLAST reports will report iteration as 1, but this number
\&             is only meaningful for PSI\-BLAST reports.
\& Argument  : iteration_num (optional, used when setting only)
\& Throws    : none
.Ve
.PP
See Also   : \fBfound_again()\fR
.SS "found_again"
.IX Subsection "found_again"
.Vb 6
\& Title     : found_again
\& Usage     : $hit\->found_again;
\&             $hit\->found_again(1);
\& Purpose   : Gets a boolean indicator whether or not the hit has
\&             been found in a previous iteration.
\&             This is only applicable to PSI\-BLAST reports.
\&
\&              This method indicates if the hit was reported in the 
\&              "Sequences used in model and found again" section of the
\&              PSI\-BLAST report or if it was reported in the
\&              "Sequences not found previously or not previously below threshold"
\&              section of the PSI\-BLAST report. Only for hits in iteration > 1.
\&
\& Example   : if( $hit\->found_again()) { ... };
\& Returns   : Boolean, true (1) if the hit has been found in a 
\&             previous PSI\-BLAST iteration.
\&             Returns false (0 or undef) for hits that have not occurred in a
\&             previous PSI\-BLAST iteration.
\& Argument  : Boolean (1 or 0). Only used for setting.
\& Throws    : none
.Ve
.PP
See Also   : \fBiteration()\fR
