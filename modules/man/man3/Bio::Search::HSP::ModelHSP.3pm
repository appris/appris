.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Search::HSP::ModelHSP 3pm"
.TH Bio::Search::HSP::ModelHSP 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Search::HSP::ModelHSP \- A HSP object for model\-based searches
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Bio::Search::HSP::ModelHSP;
\&    # us it just like a Bio::Search::HSP::ModelHSP object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is a specialization of Bio::Search::HSP::ModelHSP and is used
for searches which involve a query model, such as a Hidden Markov Model (\s-1HMM\s0),
covariance model (\s-1CM\s0), descriptor, or anything else besides a sequence. Note
that results from any \s-1HSPI\s0 class methods which rely on the query being a
sequence are unreliable and have thus been overridden with warnings indicating
they have not been implemented at this time.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Chris Fields"
.IX Header "AUTHOR - Chris Fields"
Email cjfields at bioperl dot org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::Search::HSP::ModelHSP\->new();
\& Function: Builds a new Bio::Search::HSP::ModelHSP object 
\& Returns : Bio::Search::HSP::ModelHSP
\& Args    :
.Ve
.PP
Plus Bio::Seach::HSP::ModelHSP methods
.PP
.Vb 10
\&           \-algorithm => algorithm used (Infernal, RNAMotif, ERPIN, etc)
\&           \-evalue    => evalue
\&           \-pvalue    => pvalue
\&           \-bits      => bit value for HSP
\&           \-score     => score value for HSP (typically z\-score but depends on
\&                                              analysis)
\&           \-hsp_length=> Length of the HSP (including gaps)
\&           \-identical => # of residues that that matched identically
\&           \-conserved => # of residues that matched conservatively 
\&                           (only protein comparisons;
\&                            conserved == identical in nucleotide comparisons)
\&           \-hsp_gaps   => # of gaps in the HSP
\&           \-query_gaps => # of gaps in the query in the alignment
\&           \-hit_gaps   => # of gaps in the subject in the alignment    
\&           \-query_name  => HSP Query sequence name (if available)
\&           \-query_start => HSP Query start (in original query sequence coords)
\&           \-query_end   => HSP Query end (in original query sequence coords)
\&           \-hit_name    => HSP Hit sequence name (if available)
\&           \-hit_start   => HSP Hit start (in original hit sequence coords)
\&           \-hit_end     => HSP Hit end (in original hit sequence coords)
\&           \-hit_length  => total length of the hit sequence
\&           \-query_length=> total length of the query sequence
\&           \-query_seq   => query sequence portion of the HSP
\&           \-hit_seq     => hit sequence portion of the HSP
\&           \-homology_seq=> homology sequence for the HSP
\&           \-hit_frame   => hit frame (only if hit is translated protein)
\&           \-query_frame => query frame (only if query is translated protein)
\&           \-meta        => optional meta data (sec structure, markup, etc)
\&           \-custom_score=> custom score data
.Ve
.SS "meta"
.IX Subsection "meta"
.Vb 7
\& Title   : meta
\& Usage   : my $meta = $hsp\->meta();
\& Function: Returns meta data for this HSP or undef
\& Returns : string of meta data or undef
\& Args    : [optional] string to set value
\& Note    : At some point very soon this will likely be a Bio::AnnotationI.
\&           Don\*(Aqt get used to a simple string!
.Ve
.SS "noncanonical_string"
.IX Subsection "noncanonical_string"
.Vb 5
\& Title   : noncanonical_string
\& Usage   : my $nc_seq = $hsp\->noncanonical_string();
\& Function: Returns noncanonical string (NC) data for this HSP or undef
\& Returns : string of noncanonical data or undef
\& Args    : [optional] string to set value
.Ve
.SS "custom_score"
.IX Subsection "custom_score"
.Vb 9
\& Title   : custom_score
\& Usage   : my $data = $hsp\->custom_score();
\& Function: Returns custom_score data for this HSP, or undef
\& Returns : custom_score data or undef
\& Args    : [optional] custom_score
\& Note    : This is a Get/Set used to deal with odd score\-like data generated
\&           from RNAMotif (and other programs) where the score section
\&           can be customized to include non\-standard data, including sequence
\&           data, user\-based scores, and other values.
.Ve
.SS "Bio::Search::HSP::HSPI methods"
.IX Subsection "Bio::Search::HSP::HSPI methods"
Implementation of Bio::Search::HSP::HSPI methods follow
.SS "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $hsp\->algorithm
\& Function: Obtain the name of the algorithm used to obtain the HSP
\& Returns : string (e.g., BLASTP)
\& Args    : [optional] scalar string to set value
.Ve
.SS "strand"
.IX Subsection "strand"
.Vb 7
\& Title   : strand
\& Usage   : $hsp\->strand(\*(Aqhit\*(Aq)
\& Function: Retrieves the strand for the HSP component requested
\& Returns : +1 or \-1 (0 if unknown)
\& Args    : \*(Aqhit\*(Aq or \*(Aqsubject\*(Aq or \*(Aqsbjct\*(Aq to retrieve the strand of the subject.
\&           There is no strand available for \*(Aqquery\*(Aq, as the query is a model
\&           and not a true sequence.
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 10
\& Usage     : $hsp\->seq( [seq_type] );
\& Purpose   : Get the query or sbjct sequence as a Bio::Seq.pm object.
\& Example   : $seqObj = $hsp\->seq(\*(Aqsbjct\*(Aq);
\& Returns   : Object reference for a Bio::Seq.pm object.
\& Argument  : seq_type = \*(Aqquery\*(Aq or \*(Aqhit\*(Aq or \*(Aqsbjct\*(Aq (default = \*(Aqsbjct\*(Aq).
\&           :  (\*(Aqsbjct\*(Aq is synonymous with \*(Aqhit\*(Aq) 
\&           : default is \*(Aqsbjct\*(Aq
\&           : Note: if there is no sequence available (eg for a model\-based
\&           : search), this returns a LocatableSeq object w/o a sequence
\& Throws    : Propagates any exception that occurs during construction
\&           : of the Bio::Seq.pm object.
\& Comments  : The sequence is returned in an array of strings corresponding
\&           : to the strings in the original format of the Blast alignment.
\&           : (i.e., same spacing).
.Ve
.PP
See Also   : \fBseq_str()\fR, Bio::Seq
.SS "pvalue"
.IX Subsection "pvalue"
.Vb 6
\& Title   : pvalue
\& Usage   : my $pvalue = $hsp\->pvalue();
\& Function: Returns the P\-value for this HSP or undef 
\& Returns : float or exponential (2e\-10)
\&           P\-value is not defined with NCBI Blast2 reports.
\& Args    : [optional] numeric to set value
.Ve
.SS "evalue"
.IX Subsection "evalue"
.Vb 5
\& Title   : evalue
\& Usage   : my $evalue = $hsp\->evalue();
\& Function: Returns the e\-value for this HSP
\& Returns : float or exponential (2e\-10)
\& Args    : [optional] numeric to set value
.Ve
.SS "gaps"
.IX Subsection "gaps"
.Vb 9
\& Title    : gaps
\& Usage    : my $gaps = $hsp\->gaps( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function : Get the number of gaps in the query, hit, or total alignment.
\& Returns  : Integer, number of gaps or 0 if none
\& Args     : arg 1: \*(Aqquery\*(Aq = num gaps in query seq
\&                   \*(Aqhit\*(Aq   = num gaps in hit seq
\&                   \*(Aqtotal\*(Aq = num gaps in whole alignment 
\&                   default = \*(Aqtotal\*(Aq 
\&            arg 2: [optional] integer gap value to set for the type requested
.Ve
.SS "query_string"
.IX Subsection "query_string"
.Vb 5
\& Title   : query_string
\& Usage   : my $qseq = $hsp\->query_string;
\& Function: Retrieves the query sequence of this HSP as a string
\& Returns : string
\& Args    : [optional] string to set for query sequence
.Ve
.SS "hit_string"
.IX Subsection "hit_string"
.Vb 5
\& Title   : hit_string
\& Usage   : my $hseq = $hsp\->hit_string;
\& Function: Retrieves the hit sequence of this HSP as a string
\& Returns : string
\& Args    : [optional] string to set for hit sequence
.Ve
.SS "homology_string"
.IX Subsection "homology_string"
.Vb 8
\& Title   : homology_string
\& Usage   : my $homo_string = $hsp\->homology_string;
\& Function: Retrieves the homology sequence for this HSP as a string.
\&         : The homology sequence is the string of symbols in between the 
\&         : query and hit sequences in the alignment indicating the degree
\&         : of conservation (e.g., identical, similar, not similar).
\& Returns : string
\& Args    : [optional] string to set for homology sequence
.Ve
.SS "length"
.IX Subsection "length"
.Vb 12
\& Title    : length
\& Usage    : my $len = $hsp\->length( [\*(Aqquery\*(Aq|\*(Aqhit\*(Aq|\*(Aqtotal\*(Aq] );
\& Function : Returns the length of the query or hit in the alignment 
\&            (without gaps) 
\&            or the aggregate length of the HSP (including gaps;
\&            this may be greater than either hit or query )
\& Returns  : integer
\& Args     : arg 1: \*(Aqquery\*(Aq = length of query seq (without gaps)
\&                   \*(Aqhit\*(Aq   = length of hit seq (without gaps)
\&                   \*(Aqtotal\*(Aq = length of alignment (with gaps)
\&                   default = \*(Aqtotal\*(Aq 
\&            arg 2: [optional] integer length value to set for specific type
.Ve
.SS "frame"
.IX Subsection "frame"
.Vb 10
\& Title   : frame
\& Usage   : my ($qframe, $hframe) = $hsp\->frame(\*(Aqlist\*(Aq,$queryframe,$subjectframe)
\& Function: Set the Frame for both query and subject and insure that
\&           they agree.
\&           This overrides the frame() method implementation in
\&           FeaturePair.
\& Returns : array of query and subject frame if return type wants an array
\&           or query frame if defined or subject frame if not defined
\& Args    : \*(Aqhit\*(Aq or \*(Aqsubject\*(Aq or \*(Aqsbjct\*(Aq to retrieve the frame of the subject (default)
\&           \*(Aqquery\*(Aq to retrieve the query frame 
\&           \*(Aqlist\*(Aq or \*(Aqarray\*(Aq to retrieve both query and hit frames together
\& Note    : Frames are stored in the GFF way (0\-2) not 1\-3
\&           as they are in BLAST (negative frames are deduced by checking
\&                                 the strand of the query or hit)
.Ve
.SS "get_aln"
.IX Subsection "get_aln"
.Vb 5
\& Title   : get_aln
\& Usage   : my $aln = $hsp\->gel_aln
\& Function: Returns a Bio::SimpleAlign representing the HSP alignment
\& Returns : Bio::SimpleAlign
\& Args    : none
.Ve
.SS "Inherited from Bio::SeqFeature::SimilarityPair"
.IX Subsection "Inherited from Bio::SeqFeature::SimilarityPair"
These methods come from Bio::SeqFeature::SimilarityPair
.SS "query"
.IX Subsection "query"
.Vb 5
\& Title   : query
\& Usage   : my $query = $hsp\->query
\& Function: Returns a SeqFeature representing the query in the HSP
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] new value to set
.Ve
.SS "hit"
.IX Subsection "hit"
.Vb 5
\& Title   : hit
\& Usage   : my $hit = $hsp\->hit
\& Function: Returns a SeqFeature representing the hit in the HSP
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] new value to set
.Ve
.SS "significance"
.IX Subsection "significance"
.Vb 6
\& Title   : significance
\& Usage   : $evalue = $obj\->significance();
\&           $obj\->significance($evalue);
\& Function: Get/Set the significance value
\& Returns : numeric
\& Args    : [optional] new value to set
.Ve
.SS "score"
.IX Subsection "score"
.Vb 5
\& Title   : score
\& Usage   : my $score = $hsp\->score();
\& Function: Returns the score for this HSP or undef 
\& Returns : numeric           
\& Args    : [optional] numeric to set value
.Ve
.SS "bits"
.IX Subsection "bits"
.Vb 5
\& Title   : bits
\& Usage   : my $bits = $hsp\->bits();
\& Function: Returns the bit value for this HSP or undef 
\& Returns : numeric
\& Args    : none
.Ve
.SH "ModelHSP methods overridden in ModelHSP"
.IX Header "ModelHSP methods overridden in ModelHSP"
The following methods have been overridden due to their current reliance on
sequence-based queries. They may be implemented in future versions of this class.
.SS "seq_inds"
.IX Subsection "seq_inds"
.SS "frac_identical"
.IX Subsection "frac_identical"
.SS "frac_conserved"
.IX Subsection "frac_conserved"
.SS "matches"
.IX Subsection "matches"
.SS "num_conserved"
.IX Subsection "num_conserved"
.SS "num_identical"
.IX Subsection "num_identical"
.SS "cigar_string"
.IX Subsection "cigar_string"
.SS "generate_cigar_string"
.IX Subsection "generate_cigar_string"
.SS "percent_identity"
.IX Subsection "percent_identity"
