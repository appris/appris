.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::OntologyIO 3pm"
.TH Bio::OntologyIO 3pm "2021-02-03" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::OntologyIO \- Parser factory for Ontology formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::OntologyIO;
\&
\&    my $parser = Bio::OntologyIO\->new(\-format => "go",
\&                                      \-file=> $file);
\&
\&    while(my $ont = $parser\->next_ontology()) {
\&         print "read ontology ",$ont\->name()," with ",
\&               scalar($ont\->get_root_terms)," root terms, and ",
\&               scalar($ont\->get_leaf_terms)," leaf terms\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the parser factory for different ontology sources and
formats. Conceptually, it is very similar to Bio::SeqIO, but the
difference is that the chunk of data returned as an object is an
entire ontology.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $parser = Bio::OntologyIO\->new(\-format => \*(Aqgo\*(Aq, @args);
\& Function: Returns a stream of ontologies opened on the specified input
\&           for the specified format.
\& Returns : An ontology parser (an instance of Bio::OntologyIO) initialized
\&           for the specified format.
\& Args    : Named parameters. Common parameters are
\&
\&              \-format    \- the format of the input; the following are
\&                           presently supported:
\&                  goflat: DAG\-Edit Gene Ontology flat files
\&                  go    : synonymous to goflat
\&                  soflat: DAG\-Edit Sequence Ontology flat files
\&                  so    : synonymous to soflat
\&                  simplehierarchy: text format with one term per line
\&                          and indentation giving the hierarchy
\&                  evoc  : synonymous to simplehierarchy
\&                  interpro: InterPro XML
\&                  interprosax: InterPro XML \- this is actually not a
\&                          Bio::OntologyIO compliant parser; instead it
\&                          persists terms as they are encountered.
\&                          L<Bio::OntologyIO::Handlers::InterPro_BioSQL_Handler>
\&                  obo   : OBO format style from Gene Ontology Consortium
\&              \-file      \- the file holding the data
\&              \-fh        \- the stream providing the data (\-file and \-fh are
\&                          mutually exclusive)
\&              \-ontology_name \- the name of the ontology
\&              \-engine    \- the L<Bio::Ontology::OntologyEngineI> object
\&                          to be reused (will be created otherwise); note
\&                          that every L<Bio::Ontology::OntologyI> will
\&                          qualify as well since that one inherits from the
\&                          former.
\&              \-term_factory \- the ontology term factory to use. Provide a
\&                          value only if you know what you are doing.
\&
\&           DAG\-Edit flat file parsers will usually also accept the
\&           following parameters.
\&
\&              \-defs_file \- the name of the file holding the term
\&                          definitions
\&              \-files     \- an array ref holding the file names (for GO,
\&                          there will usually be 3 files: component.ontology,
\&                          function.ontology, process.ontology)
\&
\&           Other parameters are specific to the parsers.
.Ve
.SS "format"
.IX Subsection "format"
.Vb 5
\& Title   : format
\& Usage   : $format = $parser\->format()
\& Function: Get the ontology format
\& Returns : ontology format
\& Args    : none
.Ve
.SS "next_ontology"
.IX Subsection "next_ontology"
.Vb 6
\& Title   : next_ontology
\& Usage   : $ont = $stream\->next_ontology()
\& Function: Reads the next ontology object from the stream and returns it.
\& Returns : a L<Bio::Ontology::OntologyI> compliant object, or undef at the
\&           end of the stream
\& Args    : none
.Ve
.SS "term_factory"
.IX Subsection "term_factory"
.Vb 3
\& Title   : term_factory
\& Usage   : $obj\->term_factory($newval)
\& Function: Get/set the ontology term factory to use.
\&
\&           As a user of this module it is not necessary to call this
\&           method as there will be default. In order to change the
\&           default, the easiest way is to instantiate
\&           L<Bio::Ontology::TermFactory> with the proper \-type
\&           argument. Most if not all parsers will actually use this
\&           very implementation, so even easier than the aforementioned
\&           way is to simply call
\&           $ontio\->term_factory\->type("Bio::Ontology::MyTerm").
\&
\& Example :
\& Returns : value of term_factory (a Bio::Factory::ObjectFactoryI object)
\& Args    : on set, new value (a Bio::Factory::ObjectFactoryI object, optional)
.Ve
.SH "Private Methods"
.IX Header "Private Methods"
.Vb 3
\&  Some of these are actually \*(Aqprotected\*(Aq in OO speak, which means you
\&  may or will want to utilize them in a derived ontology parser, but
\&  you should not call them from outside.
.Ve
.SS "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 6
\& Title   : _load_format_module
\& Usage   : *INTERNAL OntologyIO stuff*
\& Function: Loads up (like use) a module at run time on demand
\& Example :
\& Returns :
\& Args    :
.Ve
